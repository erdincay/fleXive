<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter [
        <!ENTITY % global_entities SYSTEM "global.ent">
        %global_entities;
        ]>
<chapter xmlns="http://docbook.org/ns/docbook" xml:id="admin_gui" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <xi:include href="includes/author_gglos.xml"/>
    <xi:include href="includes/author_azrzavy.xml"/>
    <xi:include href="includes/author_hbacher.xml"/>

    <title>The &flexive; administration GUI</title>

    <section xml:id="administration_gui_basics">
        <title>Running the administration GUI</title>
        <para>Provided that you have a working flexive installation, you
            start the administration GUI by starting your chosen webserver. You enter
            the administration GUI by opening your web browser and entering the address
            of the administration GUI startpage. By default the address is
            <code>http://localhost:8080/flexive/adm/main.jsf</code>
            where
            <code>localhost</code>
            can to be replaced by your IP address. The port (
            <code>8080</code>
            in the example) depends on your
            Application Servers setting and is the default for e.g. JBoss. After a few moments, you
            will reach the login page. If you want to work with the administration
            GUI as supervisor (a role that is allowed to do
            <emphasis>everything</emphasis>
            without any security limitations), the default username to
            choose is
            <code>supervisor</code>
            with its default password
            <code>supervisor</code>.
        </para>
    </section>

    <section xml:id="structure_editor_basics">
        <title>The structure editor</title>
        <para>The structure editor allows you to
            define the structure or blueprints of content instances. In essence, the
            structure of a content instance is defined by three main building blocks:
            <itemizedlist>
                <listitem>
                    <para>
                        A
                        <link linkend="core_structure_types">type</link>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The type's assigned
                        <link linkend="core_structure_groups">groups</link>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The type's assigned
                        <link linkend="core_structure_properties">properties</link>
                    </para>
                </listitem>
            </itemizedlist>
            The smallest building block is represented by property, which defines what
            data may be assigned to a content instance and who has access to that data.
            In order to make life easier, a specific set of properties can
            be grouped together into a group. A group can then be assigned to a different
            type later on, therefore saving you the trouble of manually assigning every single
            property to the type all over again. A more detailed explanation can be found in the chapter about
            <link linkend="core_structure_overview">structures</link>.
        </para>

        <important>Please note that properties and groups on their own do not
            "belong to" types and also types do not "consist of" properties. Instead properties
            and groups need to be assigned to types. In practice this
            means that, when you want to add a property or a group to a type, what you really do
            is creating a property assignment or group assignment which acts as a "link" between
            the type and the actual property. Similarly, if you remove a property or group from a type,
            means removing the assignment so that this specific property or group is
            no longer assigned to the type anymore. Also note that properties or groups that are not assigned to any
            type or another group will be automatically removed from the system.
        </important>

        <section xml:id="structure_editor_gui">
            <title>The structure editor GUI</title>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/structureEditor/se_overview.png" format="PNG" scalefit="1"
                                   width="100%"
                                   contentdepth="66%"/>
                    </imageobject>
                </mediaobject>
            </para>

            <para>The structure editor GUI is reachable by clicking the
                <guimenuitem>Structure</guimenuitem>
                tab (1) in the administration backend. The GUI is separated into two parts: the
                structure tree (2) on the left half of the screen and the edit view (3) on the right half.
            </para>
            <section xml:id="structure_tree_items">
                <title>Structure tree items</title>
                <para>The structure tree consists of the following items:
                    <itemizedlist>
                        <listitem>
                            <para>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/fxType.png" format="PNG"
                                                   contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                                Content types: types with their mode set to "Content". Types are always displayed
                                at the root level, possible children are
                                group and property assignments. All children are assigned to this specific type.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/fxTypeRelation.png" format="PNG"
                                                   contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                                Relation types: types with their mode set to "Relation". Types are always displayed at
                                the root level, possible children
                                are group and property assignments. All children are assigned to this specific type.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/fxGroup.png" format="PNG"
                                                   contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                                Group assignments: possible children are group and property assignments. All children
                                are
                                assigned to this specific group.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/fxAssignedProperty.png" format="PNG"
                                                   contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                                Property assignments: property assignments are assigned to groups or types and act as
                                the
                                smallest building blocks and therefore without any children.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/fxAssignedPropertySystemInternal.png"
                                                   format="PNG" contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                                System internal property assignments: assignments of special system internal properties
                                that are common to all types and are intentionally not editable. For clarity reasons,
                                instead of displaying
                                those non editable properties for every type, they are only displayed once at the root
                                level.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section xml:id="structure_tree_interaction">
                <title>Structure tree interaction</title>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                Left click: left clicking on an element in the structure tree opens
                                the element in
                                <glossterm>view mode</glossterm>
                                on the right half of the screen. Left clicking
                                on the
                                <guiicon>[+]</guiicon>
                                graphic icon to the left of a specific element expands the tree
                                and shows the children of the specific element. Left clicking on the
                                <guiicon>[-]</guiicon>
                                graphic
                                icon to the left of a specific element collapses the tree and hides the
                                element's children.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Left clicking on the caption of the structure tab opens a drop down menu. The following
                                options are available:
                                <itemizedlist>
                                    <listitem>
                                        <para>Create a new type.
                                        </para>
                                    </listitem>
                                </itemizedlist>
                                <inlinemediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/structureEditor/type_dropdown.png" format="PNG"
                                                   contentwidth="66%"/>
                                    </imageobject>
                                </inlinemediaobject>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Right click: right clicking on an element in the structure tree opens
                                a context menu with possible actions. Depending on which element was
                                right clicked different actions are possible:
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            For types it is possible to:
                                            <itemizedlist>
                                                <listitem>
                                                    <para>Open the type in
                                                        <glossterm>view mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>Open the type in
                                                        <glossterm>edit mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>Create a new property that will be automatically assigned to
                                                        this
                                                        type.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>Create a new group that will be automatically assigned to this
                                                        type.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To create content for the selected type (this aciton will open
                                                        the
                                                        content editor).
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To search for content instances of this specific type (this
                                                        aciton
                                                        will open the query editor).
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To delete the selected type.
                                                    </para>
                                                </listitem>
                                            </itemizedlist>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata fileref="images/structureEditor/context_menu_type.png"
                                                               format="PNG" contentwidth="66%"/>
                                                </imageobject>
                                            </mediaobject>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            For group assignments it is possible to:
                                            <itemizedlist>
                                                <listitem>
                                                    <para>Open the group assignemnt in
                                                        <glossterm>view mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>Open the group assignment in
                                                        <glossterm>edit mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        Create a new property or group that
                                                        will automatically be assigned to the selected group
                                                        assignment's
                                                        group.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To copy the group assignment, so it can be pasted into another
                                                        group
                                                        or type.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To cut the group assignment, so it can be pasted into the same
                                                        group
                                                        or type at a different position.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To delete the selected group assignment.
                                                    </para>
                                                </listitem>
                                            </itemizedlist>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            For property assignments it is possible to:
                                            <itemizedlist>
                                                <listitem>
                                                    <para>Open the property assignment in
                                                        <glossterm>view mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>Open the assignment in
                                                        <glossterm>edit mode</glossterm>.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To copy the group assignment, so it can be pasted into another
                                                        group
                                                        or type.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To cut the group assignment, so it can be pasted into the same
                                                        group
                                                        or type at a different position.
                                                    </para>
                                                </listitem>
                                                <listitem>
                                                    <para>
                                                        To delete the selected group assignment.
                                                    </para>
                                                </listitem>
                                            </itemizedlist>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <section xml:id="structure_tree_cut_copy_paste">
                    <title>Cut, copy and paste operations</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>Cut: the cut operation is used to change the position of an assignment at its
                                    current
                                    hierarchy level.
                                    To change the position of an assignment, you have to right-click on the assignment
                                    you
                                    want to move and
                                    select "Cut" from the context menu. Then you are able to select another assignment
                                    on
                                    the same hierarical
                                    level, perform a right-click and select either "Paste above" or "Paste below". The
                                    assignment which you have
                                    cut will then be inserted either above or below the selected assignment. Note that
                                    you
                                    cannot change the
                                    position of system internal assignments at the root level of the structure tree.
                                </para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <listitem>
                                <para>Copy: the copy operation is used to create derived assignments and paste
                                    them into the structure tree at a chosen position.
                                    To facilitate insertion various paste operations are provided:
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                Paste into: This is the default pasting operation for copied
                                                assignments. A
                                                derived
                                                assignment will be created and pasted into the chosen group or into the
                                                chosen type
                                                at the last position.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                Paste into as: Works like "Paste into" but additionally prompts you
                                                specify
                                                a new alias
                                                so you can create a derived assignment and paste it into the same group
                                                with
                                                a different alias.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                Paste above and paste below: pastes an assignment directly above or
                                                below
                                                another assignment.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                Paste above and paste below as: Works like "Paste above" and "Paste
                                                below"
                                                but additionally
                                                prompts you specify a new alias
                                                so you can create a derived assignment and paste it into the same group
                                                with
                                                a different alias.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
            <section xml:id="structure_editor_view_mode_vs_edit_mode">
                <title>View mode vs. edit mode</title>
                <para>
                    By default, left clicking on a structure element in the structure tree opens
                    an editor in
                    <glossterm>view mode</glossterm>
                    on the right half of the screen.
                    In
                    <glossterm>view mode</glossterm>
                    it is
                    not possible to edit the structure element, you can merely view its current settings.
                </para>
                <para>
                    The edit mode on the other hand enables you to edit structure elements and to
                    save changes to the data base. You can switch to edit mode by choosing "Edit" from the context menu
                    or by clicking the "Edit" button in the editor on the right half of the screen.
                    Both view and edit mode provide three different sub editors:
                    <itemizedlist>
                        <listitem>
                            <para>
                                The type editor for creating and editing types and scripts assigned to that type.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The group editor for editing group assignments, editing and creating groups and their
                                options.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The property editor for editing property assignments, editing and creating properties
                                and
                                their options.
                            </para>
                        </listitem>
                    </itemizedlist>
                    Depending on which item is left-clicked in the structure tree, or which item is selected for
                    creation
                    in the context menu of the structure tree, one of the three sub editors is opened in either view
                    mode or
                    edit mode.
                </para>
            </section>
            <section xml:id="structure_editor_type_editor">
                <title>The type editor</title>
                <para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/structureEditor/type_editor_general.png" format="PNG"
                                       contentwidth="66%"/>
                        </imageobject>
                    </mediaobject>
                </para>
                <section xml:id="structure_editor_editing_types">
                    <title>Editing types</title>
                    <para>
                        When editing an existing type, you will notice that the type's
                        <guimenuitem>"Mode"</guimenuitem>
                        and
                        <guimenuitem>"Language mode"</guimenuitem>
                        select boxes are disabled and grayed out. This is due to the fact that the setting
                        of a type's mode and language mode is only allowed when a new type is created. For
                        types that are already stored in the database, content may also already exist which
                        would become invalid if those fields change.
                    </para>
                    <para>
                        Types with their mode set to
                        <guibutton>"Relation"</guibutton>
                        are called relation types.
                        For relation types
                        a table is provided to add and remove relations. For adding a relation the user needs
                        to set the source and
                        destination type, together with the maximum multiplicities and click the
                        <guibutton>"Add"</guibutton>
                        button in the
                        <guimenuitem>"Actions"</guimenuitem>
                        column. In order to set unlimited
                        multiplicities simply enable or disable the according checkbox in a table row. For specifying
                        the multiplicites manually, first disable the checkbox and use the input field below the
                        source or destination type which appears after disabling the checkbox.
                        Relations can be removed again by clicking on the
                        <guibutton>"Delete"</guibutton>
                        button
                        in the
                        <guimenuitem>"Actions"</guimenuitem>
                        column.

                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/type_editor_relations.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </mediaobject>
                    </para>
                    <para>
                        Also notice that by enabling the
                        <guibutton>"Track history"</guibutton>
                        checkbox, by disabling the
                        <guibutton>"Unlimited Versions"</guibutton>
                        checkbox and for type relations by disabling the
                        <guibutton>"maxRelSource"</guibutton>
                        and "maxRelDest" checkboxes,
                        input fields for setting the<guibutton>"History Age"</guibutton>,
                        <guibutton>"Max. Versions"</guibutton>, and the maximum number of relation sources and
                        destinations
                        become available that are hidden otherwise.
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/type_editor_hidden_fields.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </mediaobject>
                    </para>
                </section>
                If you want more information on types and their specific settings please refer to
                <xref linkend="core_structures_types_parameters"/>.
            </section>

            <section xml:id="structure_editor_group_editor">
                <title>The group editor</title>
                <para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/structureEditor/group_editor_assignment.png" format="PNG"
                                       contentwidth="66%"/>
                        </imageobject>
                    </mediaobject>
                </para>

                <section xml:id="structure_editor_editing_groups">
                    <title>Editing group assignments</title>
                    <para>
                        When editing an existing group assignment, you will notice three tabs:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Group Assignment"</guimenuitem>
                                    tab, which gives you
                                    access to the group assignment that is selected in the structure tree.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Group"</guimenuitem>
                                    tab, which gives you
                                    access to the actual group that is assigned by the selected group assignment.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Options"</guimenuitem>
                                    tab, which gives you
                                    access to the options of the group assignment and its group as well.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <caution>
                        <para>
                            When creating a new group, the
                            <guimenuitem>"Edit Group Assignment"</guimenuitem>
                            tab will
                            be hidden, as well as the options of the group assignment in the
                            <guimenuitem>"Edit Options"</guimenuitem>
                            tab. The according assignment will then be
                            automatically generated after the group has been created and automatically
                            inserted into the structure tree accordingly.
                        </para>
                        <para>
                            Notice that assignments may override specific settings of their groups.
                            For group assignments, if the checkbox
                            <guimenuitem>"Override Multiplicity"</guimenuitem>
                            in the
                            <guimenuitem>"Edit Group Assignment"</guimenuitem>
                            tab, or the checkbox
                            <guimenuitem>"Overridable Multiplicity"</guimenuitem>
                            is enabled, the multiplicity
                            defined in the group assignment overrides the multiplicity of its group.
                        </para>
                        <para>
                            Also notice that the group mode of a group assignment may not be changed if content
                            instances for the group assignment already exist.
                        </para>
                    </caution>
                </section>

                <section xml:id="structure_editor_group_options">
                    <title>Editing group assignment and group options</title>
                    <para>
                        Generally speaking an option is just a pair of a key and a value. The user
                        can access the options by left clicking the
                        <guimenuitem>"Edit Options"</guimenuitem>
                        tab.
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/group_options.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </mediaobject>
                        In the image above, the group options table and the group assignment options table
                        are displayed. The group has three options with the keys "MYOPTION", "MYOPTION2"
                        and "MYOPTION3". The
                        <guimenuitem>"Overridable"</guimenuitem>
                        checkbox indicates
                        which options may be overwritten by the group assignment (i.e. may have the
                        same key but a different value).
                    </para>
                    <para>In the example above, only the group option with
                        the key "MYOPTION2" and value "myvalue" is marked as overridable. This option
                        is successfully overwritten by the group assignment option with the same key
                        "MYOPTION2" and the different value "another value".
                    </para>
                    <para>
                        Options can be added by filling in the empty fields on the bottom of the
                        according table and clicking the
                        <guibutton>"Add"</guibutton>
                        button which is
                        located in the
                        <guimenuitem>"Actions"</guimenuitem>
                        column of the table. An
                        option can be deleted again by selecting the according row and pressing the
                        <guibutton>"Delete"</guibutton>
                        button which is
                        also located in the
                        <guimenuitem>"Actions"</guimenuitem>
                        column of the table.
                    </para>
                    <para>
                        In order to facilitate the editing of options, visual helpers are provided:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    Option displayed in green: This is a valid option, for example "MYOPTION"
                                    in the group options table.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Option displayed with grey background: The assignment tries to
                                    override a group option which is currently not set to "Overridable", for
                                    example "MYOPTION3" in the group assignment options table.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Option displayed in red: This is an invalid option. Either the option
                                    has no key, or the option has no value, the key already exists or
                                    the assignment tries to override an option with the same value. The key
                                    "MYOPTION4" exists twice in the group assignment options table, therefore
                                    making it invalid.
                                </para>
                            </listitem>
                        </itemizedlist>
                        In order to display the visual helpers, the "Validate" button
                        <inlinemediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/validate_button.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </inlinemediaobject>
                        on the bottom left has to be clicked.
                    </para>
                </section>

                <section xml:id="structure_editor_saving_deleting_groups">
                    <title>Saving and deleting group assignments and groups</title>
                    <para>
                        In order to save changes to existing group assignments, groups and options,
                        the group editor provides the
                        <guibutton>"Save"</guibutton>
                        button
                        <inlinemediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/save_button.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </inlinemediaobject>
                        located at the bottom left of the group editor in every tab. A shortcut to the button
                        can also be found on top of the content frame.
                        <warning>
                            When pressing the "Save"
                            button, all changes within the three tabs are saved, meaning all changes that
                            have been made to the assignment, to the group and to the options, altough only one
                            tab is visible. This behaviour is the same for type and property assignment editors
                            as well.
                        </warning>
                    </para>
                    <para>
                        In order to create a new group, the "Create Group..." option has to be selected from
                        the context menu of the of the structure tree. Instead of a
                        <guibutton>"Save"</guibutton>
                        button,
                        the group editor provides the
                        <guibutton>"Create"</guibutton>
                        button
                        <inlinemediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/create_button.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </inlinemediaobject>
                        at the bottom left of the group editor view, as well as a shortcut on top of the
                        content frame. After the group has been successfully created, an according group assignment
                        is automatically generated as well and automatically inserted into the structure tree.
                    </para>
                    <para>
                        For deleting an existing group assignment, the group editor provides the
                        <guibutton>"Delete"</guibutton>
                        button
                        <inlinemediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/delete_button_assignment.png" format="PNG"
                                           contentwidth="66%"/>
                            </imageobject>
                        </inlinemediaobject>
                        at the bottom right of the "Edit Group Assignment" tab. A shortcut to the button can also be
                        found on top of the content frame.
                        <caution>
                            <para>
                                Note that by deleting a group assignment, the group itsself
                                is not automatically deleted! Only if the group is not assigned to another group or type
                                anymore
                                , the group will be removed from the database.
                            </para>
                        </caution>
                    </para>
                </section>
                If you want more information on groups and their specific settings please refer to
                <xref linkend="core_structures_group_parameters"/>.
            </section>

            <section xml:id="structure_editor_property_editor">
                <title>The property editor</title>
                <para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/structureEditor/property_editor_general.png" format="PNG"
                                       contentwidth="66%"/>
                        </imageobject>
                    </mediaobject>
                </para>

                <section xml:id="structure_editor_editing_properties">
                    <title>Editing property assignments</title>
                    <para>
                        Similar to the group editor, the property editor provides three tabs:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Property Assignment"</guimenuitem>
                                    tab, which gives you
                                    access to the property assignment that is selected in the structure tree.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Property"</guimenuitem>
                                    tab, which gives you
                                    access to the actual property that is assigned by the selected property
                                    assignment.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The
                                    <guimenuitem>"Edit Options"</guimenuitem>
                                    tab, which gives you
                                    access to the options of the property assignment and its property as well.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        System internal property assignments
                        <inlinemediaobject>
                            <imageobject>
                                <imagedata fileref="images/structureEditor/fxAssignedPropertySystemInternal.png"
                                           format="PNG" contentwidth="66%"/>
                            </imageobject>
                        </inlinemediaobject>
                        , together with their properties may not be edited. This is why all input elements
                        are deactivated. It is only allowed to edit their options.
                    </para>
                    <caution>
                        <para>
                            When creating a new property, the
                            <guimenuitem>"Edit Property Assignment"</guimenuitem>
                            tab will
                            be hidden, as well as the options of the property assignment in the
                            <guimenuitem>"Edit Options"</guimenuitem>
                            tab. The according assignment will then be
                            automatically generated after the property has been created and automatically inserted into
                            the
                            structure tree accordingly.
                        </para>
                        <para>
                            Note that property assignments may override specific settings of their property.
                            If a specific setting may be overwritten is controlled by the "Override property options"
                            section in the
                            <guimenuitem>"Edit Property Assignment"</guimenuitem>
                            tab and by the "Property
                            override options" section in the
                            <guimenuitem>"Edit Property</guimenuitem>
                            tab respectively.
                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="images/structureEditor/override_property_options.png"
                                               format="PNG"
                                               contentwidth="66%"/>
                                </imageobject>
                            </mediaobject>
                        </para>
                    </caution>
                </section>
                <section xml:id="structure_editor_property_options">
                    <title>Editing property assignment and property options</title>
                    <para>
                        Editing property assignment and property options works exactly the same as
                        editing group assignment and group options. The only difference is that, when
                        creating a new property, a set of standard options is automatically added.
                        If you need more information please refer to
                        <xref linkend="structure_editor_group_options"/>.
                    </para>
                </section>

                <section xml:id="structure_editor_saving_deleting_properties">
                    <title>Saving and deleting property assignments and properties</title>
                    <para>
                        Also concerning saving and deletion operations, properties and property assignments
                        exactly comply to group and group assignments. The reader is therefore refered to
                        <xref linkend="structure_editor_saving_deleting_groups"/>.
                    </para>
                </section>
                If you want more information on properties and their specific settings please refer to
                <xref linkend="core_structures_property_parameters"/>.
            </section>

            <section xml:id="structure_editor_script_assignment_editor">
                <title>The script assignment Editor</title>
                <para>
                    Scripts can be assigned to a type or property assignment by using the script assignment editor,
                    wich is reachable by clicking on the "Scripting" tab. The number in brackets on
                    the "Scripting" tab refers to the number of scripts that have already been assigned.
                    Note that only users that are in the role of "Script Manager" may edit script assignments.
                </para>
                <para>
                    Via the editor it is possible to add, remove and edit existing script assignments.
                    Clicking on a specific script name provides a shortcut to the
                    script editor in the "Admin" section, where the script code can be inspected or changed.
                    A script assignment consists of a specific script and a specific script event, which designates
                    when a script will be run. Naturally, types and assignments provide different subsets of events
                    to choose from.
                </para>
                <para>
                    Furthermore it is possible to activate and deactivate script assignments. For deactivated
                    script assignments, script execution will be prevented. It is also possible to derive script
                    assignments to child types or property assignments. The inherited script assignments
                    of a parent type or property assignment can not be directly in the script assignment editor of
                    the child. Instead
                    a link is provided for derived script assignments, which opens the script assignment editor
                    of the parent type where changes can be made and are in turn propagated to all derived children.
                </para>
                <para>
                    In order for changes to take effect, the script assignment editor -just like the other editors-
                    provides the
                    <guibutton>"Save"</guibutton>
                    button
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/structureEditor/save_button.png" format="PNG"
                                       contentwidth="66%"/>
                        </imageobject>
                    </inlinemediaobject>
                    at the bottom left of the script assignment editor view. A shortcut to the button can also be
                    found on top of the content frame.
                </para>
                <para>
                    If you want more information on scripts and their specific settings please refer to
                    <xref linkend="core_scripting"/>.
                </para>
            </section>
        </section>
    </section>


    <section xml:id="adm_instance_editor">
        <title>The instance editor</title>
        <para>The instance editor allows you to create and edit
            <link linkend="core_contents">content instances</link>.
        </para>
        <para>It can be accessed via the</para>
        <para>
            <itemizedlist>
                <listitem>
                    <link linkend="adm_content_tree">Content tree</link>
                </listitem>
                <listitem>
                    <link linkend="structure_editor_gui">Structure tree</link>
                </listitem>
                <listitem>
                    <link linkend="adm_query_editor">Query editor / query results</link>
                </listitem>
            </itemizedlist>
        </para>
        <para>As you might expect, the content tree and the query results contain already created instances. From the
            structure tree it is possible to create new content
            instances which can be attached to the content tree.
        </para>
        <para>By default, the instantiated type's properties are displayed as input fields on the initialization of an
            instance. Non mandatory properties can be skipped and added again, when needed.
        </para>
        <section xml:id="adm_instance_editor_creating_editing">
            <title>Creating and editing contents</title>
            <para>These are the UI elements of the instance editor:</para>
            <para>
                <orderedlist>
                    <listitem>The
                        <link linkend="adm_ACL">ACL</link>
                        to choose for this instance
                    </listitem>
                    <listitem>The
                        <link linkend="adm_workflow">workflow</link>
                        step to choose for this instance
                    </listitem>
                    <listitem>The node of the content tree which the instance is attached to</listitem>
                    <listitem>The version and access information</listitem>
                    <listitem>Single
                        <link linkend="structure_editor_property_editor">properties</link>
                        as input fields
                    </listitem>
                    <listitem>Grouped properties</listitem>
                </orderedlist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_instance_editor/content_instance.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>After saving you will get the following screen. You can see that the fields which have not been filled
                in,
                disappeared. No matter, you can add them again by clicking on the symbol for the single fields (1) or
                by clicking on the symbol for the grouped fields (2).
            </para>
            <para>
                <imagedata fileref="images/adm_ui_instance_editor/content_instance_saved.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>It is possible to create a new version of the instance.</para>
            <para>To learn more about versioning in &Flexive; see the
                <link linkend="core_contents">Content Engine</link>
                section.
            </para>
        </section>
    </section>

    <section xml:id="adm_content_tree">
        <title>The content tree</title>
        <para>The content tree contains content instances of any type. It can be used i.e. in a Content Management
            System, where the page tree of a website can be administered inside the &Flexive; backend administration.
            Mind that when we speak of the content tree, in fact we speak of 2 separate trees. The live and the edit
            tree.
            This will be explained in detail in this section.
            You can find the content tree in the tab
            <filename>Content Tree</filename>.
        </para>
        <section xml:id="adm_content_tree_modes">
            <title>Modes of the content tree</title>
            <para>The content tree GUI allows you to administer the 2 separate trees:
                <para>
                    <orderedlist>
                        <listitem>The Live Tree</listitem>
                        <listitem>The Edit Tree</listitem>
                    </orderedlist>
                </para>
                <para>
                    The Live tree holds content instances which have been activated in the edit tree. It is not
                    possible to create content instances directly in the live tree. You can activate tree nodes,
                    representing content instances, or
                    subtrees via the
                    <link linkend="adm_content_tree_context_menu">content tree's
                        context menu</link>.
                </para>
                <para>Furthermore it is possible to change the appearence of the node's textual representation. You
                    can choose between the caption and the node path of a tree node.
                </para>
            </para>
            <para>The UI provides the following elements to handle these different views:
            </para>
            <para>
                <orderedlist>
                    <listitem>Button to switch between caption and node paths</listitem>
                    <listitem>Button to switch between edit and live tree</listitem>
                </orderedlist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_content_tree/tree_live_edit_switch.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>See the core components chapter
                <link linkend="core_tree_live_edit">edit and live modes</link>
                for additional information.
            </para>
        </section>
        <section xml:id="adm_content_tree_context_menu">
            <title>The content tree's context menu</title>
            <para>To activate the context menu rightclick on a tree node. Not all features shown on the following
                screenshot are always available. For example, attaching a content instance is only possible, if the
                instance has been
                loaded into the instance editor before.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_content_tree/content_tree_contextmenu.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>
                The context menu provides the following functionality:
                <variablelist>
                    <varlistentry>
                        <term>
                            <code>Attach content here</code>
                        </term>
                        <listitem>
                            <para>
                                Attach an, into the instance editor loaded, instance to the content tree.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Open</code>
                        </term>
                        <listitem>
                            <para>
                                Load an instance into the instance editor in view mode.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Edit</code>
                        </term>
                        <listitem>
                            <para>
                                Load an instance into the instance editor in edit mode.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Rename</code>
                        </term>
                        <listitem>
                            <para>
                                Rename the instance directly in the content tree's in-place editor.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Create folder</code>
                        </term>
                        <listitem>
                            <para>
                                Create a folder on the target node.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Create content ...</code>
                        </term>
                        <listitem>
                            <para>
                                Create a content instance on the target node.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Activate</code>
                        </term>
                        <listitem>
                            <para>
                                Activate the node for the live tree.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Activate subtree</code>
                        </term>
                        <listitem>
                            <para>
                                Activate the subtree for the live tree.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Paste</code>
                        </term>
                        <listitem>
                            <para>
                                Paste a formerly copied content into a tree node. The tree node becomes
                                the parent of the pasted content instance.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Cut</code>
                        </term>
                        <listitem>
                            <para>
                                Cut a content instance from its position.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Copy</code>
                        </term>
                        <listitem>
                            <para>
                                Copy a content instance.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Detach content</code>
                        </term>
                        <listitem>
                            <para>
                                Detach a content instance from the content tree.
                                If a node to detach has children they will be shifted onto the detached node's level.
                                See chapter
                                <link linkend="core_tree">Tree Engine</link>
                                for further details.
                                <para>
                                    <emphasis>Note:</emphasis>
                                    Content instances of type
                                    <filename>folder</filename>
                                    are deleted permanently if detached.
                                </para>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>Delete</code>
                        </term>
                        <listitem>
                            <para>
                                Delete a content instance permanently.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </section>
    </section>

    <section xml:id="adm_query_editor">
        <title>The query editor</title>
        <para>
            The query editor allows you to search for already created content instances. You can formulate
            complex queries on structures and their properties, it's like building SQL statements visually.
        </para>
        <para>The elements of the query result set can be attached to the
            <link linkend="adm_content_tree">content tree</link>
            or saved into a briefcase, which can be shared among users. A query can also be saved.
        </para>
        <section xml:id="adm_query_editor_creating_queries">
            <title>Creating queries with the visual query editor</title>
            <para>To access the query editor go to the
                <filename>Search</filename>
                tab of the &Flexive; backend administration. It is also accessible via the
                <filename>FxSQL / Search</filename>
                menu item in the
                <filename>Administration</filename>
                tab. Open the query editor and rightclick on nodes of the
                <link linkend="adm_content_tree">content tree</link>
                and
                <link linkend="structure_editor_gui">structure tree</link>
                to formulate your query. You can add as many nodes as you want.
                You can also search on
                <link linkend="structure_editor_property_editor">structure properties</link>.
            </para>
            <para>
                Select the chosen query elements with Shift or Ctrl and rightclick on them to use the context
                menu to create subqueries with con/disjunctions.
            </para>
            <para>The following screen shows a formulated query in the query editor. You can nest your subqueries
                infinitely.
            </para>
            <para>The following comparison operators are available:</para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>
                            <code>=</code>
                        </term>
                        <listitem>
                            <para>
                                Expression is equal
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>not equal</code>
                        </term>
                        <listitem>
                            <para>
                                Expression is not equal
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>is empty</code>
                        </term>
                        <listitem>
                            <para>
                                Expression is empty
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>is not empty</code>
                        </term>
                        <listitem>
                            <para>
                                Expression is not empty
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <code>like</code>
                        </term>
                        <listitem>
                            <para>
                                Partial match. Use the
                                <code>%</code>
                                character, meaning
                                <emphasis>any character(s)</emphasis>,
                                to build your expression.
                                Mind that the term
                                <emphasis>any character(s)</emphasis>
                                implies
                                <emphasis>no</emphasis>
                                character. Expression is case insensitive.
                            </para>
                            <para>
                                The following examples illustrate the usage of
                                <code>like</code>
                                in sql statements and the &Flexive; query editor. Assuming a user with first name
                                <code>John</code>
                                exists in the database, you could search for him (and all other matching names) using
                                the following patterns.
                                <variablelist>
                                    <varlistentry>
                                        <term>
                                            <code>%oh%</code>
                                        </term>
                                        <listitem>
                                            <para>Search for
                                                <code>oh</code>
                                                preceded and followed by any character(s), meaning all words containing
                                                <code>oh</code>.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>
                                            <code>jo%</code>
                                        </term>
                                        <listitem>
                                            <para>Search for
                                                <code>jo</code>
                                                followed by any character(s), meaning all words starting with
                                                <code>jo</code>.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist>
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_query_editor/build_query.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <section xml:id="adm_query_editor_result">
                <title>Query results</title>
                <para>If the query with your provided search criteria was successful, the result set will be
                    displayed.
                </para>
                <para>
                    <imagedata fileref="images/adm_ui_query_editor/query_result.png"
                               format="PNG" contentwidth="100%"/>
                </para>
                <para>Rightclick on an item of the result set to activate the context menu.</para>
                <para>
                    <imagedata fileref="images/adm_ui_query_editor/query_result_context_menu.png"
                               format="PNG" contentwidth="100%"/>
                </para>
                <para>
                    <variablelist>
                        <varlistentry>
                            <term>Show</term>
                            <listitem>
                                <para>View instance.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Show screenview</term>
                            <listitem>
                                <para>Show preview (images).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Edit</term>
                            <listitem>
                                <para>Edit instance.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Copy</term>
                            <listitem>
                                <para>Copy instance and</para>
                                <para>
                                    <itemizedlist>
                                        <listitem>paste it into a briefcase</listitem>
                                        <listitem>attach it to a content tree's node</listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Delete</term>
                            <listitem>
                                <para>Delete instance permanently.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
            </section>
            <section xml:id="adm_query_editor_queries_briefcases">
                <title>Saved queries and briefcases</title>
                <para>You can save your query or save the query result to a briefcase by checking the options in the
                    query editor before executing the query. A briefcase can be public or private, meaning shared or
                    not shared among other users. Saved queries and briefcases can be found in the
                    <filename>Search</filename>
                    tab of the &Flexive; backend administration.
                </para>
                <para>
                    <imagedata fileref="images/adm_ui_query_editor/search_tab.png"
                               format="PNG" contentwidth="100%"/>
                </para>
            </section>
        </section>
    </section>

    <section xml:id="adm_fxsql">
        <title>The FxSQL Search</title>
        <para>In addition to the
            <link linkend="adm_query_editor">visual query editor</link>
            the &Flexive; administration UI provides an input mask,
            shown on the following screen, to
            execute
            <link linkend="core_search_sqlintro">FxSQL</link>
            statements directly. It is also possible to create
            <link linkend="adm_query_editor_queries_briefcases">briefcases</link>
            from the result set. The input mask
            can be found in the
            <filename>FxSQL / Search</filename>
            menu item of the
            <filename>Administration</filename>
            tab.
        </para>
        <para>
            <link linkend="core_search_sqlintro">FxSQL</link>
            is a &Flexive; SQL (structured query language) dialect.
        </para>
        <para>In the following example on the screen the primary keys of all content instances are selected from
            the table
            <code>content</code>.
        </para>
        <para>
            <imagedata fileref="images/adm_ui_query_editor/fxsql_search.png"
                       format="PNG" contentwidth="100%"/>
        </para>
    </section>

    <section xml:id="adm_user">
        <title>User account administration</title>
        <para>
            The &Flexive; user account administration UI provides an administration interface to administer your
            user accounts, assign
            <link linkend="adm_user_group">user groups</link>
            and roles and make other settings like activation and language settings.
        </para>
        <section xml:id="adm_user_create_user">
            <title>Creating a user</title>
            <para>The following screen shows the user account editor when creating a new user.</para>
            <para>
                Roles are a key feature of the &Flexive;
                <link linkend="core_security">security concept</link>. There are two ways to assign roles to a user.
            </para>
            <para>
                <orderedlist>
                    <listitem>Inheritance through user group membership</listitem>
                    <listitem>Direct assignment</listitem>
                </orderedlist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_user/create_user.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>After creation, you will be redirected to the user account overview where you can edit and delete
                users.
            </para>
        </section>
        <section xml:id="adm_user_overview">
            <title>The user account overview</title>
            <para>The following screen shows the user group overview.</para>
            <para>
                You can see the two system defined accounts:
                <variablelist>
                    <varlistentry>
                        <term>Guest</term>
                        <listitem>
                            <para>Everyone who is not logged in is treated as guest.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>SUPERVISOR</term>
                        <listitem>
                            <para>This user is in all roles and may operate on all mandators.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                These two accounts cannot be removed.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_user/user_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>
    <section xml:id="adm_user_group">
        <title>User group administration</title>
        <para>The user group editor allows you to create and edit user groups. You can specify a group name, a color and
            assign roles to the group.
        </para>
        <para>
            <imagedata fileref="images/adm_ui_user_groups/usergroup_editor.png"
                       format="PNG" contentwidth="100%"/>
        </para>
        After saving you will be redirected to the user group overview.
        <section xml:id="adm_user_group_overview">
            <title>The user group overview</title>
            <para>The following screen shows the user account overview. You can see the default system user groups.
                These groups cannot be deleted.
                <variablelist>
                    <varlistentry>
                        <term>Everyone (Default)</term>
                        <listitem>
                            <para>Every
                                <link linkend="adm_mandator">mandator</link>
                                gets this group created automatically, in this screen it is the mandator
                                <filename>
                                    Default
                                </filename>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Everyone</term>
                        <listitem>
                            <para>System user group for all mandators
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Owner</term>
                        <listitem>
                            <para>System user group for all mandators
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_user_groups/usergroup_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>
    <section xml:id="adm_mandator">
        <title>Mandator administration</title>
        <para>In this chapter the administration UI for mandators will be explained. Please see section
            <link linkend="core_security_mandators">Mandators</link>
            in chapter
            <link linkend="core_security">Security</link>
            for an explanation of the concept of mandators used in &Flexive;.
        </para>
        <section xml:id="adm_mandator_create">
            <title>Creating a mandator</title>
            <para>The following screen shows the mandator editor. You can specify a name for the mandator and set the
                activation flag.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_mandator/mandator_editor.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            After creating a mandator, you will be redirected to the overview for mandators.
        </section>
        <section xml:id="adm_mandator_overview">
            <title>The mandator overview</title>
            <para>In the mandator overview you can select a mandator for editing or delete him.</para>
            <para>In the following screen you can see the mandator
                <code>Default</code>, representing the
                fictitious parent company, and mandators for each subsidiary .
            </para>
            <para>
                <imagedata fileref="images/adm_ui_mandator/mandator_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>
    <section xml:id="adm_ACL">
        <title>ACL administration</title>
        <para>The ACL administration UI provides an ACL editor to edit and create ACL's and to set permissions for
            <link linkend="adm_user_group">user groups
            </link>
            in the permission matrix. ACL's are a key feature of the &Flexive;
            <link linkend="core_security">security concept</link>.
        </para>
        <section xml:id="adm_ACL_create">
            <title>Creating an ACL</title>
            <para>The following screen shows the ACL editor in create mode.</para>
            <para>
                You can specify:
                <orderedlist>
                    <listitem>
                        <para>The
                            <link linkend="adm_mandator">mandator</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>The ACL's name</para>
                    </listitem>
                    <listitem>
                        <para>The ACL's label</para>
                    </listitem>
                    <listitem>
                        <para>A color</para>
                    </listitem>
                    <listitem>
                        <para>A category</para>
                        <para>Please see chapter
                            <link linkend="core_security_acl">ACL's - Access Control Lists</link>
                            for information about ACL categories in &Flexive;.
                        </para>
                        <para>The following categories are available:</para>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <link linkend="core_contents">Instance</link>
                                </listitem>
                                <listitem>
                                    <link linkend="core_structure">Structure</link>
                                </listitem>
                                <listitem>
                                    <link linkend="core_workflow">Workflow</link>
                                </listitem>
                                <listitem>
                                    <link linkend="adm_query_editor_queries_briefcases">Briefcase</link>
                                </listitem>
                                <listitem>
                                    <link linkend="adm_selectlists">SelectList</link>
                                </listitem>
                                <listitem>
                                    <link linkend="adm_selectlists">SelectList Item</link>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                    <listitem>
                        <para>A description</para>
                    </listitem>
                </orderedlist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_acl/acl_editor.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            After saving you will be able to fill in the permission matrix.
        </section>
        <section xml:id="adm_acl_permission_matrix">
            <title>The permission matrix</title>
            <para>The permission matrix (1) is available in the ACL editor for already created ACL's. Add rows to add
                groups
                and fill in the matrix to grant permissions.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_acl/acl_editor_saved.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>
                In this example
                <emphasis>everyone</emphasis>
                (a user group automatically containing every known account)
                may read the ACL. Accounts that are a member of the user group
                <emphasis>Account Managers</emphasis>
                may read and edit the ACL (please note that
                <emphasis>Account Managers</emphasis>
                would already be allowed to read due to their membership to user group
                <emphasis>Everyone</emphasis>
                but we added read permission here in case someone decides to remove group
                <emphasis>Everyone</emphasis>
                from this ACL at a later date and we still want to keep read permission).
                Members of the user group
                <emphasis>Editors</emphasis>
                may additionally create, delete and export.
            </para>
        </section>
        <section xml:id="adm_acl_overview">
            <title>The ACL overview</title>
            <para>On the following screen you can see the default ACL's for each
                <link linkend="adm_ACL_create">category</link>
                and a user defined ACL (Public Content Instance ACL).
            </para>
            <para>You can switch between different mandators with the select box on top of the list.</para>
            <para>
                <imagedata fileref="images/adm_ui_acl/acl_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>

    <section xml:id="adm_workflow">
        <title>Workflow administration</title>
        <para>The Workflow administration UI allows you to define
            <link linkend="adm_workfow_step_definition">step definitions</link>
            and workflows. Step definitions
            are used as steps in one or more workflows. You can define
            <link linkend="core_workflow_overview">routes</link>
            between these steps.
            See the core component chapter
            <link linkend="core_workflow">Worflow Engine</link>
            for additional information about workflows in &Flexive;.
        </para>
        <section xml:id="adm_workfow_step_definition">
            <title>Step definitions</title>
            <para>The following screen shows the step definition editor. You can define a
                <link linkend="core_workflow_overview">unique target</link>
                for a step definition.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/create_step_def.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>The following screen shows the step definition overview.</para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/step_def_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
        <section xml:id="adm_workflow_create">
            <title>Creating a workflow</title>
            <para>Create a workflow and provide a name and an optional description.</para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/create_workflow.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>After the creation of the workflow, the extended workflow editor will be loaded.
            </para>
            <para>As mentioned above, the basic elements of a workflow, shown on the following screen, are:</para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>Steps (1)</term>
                        <listitem>
                            <para>You have to define a
                                <link linkend="adm_ACL_create">workflow ACL</link>
                                for each step. Steps can have
                                <link linkend="core_workflow_overview">unique targets</link>
                                (2).
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Routes (3)</term>
                        <listitem>
                            <para>The
                                <link linkend="core_workflow_overview">routes</link>
                                are the transitions between the steps.
                                <link linkend="core_contents">Content instances</link>
                                can be moved on these routes.
                                Each route must have a
                                <link linkend="adm_user_group">user group</link>
                                assigned.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/edit_workflow.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>The following diagram illustrates the routes defined in this workflow.</para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/workflow_routes.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
        <section xml:id="adm_workflow_overview">
            <title>The Workflow overview</title>
            <para>The following screen shows the workflow overview where you can edit or delete existing workflows.
                Mind that you cannot delete workflows which are already in use.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_workflow/workflow_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>
    <section xml:id="adm_scripts">
        <title>Script administration</title>
        The &Flexive; script administration allows you to create scripts in the script editor and to execute
        scripts directly in the
        <link linkend="adm_scripts_console">script console</link>. The scripting language of
        choice is Groovy, but if JavaSE 6 or higher is
        used any language supported by the Java Scripting API can be used. Please see the section
        <link linkend="core_scripting">Scripting Engine</link>
        for more information about scripting in &Flexive;.
        <section xml:id="adm_scripts_create">
            <title>Creating a script</title>
            <para>The following screen shows the creation of a contact data verification script. You can see the
                select box for the default script event (1) which can be bound to a script. In this case it is
                <code>BeforeContentSave</code>.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_scripts/create_script.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>If the default script event is set to
                <code>Manual</code>, the script can be executed via the
                administration UI in the
                <link linkend="adm_scripts_overview">script overview</link>.
            </para>
            <para>
                <table class="flexive">
                    <thead>
                        <tr>
                            <th colspan="3">List of available events</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <itemizedlist>
                                    <listitem>
                                        <code>Manual</code>
                                    </listitem>
                                </itemizedlist>
                                <itemizedlist>
                                    <listitem>
                                        <code>BeforeContentSave</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterContentSave</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeContentCreate</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterContentCreate</code>
                                    </listitem>
                                </itemizedlist>
                                <itemizedlist>
                                    <listitem>
                                        <code>BeforeContentRemove</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterContentRemove</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterContentLoad</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterContentInitialize</code>
                                    </listitem>
                                    <listitem>
                                        <code>PrepareContentCreate</code>
                                    </listitem>
                                    <listitem>
                                        <code>PrepareContentSave</code>
                                    </listitem>
                                </itemizedlist>
                            </td>
                            <td>
                                <itemizedlist>
                                    <listitem>
                                        <code>BeforeDataChangeUpdate</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterDataChangeUpdate</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeDataChangeDelete</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterDataChangeDelete</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeDataChangeAdd</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterDataChangeAdd</code>
                                    </listitem>
                                </itemizedlist>
                                <itemizedlist>
                                    <listitem>
                                        <code>BeforeAssignmentDataCreate</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterAssignmentDataCreate</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeAssignmentDataSave</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterAssignmentDataSave</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeAssignmentDataDelete</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterAssignmentDataDelete</code>
                                    </listitem>
                                </itemizedlist>
                            </td>
                            <td>
                                <itemizedlist>
                                    <listitem>
                                        <code>BinaryPreviewProcess</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterAccountCreate</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterTreeNodeAdded</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterTreeNodeRemoved</code>
                                    </listitem>
                                    <listitem>
                                        <code>BeforeTreeNodeRemoved</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterTreeNodeActivated</code>
                                    </listitem>
                                </itemizedlist>
                                <itemizedlist>
                                    <listitem>
                                        <code>BeforeTreeNodeActivated</code>
                                    </listitem>
                                    <listitem>
                                        <code>AfterTreeNodeFolderReplacement</code>
                                    </listitem>
                                </itemizedlist>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
        </section>
        <section xml:id="adm_scripts_overview">
            <title>The script overview</title>
            <para>The following screen shows the script overview. You can see the script
                <filename>ClearLiveTree.gy</filename>
                (1), which can be executed manually via the administration UI,
                and other scripts, bound to different
                <link linkend="adm_scripts_create">events</link>.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_scripts/script_overview.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
        <section xml:id="adm_scripts_console">
            <title>The Script Console</title>
            <para>The following screen shows the &Flexive; Script console. It allows you to execute scripts directly
                at the EJB layer.
            </para>
            <para>You can choose between the following languages and file extensions (1):</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <code>gy: Groovy v1.5.1 (Bundled GroovyShell v1.5.1)</code>
                    </listitem>
                    <listitem>
                        <code>groovy: Groovy v1.5.1 (Bundled GroovyShell v1.5.1)</code>
                    </listitem>
                    <listitem>
                        <code>js: ECMAScript v1.6 (Mozilla Rhino v1.6 release 2)</code>
                    </listitem>
                </itemizedlist>
            </para>
            <para>If you want to execute the script on the web layer, check the option
                <code>Execute at Web layer</code>
                (2). Mind that this feature is only available for bundled Groovy!
            </para>
            <para>The Groovy code in this example creates a new tree node in the
                <link linkend="adm_content_tree_modes">Edit tree</link>
                of the
                <link linkend="adm_content_tree">Content Tree</link>. The
                node's name is
                <code>NodeName</code>
                and its label
                <code>NodeLabel</code>.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_scripts/script_console.png"
                           format="PNG" contentwidth="100%"/>
            </para>
            <para>You might want to copy paste the example and try it out:</para>
            <para>
                <xi:include href="listings/adm_scripts_console_example.xml"></xi:include>
            </para>
        </section>
    </section>
    <section xml:id="adm_system">
        <title>System information and language settings</title>
        <para>The
            <filename>System</filename>
            menu item of the
            <filename>Administration</filename>
            tab contains the
            <link linkend="adm_system_sysinfo">system information</link>
            display
            and the
            <link linkend="adm_system_language">language settings</link>.
        </para>
        <section xml:id="adm_system_sysinfo">
            <title>The System Information</title>
            <para>The system information gives you a brief overview of the system &Flexive; is running on.</para>
            <para>
                <imagedata fileref="images/adm_ui_system/sysinfo.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
        <section xml:id="adm_system_language">
            <title>Language settings</title>
            <para>In the language settings editor you can manage your system languages. Add a language from the list of
                disabled languages, delete a language or change the list's order. The language at the first position on
                the list becomes the default language. The following screen shows the language settings editor.
            </para>
            <para>Check the
                <code>Ignore language usage (1)</code>
                option to be able to delete languages which are already in use by
                <link linkend="core_contents">content instances</link>, meaning a
                <link linkend="structure_editor_property_editor">property</link>
                has been filled in by a user in this language.
            </para>
            <para>
                <imagedata fileref="images/adm_ui_system/language_settings.png"
                           format="PNG" contentwidth="100%"/>
            </para>
        </section>
    </section>
    <section xml:id="adm_selectlists">
        <title>Select list administration</title>
        <section>
        </section>
    </section>

</chapter>