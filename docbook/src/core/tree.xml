<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section [
        <!ENTITY % global_entities SYSTEM "../global.ent">
        %global_entities;
        ]>
<section xml:id="core_tree" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Tree Engine</title>
    <para>
        &Flexive; comes with a tree component, accessible via the
        <interfacename>FxTree</interfacename>
        interface with means to create and manage tree based structures and attach FxContent instances to tree
        nodes. There are actually 2 logically (and physically in terms of used database tables) distinct trees: a
        <emphasis>live</emphasis>
        (published) and an
        <emphasis>edit</emphasis>
        (preview) tree. There always exists a virtual root node with node Id
        <constant>1</constant>
        defined in
        <constant>FxTreeNode.ROOT_NODE</constant>
        . If there is no content manually attached, &flexive; will create an instance of type
        <constant>Folder</constant>
        and attach it. The same thing applies if a content instance that is attached to a node is removed: it will be
        replaced by an autogenerated
        <constant>Folder</constant>
        instance. An exception is if a content is removed that is linked to a leaf node. In this case the tree node will be removed as well.
    </para>

    <section xml:id="core_tree_security">
        <title>Security</title>
        <para>
            The tree does not implement its own security but makes use of the permissions of the attached content
            instances. This means in practice that only those nodes can be seen to which the user has at least read
            access to. As a consequence any child nodes attached to a node that a user has no read permission for will
            not be accessible
            <footnote>
                <para>That applies to user interfaces if the tree was loaded from a parent of the
                    inaccessible node. But since any node can act as the root node (which has to be passed when loading
                    the
                    tree) it is possible to see such nodes, if the path from the root node to the desired node is
                    accessible
                </para>
            </footnote>
            . The same security constraints apply to queries.
        </para>
    </section>

    <section xml:id="core_tree_scripting">
        <title>Scripting</title>
        <para>
            It is planned for the final release of version 3.0 to support scripting for the tree (i.e. events when a
            node is activated, removed, etc.).
            More info to come hopefully soon...
        </para>
    </section>

    <section xml:id="core_tree_live_edit">
        <title>Edit and Live modes</title>
        <para>
            The tree component support two different modes:
            <emphasis>Live</emphasis>
            and<emphasis>Edit</emphasis>.
            In typical web applications a single mode (the edit mode) might be sufficient, but when it comes to
            applications that are publishing-centric - or if there should be a way to preview how the tree will look
            before it goes
            <emphasis>live</emphasis>
            - using two modes simplifies development a lot.
        </para>
        <para>
            <emphasis>Activation</emphasis>
            is the process of copying a node (optionally with all subnodes) from the edit to the live tree.
            The dirty flag helps to distinguish between the live and the edit tree. Anything changed in the edit tree
            that is not activated on the live tree is flagged as dirty.
            As a consequence no node on the live tree can ever be flagged as dirty! If a node with the same id that has
            been removed in the live tree exists in the edit tree, the node and all its children will be flagged as
            dirty in the edit tree. All nodes in the edit tree that do not exist in the live tree are flagged dirty
            as well. The dirty flags basically helps to visualize in user interface components which nodes in the edit
            tree differ from nodes in the live tree.
        </para>
    </section>

    <section xml:id="core_tree_examples">
        <title>Examples</title>
        <para>
            The tree API tries to be as intuitive and simple as possible. Please see the API documentation for further
            reference as we'll just cover some basics in this chapter.
        </para>
        <para>
            <example xml:id="core_tree_ex_newNode">
                <title>Creating a new tree node attached to the root node</title>
                <programlisting language="java"><![CDATA[//Lookup the tree interface
FxTree tree = EJBLookup.getTreeEngine();
//create new node
FxTreeNodeEdit node = FxTreeNodeEdit.createNew("NodeName");
FxString label = new FxString(false, "NodeLabel");
node.setLabel(label);
//create the node
long id1 = tree.save(node1);
//load it
FxTreeNode node_loaded = tree.getNode(id1);
//delete it
tree.delete(node_loaded, false)]]>
                </programlisting>
            </example>
        </para>
        <para>
            <example xml:id="core_tree_ex_clear">
                <title>Clear both Live and Edit Tree in the groovy console</title>
                <programlisting language="java"><![CDATA[com.flexive.shared.EJBLookup.treeEngine.clear(com.flexive.shared.tree.FxTreeMode.Edit)
com.flexive.shared.EJBLookup.treeEngine.clear(com.flexive.shared.tree.FxTreeMode.Live)]]>
                </programlisting>
            </example>
        </para>
    </section>
</section>