<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter [
        <!ENTITY % global_entities SYSTEM "global.ent">
        %global_entities;
        <!ENTITY pkParameter "May be supplied as an FxPK object, a long ID, a String containing a primary key (e.g. &quot;5&quot;, &quot;5.1&quot;, &quot;5.MAX&quot;), a FxReference, or a FxSelectListItem whose ID will be interpreted as a content ID.">
        ]>
<chapter xml:id="jsfsupport" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>JSF Support</title>

    <xi:include href="includes/author_dlichtenberger.xml"/>
    <xi:include href="includes/author_gglos.xml"/>

    <para>
        &Flexive; offers a set of JSF components for working with &flexive; contents and data structures.
        This includes components to render and edit FxContent instances,
        submit search queries and show their results, and create custom content queries.
        To make your own reusable components, &flexive; provides a simple-to-use plugin API
        for wiring your own reusable JSF and EJB components for other &flexive; applications.
    </para>

    <para>
        &Flexive; JSF support consists of two major modules:
        <itemizedlist>
            <listitem>
                <para>
                    The
                    <link linkend="jsf_component_library">JSF component library</link>
                    contains a set
                    of JSF components for working with &flexive; structures in any JSF application
                </para>
            </listitem>
            <listitem>
                <para>
                    The
                    <link linkend="jsf_plugin_api">JSF plugin API</link>
                    allows applications or
                    plugins to extend the &backendGui; and make themselves extensible.
                </para>
            </listitem>
        </itemizedlist>
        A comprehensive guide on extending &flexive; functionality is
        <xref linkend="reusable_components"/>.
    </para>

    <section xml:id="jsf_component_library">
        <title>The &flexive; component library
        </title>

        <section xml:id="jcl_using">
            <title>
                Using the component library
            </title>
            <para>
                To use the &flexive; component library, you have to
                <orderedlist>
                    <listitem>
                        <para>
                            Add flexive-plugin-jsf-core.jar to your application's classpath
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Add the namespace declaration
                            <code>xmlns:fx="http://www.flexive.com/jsf/core"</code>
                            to the top of your XHTML documents.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            On every page using &flexive; components, you have to add a call to
                            <link linkend="jcl_fx_includes">&lt;fx:includes/></link>
                            somewhere in the HTML
                            head section. This tag includes javascript files and CSS stylesheets
                            needed by the components via &weblets;.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            If you want to use components based on &yui;, you have to include a call to
                            <link linkend="jcl_fx_yuisetup">&lt;fx:yuiSetup/&gt;</link>
                            near the end of the HTML body section. This initializes all YUI components
                            on the current page and loads the required Javascript libraries.
                            You also have to specify the YUI skin class on your page, the most convenient way
                            is through the body tag, e.g.:
                            <code>&lt;body class="yui-skin-sam"&gt;</code>.
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>

        <section xml:id="jcl_contents">
            <title>
                Content manipulation
            </title>
            <para>
                The &flexive; components for displaying and editing contents are most crucial
                for any application that works with &flexive; contents.
            </para>

            <section xml:id="jcl_fx_content">
                <title>
                    <code language="xhtml">&lt;fx:content></code>
                </title>
                <para>
                    The
                    <code language="xhtml">&lt;fx:content></code>
                    component offers direct access to FxContent values through the property &xpath;.
                    It also supports groups and multiplicities, i.e. iteration over properties and groups that
                    may exist more than once in an instance.
                    When no content ID is specified, a FxType name or ID is passed to create a fresh instance
                    of the given property type. Instances can then be saved through the
                    <link linkend="jcl_fx_content_view_bean">&contentViewBean;</link>,
                    or any other JSF managed bean that has a FxContent property.
                </para>
                <section xml:id="jcl_fx_content_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:content var="varname" (pk="pkexpr" | type="typeId" | typeName="typeName") [preserveContent="true|false"]>
...
</fx:content>
]]></programlisting>
                </section>
                <section xml:id="jcl_fx_content_parameters">
                    <title>Parameters</title>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>var</term>
                                <listitem>
                                    <para>
                                        The name of the variable that provides the content. The actual FxContent
                                        instance
                                        itself
                                        is provided in "#{var}_content", i.e. if var="project",
                                        then the FxContent is supplied in "project_content".
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>pk</term>
                                <listitem>
                                    <para>
                                        A primary key. &pkParameter;
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>type</term>
                                <listitem>
                                    <para>
                                        The new content type ID (if no PK was specified)
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>typeName</term>
                                <listitem>
                                    <para>
                                        The new content type name (if no PK was specified)
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>content</term>
                                <listitem>
                                    <para>
                                        The content instance to be displayed (if no PK was specified).
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>preserveContent</term>
                                <listitem>
                                    <para>
                                        If set to true, the content instance will be stored in the JSF viewstate. This
                                        is
                                        memory-expensive, but is necessary for editor pages that modify the content
                                        structure, e.g. pages that allow to add or remove groups or properties. By
                                        default,
                                        this option is set to false.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>

                <section xml:id="jcl_fx_content_jsfel">
                    <title>Accessing property values with JSF-EL</title>
                    <para>
                        A main service of the
                        <code>&lt;fx:content></code>
                        component is to
                        provide direct access to the property values stored in FxContent instances
                        through JSF-EL expressions. Inside the body of
                        <code>&lt;fx:content var="content"></code>,
                        the following expressions may be used:
                    </para>

                    <variablelist>
                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.name}</code>
                            </term>
                            <term>
                                <code language="jsfel">#{content['name']}</code>
                            </term>
                            <term>
                                <code language="jsfel">#{content['/name']</code>
                            </term>
                            <listitem>
                                <para>
                                    Return the FxValue of the property identified by the &xpath; "/name[1]".
                                    For properties like "/name" that are attached directly to the content root node, the
                                    notations
                                    <code language="jsfel">#{content.name}</code>,
                                    <code language="jsfel">#{content['name']}</code>, and
                                    <code language="jsfel">#{content['/name']}</code>
                                    are
                                    equivalent. The following examples won't always specify all possible notations.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.name$label}</code>
                            </term>
                            <listitem>
                                <para>
                                    Return the assignment label of type FxString for the given &xpath;.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.name$hint}</code>
                            </term>
                            <listitem>
                                <para>
                                    Return the assignment hint of type FxString for the given &xpath;.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content['group/text']}</code>
                            </term>
                            <listitem>
                                <para>
                                    Return the given group property. Note that
                                    <code language="jsfel">#{content.group.text}</code>
                                    currently does not work.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.element$list}</code>
                            </term>
                            <listitem>
                                <para>
                                    Provide a list for all entries of the group (or property) "element". If "element" is
                                    a
                                    property, the iterator returns FxValue objects, otherwise it returns a
                                    list of virtual fx:content instances with a prefix for the current group element
                                    (
                                    <xref linkend="jcl_fx_content_ex_display"/>
                                    illustrates how this feature
                                    can be used for looping over groups with
                                    <code lang="xhtml">&lt;ui:repeat></code>).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.element$listAll}</code>
                            </term>
                            <listitem>
                                <para>
                                    Like
                                    <code language="jsfel">#{content.element$list}</code>, but includes empty elements.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.reference$.property}</code>
                            </term>
                            <listitem>
                                <para>
                                    Resolve the given reference property and provides a content for its properties. An
                                    expression can also use several nested resolving operations, e.g.
                                    <code language="jsfel">#{content.reference$.owner$.email}</code>.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content['group/text$new']}</code>
                            </term>
                            <listitem>
                                <para>
                                    Create a new instance of "group" and return its text property. Note: the current
                                    implementation is a hack and works only for simple cases.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content['group/text$mayCreateMore']}</code>
                            </term>
                            <listitem>
                                <para>
                                    Returns true if evaluating the $new suffix for the given XPath will succeed.
                                    Useful when using the $new suffix for assignments with a limited
                                    multiplicity, since it could cause an exception otherwise.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <code language="jsfel">#{content.name$valid}</code>
                            </term>
                            <listitem>
                                <para>
                                    Return true if the given XPath (name) is valid for the content instance.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_content_ex">
                    <title>Examples</title>

                    <warning>
                        <title>Render-time Components</title>
                        <para>
                            Be aware that
                            <code language="xhtml">&lt;fx:content></code>
                            is a render-time component. That is, the content instance is
                            provided during view rendering (i.e. between encodeBegin and encodeEnd), but not during view
                            creation. This means, unfortunately, that it is not possible to use Facelets' compile-time
                            tags like
                            <code language="xhtml">&lt;c:forEach></code>
                            or
                            <code language="xhtml">&lt;c:if></code>
                            with EL expressions that contain content instances provided by
                            <code language="xhtml">&lt;fx:content></code>.

                            Instead, render-time components must be used to achieve similar results - for example,
                            <code language="xhtml">&lt;ui:repeat></code>
                            to iterate over lists or
                            <code language="xhtml">&lt;ui:fragment rendered="..."></code>
                            for conditional page rendering.
                        </para>
                    </warning>

                    <example xml:id="jcl_fx_content_ex_display">
                        <title>Render FxContent property values</title>
                        <para>
                            Here the primary key is provided by the managed bean "myBean". The content is stored in the
                            request variable "component".
                        </para>
                        <xi:include href="listings/jsfsupport_content_display.xml"/>
                    </example>

                    <example xml:id="jcl_fx_content_ex_edit">
                        <title>Edit an existing FxContent instance</title>
                        <para>
                            We use the
                            <link linkend="jcl_fx_value">
                                <code language="xhtml">&lt;fx:value></code>
                            </link>
                            component to create an input field for the "name" property of a given instance.
                        </para>
                        <xi:include href="listings/jsfsupport_content_edit.xml"/>
                    </example>

                    <example xml:id="jcl_fx_content_ex_create">
                        <title>Create a new FxContent instance</title>
                        <para>
                            This page provides a basic input form for creating new instances
                            of the "Component" type. Note
                            that a new content instance contains empty values for all basic properties - that's why this
                            example works. For creating a more complex instance that actually creates new properties,
                            see the next example. Note that this code is basically the same as
                            <xref linkend="jcl_fx_content_ex_edit"/>, except
                            that a typename is passed instead of a PK - there's no difference in code
                            between editing an existing or a new instance (provided that the latter has been
                            properly initialized with empty values).
                        </para>
                        <xi:include href="listings/jsfsupport_content_create.xml"/>
                    </example>

                    <example xml:id="jcl_fx_content_ex_multiplicities">
                        <title>Add values to properties with multiplicities</title>
                        <para>
                            Assume type "issue" has a group "comment" with multiplicity 1..n. In order to edit existing
                            instances, you could iterate over the existing using the $list suffix. For creating a new
                            "comment" group, you specify the XPath without multiplicities and set the "new" attribute.
                        </para>
                        <xi:include href="listings/jsfsupport_content_multiplicities.xml"/>
                    </example>

                    <example xml:id="jcl_fx_content_ex_addgroups">
                        <title>Add a new empty group to a content instance</title>
                        <para>
                            Assume you're editing a contact data type with a group named ContactPerson.
                            You want to render editors for all existing contact persons, as well as
                            an empty one for adding new contacts. This is accomplished with the
                            <link linkend="jcl_fx_content_view_bean">&contentViewBean;</link>
                            which has a method for creating new empty elements or groups called "add".
                        </para>
                        <xi:include href="listings/jsfsupport_content_addgroups.xml"/>
                    </example>

                    <example xml:id="jcl_fx_content_ex_inputmappers">
                        <title>Use InputMappers for application-specific properties</title>
                        <para>
                            Some content properties cannot be populated in a generic way. InputMappers wrap the FxValue
                            provided by the content instance in another FxValue, for example a FxSelectOne select item
                            value.
                        </para>
                        <xi:include href="listings/jsfsupport_content_inputmappers1.xml"/>
                        <para>
                            In this very basic implementation the input mapper is constructed from a collection of PKs
                            returned by our business method "someOtherBean.getAccountPks()". There already exists an
                            input mapper for FxPK objects in the flexive framework that takes a select list and
                            interprets the item IDs as PK IDs. A "real" input mapper would probably use less generic
                            labels and use the account caption instead.
                        </para>
                        <xi:include href="listings/jsfsupport_content_inputmappers2.xml"/>
                    </example>
                </section>
            </section>


            <section xml:id="jcl_fx_children">
                <title>
                    <code language="xhtml">&lt;fx:children></code>
                </title>
                <para>
                    The
                    <code language="xhtml">&lt;fx:children></code>
                    component provides an iterator over properties and groups of a content instance.
                    The current value is stored in a variable with the same name as the property.
                    The same can be achieved by using the
                    <code>$list</code>
                    JSF-EL suffix as described in
                    <xref linkend="jcl_fx_content_jsfel"/>.
                </para>
                <section xml:id="jcl_fx_children_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:content ...>
    <fx:children value="content" property="xpath" [var="varname"]>
        ...
    </fx:children>
</fx:conent>
]]></programlisting>
                </section>
                <section xml:id="jcl_fx_children_parameters">
                    <title>Parameters</title>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>property</term>
                                <listitem>
                                    <para>
                                        The name or XPath of the property or group to be iterated upon.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>value</term>
                                <listitem>
                                    <para>The content or group value holding the required property.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>var</term>
                                <listitem>
                                    <para>
                                        Name of the variable where the current value will be exposed in the tag body.
                                        If not set, the property name will be used (i.e. the last part of the given
                                        property XPath).
                                    </para>
                                    <para>
                                        Note: due to its implementation, if a
                                        <code>fx:children</code>
                                        component is nested in another
                                        <code>fx:children</code>
                                        that has a var attribute, the inner
                                        <code>fx:children</code>
                                        instance also must specify the var attribute.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>includeEmpty</term>
                                <listitem>
                                    <para>
                                        If empty elements should be included (default: false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>

                <section xml:id="jcl_fx_children_ex">
                    <title>Examples</title>

                    <para>
                        The following examples are based on the
                        <productname>products</productname>
                        demo application described in &productsArticle;.
                    </para>

                    <example xml:id="jcl_fx_children_ex_simple">
                        <title>Iterating over property values</title>
                        <para>
                            In this example, we iterate over the
                            <property>image</property>
                            property of a product. The property is of type
                            <code>Binary</code>
                            and holds one or more images for the given product.
                        </para>
                        <programlisting language="xhtml"><![CDATA[<fx:content var="product" pk="#{productBean.pk}">
    <fx:children value="#{product}" property="image">
        <fx:thumbnail binary="#{image}"/>
    </fx:children>
</fx:content>]]></programlisting>
                    </example>

                    <example xml:id="jcl_fx_children_ex_nested">
                        <title>Iterating over group values and nested iterators</title>

                        <para>
                            In this example, we create an outer loop for the group property
                            <code>variant</code>
                            and use a nested
                            <code>&lt;fx:children></code>
                            component to render the images for each group.
                        </para>

                        <para>
                            Data structure (partial):
                            <itemizedlist>
                                <listitem>Product
                                    <itemizedlist>
                                        <listitem>
                                            /variant [0..n]
                                            <itemizedlist>
                                                <listitem>/articleNumber</listitem>
                                                <listitem>/color</listitem>
                                                <listitem>/image [0..n]</listitem>
                                            </itemizedlist>
                                        </listitem>
                                        <listitem>
                                            ...
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </para>


                        <programlisting language="xhtml"><![CDATA[<fx:content var="product" pk="#{productBean.pk}">

    <!-- Iterate over the "variant" group of product -->

    <fx:children value="#{product}" property="variant">

        <!-- Iterate over the "image" property of the current variant -->
        
        <fx:children value="#{variant}" property="image">
            <fx:thumbnail binary="#{image}"/>
        </fx:children>
        
    </fx:children>
    
</fx:content>]]></programlisting>
                    </example>
                </section>
            </section>

            <section xml:id="jcl_fx_contentEditor">
                <title>
                    <code language="xhtml">&lt;fx:contentEditor></code>
                </title>
                <para>
                    The
                    <code language="xhtml">&lt;fx:contentEditor></code>
                    component allows creation, editing and deletion of content instances
                    similar to the <link linkend="adm_instance_editor">Instance Editor</link>.
                    <warning>
                        This component depends on <link linkend="jcl_fx_includes">&lt;fx:includes htmlEditor="true" yui="true"></link>
                        on the beginning of the page, together with <link linkend="jcl_fx_yuisetup">&lt;fx:yuiSetup/></link>
                        at the end of the page. Furthermore the component needs to be surrounded by a
                        prefixed multipart form. Beyound the core JSF tag libraries, &ajax4jsf; and
                        <link xlink:href="http://myfaces.apache.org/tomahawk/index.html">MyFaces Tomahawk</link> are required as well.
                    </warning>
                </para>

                <section xml:id="jcl_fx_contentEditor_synopsis">
                        <title>Synopsis</title>
                        <programlisting language="xhtml"><![CDATA[<fx:contentEditor editorId="editorId" formPrefix="formPrefix"
            (contentId="contentId" | pk="pkexpr" | content="contentExpr" | typeId="typeId" | type="typeExpr")
            [var="varname"] [valueFormatter="valueFormatterExpr"] [reset="true|false"] [reRender="clientId"]
            [editMode="true|false"] [disableAcl="true|false"] [disableWorkflow="true|false"] [disableEdit="true|false"]
            [disableDelete="true|false"] [disableVersion="true|false"] [disableCompact="true|false"] [disableSave="true|false"]
            [disableCancel="true|false"] [disableButtons="true|false"] [disableAddAssignment="true|false"]
            [disableRemoveAssignment="true|false"] [disablePositionAssignment="true|false"] [disableMessages="true|false"]
            [showLockOwner="true|false"] [hiddenAssignments="hiddenIds"] [hiddenProperties="hiddenProperties"]>
...
</fx:contentEditor>
]]></programlisting>
                </section>
                <section xml:id="jcl_fx_contentEditor_parameters">
                    <title>Parameters</title>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>editorId</term>
                                <listitem>
                                    <para>
                                        Id of the content editor component (must be unique in a view,
                                        used as key to retrieve a specific content instance stored in view-state).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>formPrefix</term>
                                <listitem>
                                    <para>
                                        The form prefix of the surrounding form.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>contentId</term>
                                <listitem>
                                    <para>
                                        Id of the content to be edited. The maximum available version is loaded.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>pk</term>
                                <listitem>
                                    <para>
                                        FxPk of the content to be edited.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>content</term>
                                <listitem>
                                    <para>
                                        Content instance to be edited.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>typeId</term>
                                <listitem>
                                    <para>
                                        Type id of the content instance to be created.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>type</term>
                                <listitem>
                                    <para>
                                        FxType of the content instance to be created.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>var</term>
                                <listitem>
                                    <para>
                                       Variable name to expose the FxWrappedContent instance within the tag's body.
                                       Useful if you want to extend the component's functionality.
                                       See <xref linkend="jcl_fx_contentEditor_customization"/> for details.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>valueFormatter</term>
                                <listitem>
                                    <para>
                                        A custom valueFormatter which is passed to <link linkend="jcl_fx_value_input">&lt;fx:fxValueInput/></link>
                                        components within this component.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>reset</term>
                                <listitem>
                                    <para>
                                        True if the content for the given editor id should be
                                        reset upon the next request
                                        (==removed from content storage and reinitilaized with
                                        given attributes, default: false). Normally you won't use this, but
                                        if you want to know more, see <xref linkend="jcl_fx_contentEditor_customization"/>
                                        for details.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>reRender</term>
                                <listitem>
                                    <para>
                                        External client id which is to be rerendered upon the next AJAX-request triggered
                                        by the content editor component. Normally you won't use this, unless you need
                                        to rerender a component containing several fxContentEditors.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>editMode</term>
                                <listitem>
                                    <para>
                                        If true initilaizes this component to edit mode, otherwise to view mode (default: false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableAcl</term>
                                <listitem>
                                    <para>
                                        True if ACL selectbox should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableWorkflow</term>
                                <listitem>
                                    <para>
                                        True if workflow selct box should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableEdit</term>
                                <listitem>
                                    <para>
                                        True if "edit" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableDelete</term>
                                <listitem>
                                    <para>
                                        True if "delete" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableVersion</term>
                                <listitem>
                                    <para>
                                        True if "save in new version" button and "delete version" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableCompact</term>
                                <listitem>
                                    <para>
                                        True if "compact" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableSave</term>
                                <listitem>
                                    <para>
                                        True if "save" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableCancel</term>
                                <listitem>
                                    <para>
                                        True if "cancel" button should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableButtons</term>
                                <listitem>
                                    <para>
                                        True if no buttons should be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableAddAssignment</term>
                                <listitem>
                                    <para>
                                        True if icons for adding/inserting assignments should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableRemoveAssignment</term>
                                <listitem>
                                    <para>
                                        True if icons for removing assignments should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disablePositionAssignment</term>
                                <listitem>
                                    <para>
                                        True if icons for positioning assignments should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableMessages</term>
                                <listitem>
                                    <para>
                                        True if the &lt;h:messages/&gt; tag inside the content editor should not be rendered (default:false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>disableReferenceEditor</term>
                                <listitem>
                                    <para>
                                        True if the inline editor controls for references should not be rendered (default: false).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>closePanelScript</term>
                                <listitem>
                                    <para>
                                        A JavaScript code which is called when the editor is closed (clicking on the "Save and exit" or "Stop editing" button)
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>showLockOwner</term>
                                <listitem>
                                    <para>
                                        True if the the respective content's lock owner should be shown (default: true).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>hiddenAssignments</term>
                                <listitem>
                                    <para>
                                        A collection of group or property assignment IDs that should be hidden in the editor (default: none).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>hiddenProperties</term>
                                <listitem>
                                    <para>
                                        A collection of property IDs that should be hidden in the editor (default: none).
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>

                <section xml:id="jcl_fx_contentEditor_customization">
                    <title>Customizing the <code language="xhtml">&lt;fx:contentEditor></code> component</title>
                    <para>
                        Because of its generic nature the content editor cannot
                        satisfy every need out of the box. However, precautions have been taken to make this
                        component customizable to your specific application needs. Let's look at the different
                        parts that make up the content editor more closely:
                    </para>

                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>Stylesheet</term>
                                <listitem>
                                    <para>
                                        All relevant style entries are prefixed with <code lang="css">.fxContentEditor_</code>.
                                        So if you want to replace icons and images, change colors etc., you can
                                        include your own stylesheet overriding those entries.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>Templating</term>
                                <listitem>
                                    <para>
                                        <code language="xhtml">&lt;ui:insert></code> tags allow you
                                        to insert or replace whole parts of the content editor component
                                        via <code language="xhtml">&lt;ui:define></code>.
                                    </para>
                                     <para>
                                        The provided names of the <code language="xhtml">&lt;ui:insert></code> tags and respective locations are:
                                        <variablelist>
                                            <varlistentry>
                                                <term>insertTop: located at the very top of the component</term>
                                            </varlistentry>
                                             <varlistentry>
                                                <term>contentSettings: replaces the ACL and Workflow select boxes</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>insertMiddle: located right after contentSettings</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>buttons: replaces all buttons</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>editButton: replaces the "Edit" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>createButton: replaces the "Create" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>saveButton: replaces the "Save" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>saveInNewVersionButton: replaces the "Save in new Version" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>deleteButton: replaces the "Delete" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>deleteVersionButton: replaces the "Delete Version" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>compactVersionButton: replaces the "Compact" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>cancelButton: replaces the "Stop Editing" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>saveAndCancelButton: replaces the "Save and Stop Editing" button</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>additionalButtons: located right after the previous buttons</term>
                                            </varlistentry>
                                            <varlistentry>
                                                <term>insertBottom: located at the very bottom of the content editor</term>
                                            </varlistentry>
                                        </variablelist>
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>FxWrappedContent</term>
                                <listitem>
                                    <para>
                                        FxWrappedContent is a wrapper class for FxContent instances
                                        that provides convenience methods for JSF-handling. By providing
                                        a variable name you can expose that wrapper class and access it via JSF-EL
                                        or inject it into your own custom beans via the <code language="xhtml">
                                        &lt;f:setPropertyActionListener/></code> tags.
                                        See &flexiveJavadoc; for further details about that class.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>Extending functionality</term>
                                <listitem>
                                    <para>
                                       By using templating and FxWrappedContent as described above
                                       you can add your own buttons to add additional functionality.
                                       Also you may extend existing functionality by calling methods
                                       of the component's backing bean FxContentEditorBean from within
                                       your own managed beans.
                                       See <xref linkend="jcl_fx_contentEditor_examples"/>
                                       for examples and important instructions.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>
                <section xml:id="jcl_fx_contentEditor_examples">
                    <title>Content Editor Examples</title>
                    <example xml:id="jcl_fx_contentEditor_ex_simple">
                        <title>Content Editor simple usage</title>
                        <para>
                            Here you see a simple usage examples, together with necessary
                            "surroundings" when using this component. Don't forget that
                            &ajax4jsf; and <link xlink:href="http://myfaces.apache.org/tomahawk/index.html">MyFaces Tomahawk</link>
                            tag libraries are also required.
                        </para>
                        <xi:include href="listings/jsfsupport_contentEditor_simple.xml"/>
                    </example>
                    <example xml:id="jcl_fx_contentEditor_ex_button">
                        <title>Content Editor adding buttons</title>
                        <para>
                            In this example three buttons are added, which will be inserted in the
                            contentEditor component's template at the &lt;ui:include/>
                            named "additionalButtons". Note that for the &ajax4jsf; button
                            flexive.contentEditor.preSubmit() should be called. If you want to
                            use actions of the component's backing bean, make sure you set up
                            the property action listeners accordingly.
                        </para>
                        <xi:include href="listings/jsfsupport_contentEditor_button.xml"/>
                    </example>
                    <example xml:id="jcl_fx_contentEditor_ex_bean">
                        <title>Content Editor calling the backing bean</title>
                        <para>
                            In this example the backing bean is retrieved, an action is called
                            and finally the component tree is reset. Resetting the component tree
                            is important if the tree structure changes in between requests, so it
                            can be constructed anew when the page is rendered.
                            This is necesarry if for example elements change place or are deleted in
                            order to avoid duplicate id errors.
                            Make sure you have set up the actionlisteners accordingly as described in
                            <xref linkend="jcl_fx_contentEditor_ex_button"/> when calling methods of the
                            backing bean.
                        </para>
                        <xi:include href="listings/jsfsupport_contentEditor_bean.xml"/>
                    </example>
                </section>
            </section>
            <section xml:id="jcl_fx_value">
                <title>
                    <code language="xhtml">&lt;fx:value></code>
                </title>
                <para>
                    For writing FxContent editors, the
                    <code language="xhtml">&lt;fx:value></code>
                    component provides a complete property value input row consisting of
                    <itemizedlist>
                        <listitem>
                            <para>
                                the assignment label translated in the current user's locale, and
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                a
                                <link linkend="jcl_fx_value_input">
                                    <code language="xhtml">&lt;fx:fxValueInput></code>
                                </link>
                                instance that renders suitable input tags for all supported data
                                types, including multilanguage and binary support.
                            </para>
                        </listitem>
                    </itemizedlist>
                    The output is controlled by the
                    <link linkend="jcl_fx_formrow">
                        <code language="xhtml">&lt;fx:formRow></code>
                    </link>
                    component.
                    All parameters of
                    <link linkend="jcl_fx_formrow">
                        <code language="xhtml">&lt;fx:formRow></code>
                    </link>
                    can also be set for
                    <code language="xhtml">&lt;fx:value></code>, except those that control the actual value being
                    rendered.
                </para>
                <para>
                    <emphasis>Note:</emphasis>
                    <code>&lt;fx:value&gt;</code>
                    is a Facelets compile-time component, this means that its input variables must be bound during
                    view creation. Data exposed by components like
                    <code>&lt;ui:repeat&gt;</code>
                    is not available during "compile time" and cannot be used as input for
                    <code>&lt;fx:value&gt;</code>. Use compile-time iterators such as
                    <code>&lt;c:forEach&gt;</code>
                    instead.
                </para>

                <section xml:id="jcl_fx_value_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:value property="xpath" [var="varname"] [labelKey="messagekey"] [any attribute for fx:formRow]/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_value_parameters">
                    <title>Parameters</title>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>property</term>
                                <listitem>
                                    <para>
                                        The &xpath; of the property.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>var</term>
                                <listitem>
                                    <para>
                                        The value of the "var" attribute of the
                                        <link linkend="jcl_fx_content">
                                            <code language="xhtml">&lt;fx:content></code>
                                        </link>
                                        component whose content should be edited. If nested directly in a
                                        fx:content tag, this attribute can be omitted.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>label</term>
                                <listitem>
                                    <para>
                                        An optional label that overrides the assignment label.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>labelKey</term>
                                <listitem>
                                    <para>
                                        An optional &messagekey; that overrides the assignment label.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>tooltip</term>
                                <listitem>
                                    <para>
                                        The input label tooltip (optional).
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>tooltipKey</term>
                                <listitem>
                                    <para>
                                        Message key of the tooltip (overrides tooltip, if not specified and labelKey is set,
                                        it defaults to<code language="jsfel">#{labelKey}.tooltip</code>)
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>readOnly</term>
                                <listitem>
                                    <para>
                                        If true, no input field will be rendered.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>forceLineInput</term>
                                <listitem>
                                    <para>
                                        For multiline and HTML properties, force to render a single-line input field (e.g.
                                        for search query forms).
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>inputMapper</term>
                                <listitem>
                                    <para>
                                        An optional input mapper for rendering the input control. For example, properties
                                        referencing other content may need a custom input mapper that provides a select list
                                        of content instances. For more information take a look at the
                                        <link xlink:href="&flexiveJavadocBase;shared/com/flexive/shared/value/mapper/InputMapper.html">
                                            InputMapper
                                        </link>
                                        documentation and at
                                        <xref linkend="jcl_fx_content_ex_inputmappers"/>.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>valueFormatter</term>
                                <listitem>
                                    <para>
                                        A
                                        <interfacename>FxValueFormatter</interfacename>
                                        to be used for rendering the value (in read-only mode only). If not specified,
                                        the JSF renderer will choose the appropriate default formatter for
                                        the actual value class.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>filter</term>

                                <listitem>
                                    <para>
                                        If set to false, HTML output will not be filtered. If set to true (the default),
                                        HTML entities will be used for sensitive characters (e.g. "&amp;lt;"
                                        instead of "&lt;").
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>disableMultiLanguage</term>
                                <listitem>
                                    <para>
                                        Disables multi language support even if the FxValue object is multilingual.
                                        Only the default translation will be displayed and updated.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>disableLytebox</term>
                                <listitem>
                                    <para>
                                        Set this property to true if the
                                        <link xlink:href="http://www.dolem.com/lytebox/">Lytebox</link>
                                        javascript library used for rendering inline previews of images should not be used.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>onchange</term>
                                <listitem>
                                    <para>
                                        An optional javascript expression to be called when an input element
                                        changed its value.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>autocompleteHandler</term>
                                <listitem>
                                    <para>
                                        An instance of the
                                        <classname>flexive.yui.AutoCompleteHandler</classname>
                                        javascript class. This class provides a query method for a
                                        client-side autocomplete widget provided by Yahoo UI, as well as a method
                                        for formatting the response.
                                    </para>
                                </listitem>
                            </varlistentry>

                        </variablelist>
                    </para>
                </section>

                <section xml:id="jcl_fx_value_ex">
                    <title>Examples</title>
                    <para>
                        For basic usage examples, look at the
                        <xref linkend="jcl_fx_content_ex"/>
                        in the
                        <code language="xhtml">&lt;fx:content></code>
                        documentation.
                        For examples on controlling the output of the
                        <code language="xhtml">&lt;fx:formRow></code>
                        component, see
                        <xref linkend="jcl_fx_formrow_ex"/>
                        of that component.
                    </para>
                </section>
            </section>

            <section xml:id="jcl_fx_value_input">
                <title>
                    <code language="xhtml">&lt;fx:fxValueInput></code>
                </title>
                <para>
                    The
                    <code language="xhtml">&lt;fx:fxValueInput></code>
                    component is a universal
                    component for editing FxValue objects. It supports every datatype of FxValue,
                    for example plain text, numbers, dates, or even binaries. It is used in the
                    &backendGui; content and search query editors and in every other place
                    where a FxValue needs to be edited. It also includes multilanguage support
                    by providing a language select list next to the input elements.
                </para>
                <para>
                    The default input language of multi-language values can be set in the
                    <link linkend="adm_user_preferences">user preferences</link>
                    of the &backendGui; or programmatically through the user configuration parameter
                    <constant>com.flexive.shared.configuration.SystemParameters.USER_DEFAULTINPUTLANGUAGE</constant>.
                </para>
                <para>
                    Note that this component is a JSF UIInput component, thus it supports many standard JSF
                    input facilities (like value change listeners or validators).
                </para>
                <section xml:id="jcl_fx_value_input_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:fxValueInput value="fxvalue" [id="clientid"] [externalId="externalId"] [readOnly="true|false"] [readOnlyShowTranslations="true|false"]
                 [forceLineInput="true|false"] [inputMapper="inputMapper"] [valueFormatter="valueFormatter"] [filter="true|false"]
                 [containerDivClass="CSS class"] [disableMultiLanguage="true|false"] [disableLytebox="true|false] [onchange="onchange"]
                 [autocompleteHandler="handler instance"]/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_value_input_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>value</term>
                            <listitem>
                                <para>
                                    An expression of type FxValue of the value to be edited. Note that the
                                    value must not be null, otherwise the input component cannot determine
                                    the actual FxValue type.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>id</term>
                            <listitem>
                                <para>
                                    An optional client ID of the input component.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>externalId</term>
                            <listitem>
                                <para>
                                    An optional external ID that overrides the clientId in JSF validation error messages
                                    -
                                    may be necessary in complex, generic forms, but usually you won't need this.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>readOnly</term>
                            <listitem>
                                <para>
                                    If true, only the value itself will be rendered.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>readOnlyShowTranslations</term>
                            <listitem>
                                <para>
                                    If true, all translations of a property will be shown, else only the best matching
                                    translation (in the calling users language or the language marked as default).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>forceLineInput</term>
                            <listitem>
                                <para>
                                    For multiline and HTML properties, force to render a single-line input field (e.g.
                                    for search query forms).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>inputMapper</term>
                            <listitem>
                                <para>
                                    An optional input mapper for rendering the input control. For example, properties
                                    referencing other content may need a custom input mapper that provides a select list
                                    of content instances. For more information take a look at the
                                    <link xlink:href="&flexiveJavadocBase;shared/com/flexive/shared/value/mapper/InputMapper.html">
                                        InputMapper
                                    </link>
                                    documentation and at
                                    <xref linkend="jcl_fx_content_ex_inputmappers"/>.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>valueFormatter</term>
                            <listitem>
                                <para>
                                    A
                                    <interfacename>FxValueFormatter</interfacename>
                                    to be used for rendering the value (in read-only mode only). If not specified,
                                    the JSF renderer will choose the appropriate default formatter for
                                    the actual value class.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>filter</term>

                            <listitem>
                                <para>
                                    If set to false, HTML output will not be filtered. If set to true (the default),
                                    HTML entities will be used for sensitive characters (e.g. "&amp;lt;"
                                    instead of "&lt;").
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>containerDivClass</term>
                            <listitem>
                                <para>
                                    If this CSS class property is set, the component will be embedded in a div-container
                                    using this CSS class as style.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>disableMultiLanguage</term>
                            <listitem>
                                <para>
                                    Disables multi language support even if the FxValue object is multilingual.
                                    Only the default translation will be displayed and updated.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>disableLytebox</term>
                            <listitem>
                                <para>
                                    Set this property to true if the
                                    <link xlink:href="http://www.dolem.com/lytebox/">Lytebox</link>
                                    javascript library used for rendering inline previews of images should not be used.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>onchange</term>
                            <listitem>
                                <para>
                                    An optional javascript expression to be called when an input element
                                    changed its value.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>accesskey</term>
                            <listitem>
                                <para>
                                    An optional access key for the input element.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>autocompleteHandler</term>
                            <listitem>
                                <para>
                                    An instance of the
                                    <classname>flexive.yui.AutoCompleteHandler</classname>
                                    javascript class. This class provides a query method for a
                                    client-side autocomplete widget provided by Yahoo UI, as well as a method
                                    for formatting the response.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>valueChangeListener</term>
                            <listitem>
                                <para>
                                    A JSF listener that is invoked when the component value changes.
                                </para>
                            </listitem>
                        </varlistentry>

                    </variablelist>
                </section>

                <section xml:id="jcl_fx_value_input_ex">
                    <example xml:id="jcl_fx_value_input_ex_groupname">
                        <title>An input row for editing a FxString value</title>
                        <xi:include href="listings/jsfsupport_valueinput_groupname.xml"/>
                    </example>

                    <example xml:id="jcl_fx_value_input_ex_autocomplete">
                        <title>An autocomplete handler for user names</title>
                        <para>
                            In this example, we use the predefined JSON/RPC autocomplete provider
                            <link xlink:href="&fisheyeBase;src/ui/jsf-components/src/java/com/flexive/faces/javascript/AutoCompleteProvider.java">
                                AutoCompleteProvider#userQuery(String query)</link>.
                            It searches for user account names based on the user input and returns possible matches.
                        </para>
                        <programlisting language="xhtml"><![CDATA[<script type="text/javascript">
<!--
    // Initialize the Javascript handler that submits the queries via JSON/RPC and evaluates the response
    var userAcHandler = new flexive.yui.AutoCompleteHandler(function(query) {
        // execute JSON/RPC call and evaluate the response
        return eval("(" + flexive.util.getJsonRpc().AutoCompleteProvider.userQuery(query) + ")");
    });
//-->
</script>

<fx:fxValueInput value="#{backingBean.userName}" autocompleteHandler="userAcHandler"/>
]]></programlisting>

                        <para>
                            The backing bean property
                            <code>#{backingBean.userName}</code>
                            is a property of type
                            <type>FxString</type>
                            and will hold the submitted user name.
                        </para>
                    </example>

                    <example xml:id="jcl_fx_value_input_ex_autocomplete_custom">
                        <title>Writing custom autocomplete handlers</title>
                        <para>
                            An autocomplete provider returns its response to a query in a twodimensional
                            Javascript array. An entry consists of:
                            <orderedlist>
                                <listitem>
                                    <para>
                                        The value that will be set in the text input (index: 0).
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        The displayed label in the autocomplete box, possibly including
                                        markup (index: 1).
                                    </para>
                                </listitem>
                            </orderedlist>
                            The Javascript class
                            <classname>flexive.yui.AutoCompleteHandler</classname>
                            provides a small wrapper that is used by the fxValueInput component. To implement
                            a custom wrapper you need to overwrite the
                            <methodname>query</methodname>
                            method and perform the autocomplete query inside. This can (but does not have to)
                            include a server call, e.g. using JSON/RPC. In this example, we define a new query
                            function that automatically generates "suggestions" based on the input value
                            by appending a suffix:

                            <programlisting language="xhtml"><![CDATA[<script type="text/javascript">
<!--
    var customHandler = new flexive.yui.AutoCompleteHandler(function(query) {
        var q = decodeURIComponent(query);
        return [[q + "/a", q + ": <i>a label</i>"],
                [q + "/b", q + ": <i>b label</i>"],
                [q + "/c", q + ": <i>c label</i>"]];
    });
//-->
</script>

<fx:fxValueInput value="#{backingBean.fxStringValue}" autocompleteHandler="customHandler"/>
]]></programlisting>
                        </para>
                    </example>

                </section>
            </section>

            <section xml:id="jcl_fx_value_input_languageselect">
                <title>
                    <code language="xhtml">&lt;fx:fxValueInputLanguageSelect></code>
                </title>

                <para>
                    Provides a select list that switches the input language of all
                    <code>&lt;fx:fxValueInput/&gt;</code>
                    components on the current page. This tag is implemented in JavaScript,
                    and it does not cause an extra round-trip to the server.
                </para>


                <section xml:id="jcl_fx_value_input_languageselect_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:fxValueInputLanguageSelect id="clientid"/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_value_input_languageselect_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>id</term>
                            <listitem>
                                <para>
                                    The client ID of the select input component.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
            </section>

            <section xml:id="jcl_fx_resultvalue">
                <title>
                    <code language="xhtml">&lt;fx:resultValue></code>
                </title>
                <para>
                    The resultValue tag is a specialized wrapper for the
                    <code>&lt;fx:fxValueInput&gt;</code>
                    to be used for rendering a column value of a search result row.
                    If the value passed is an instance of
                    <classname>FxValue</classname>, a read-only instance
                    of
                    <code>&lt;fx:fxValueInput&gt;</code>
                    is created which then renders the given value.
                    Otherwise (e.g. for
                    <classname>FxPK</classname>
                    primary keys or primitive values)
                    a generic formatter is used, which can be customized e.g. for formatting
                    of tree paths with a link formatter.
                </para>

                <section xml:id="jcl_fx_resultvalue_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:resultValue value="value" [linkFormatter="formatter"] [itemLinkFormat="format"] [contentLinkFormat="format"]/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_resultvalue_parameters">
                    <title>Parameters</title>
                    <para>
                        <variablelist>
                            <varlistentry>
                                <term>value</term>
                                <listitem>
                                    <para>
                                        The value to be rendered. Can be of any type.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>linkFormatter</term>
                                <listitem>
                                    <para>
                                        A
                                        <classname>ContentLinkFormatter</classname>
                                        instance that will be used for rendering links to contents.
                                        This applies to the rendering of the virtual properties
                                        <code>@pk</code>
                                        and
                                        <code>@path</code>, as described in
                                        <xref linkend="css_tree"/>.
                                        If not specified, the default
                                        <classname>ContentLinkFormatter</classname>
                                        will be used. For a description of the supported link format,
                                        please refer to the &flexiveJavadoc; of this class.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>contentLinkFormat</term>
                                <listitem>
                                    <para>
                                        The format string passed to the linkFormatter for content links, i.e.
                                        <classname>FxPK</classname>
                                        values. For a description of the supported link format of the default formatter,
                                        please refer to the &flexiveJavadoc; of this class.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>itemLinkFormat</term>
                                <listitem>
                                    <para>
                                        The format string used for
                                        <classname>FxPaths</classname>
                                        values as returned by the virtual
                                        <code>@path</code>
                                        property. For a description of the supported link format of the default
                                        formatter,
                                        please refer to the &flexiveJavadoc; of this class.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>

                <section xml:id="jcl_fx_resultvalue_ex">
                    <title>Examples</title>
                    <para>
                        A basic example of using
                        <code>&lt;fx:resultValue&gt;</code>
                        can be found in
                        <xref linkend="tutorial01"/>.
                    </para>
                </section>
            </section>

            <section xml:id="jcl_fx_content_list">
                <title>
                    <code language="xhtml">&lt;fx:contentList></code>
                </title>
                <para>
                    Iterates over a collection of content instances.

                    This component is essentially an iterator wrapping a fx:content component. The content instances can
                    be specified through nested Groovy queries or a SqlQueryBuilder instance.
                </para>

                <section xml:id="jcl_fx_content_list_synopsis">
                    <title>
                        Synopsis
                    </title>
                    <programlisting language="xhtml"><![CDATA[<fx:contentList var="varname" [indexVar="indexVarName"] [queryBuilder="queryBuilderExpr"] [explode="true|false"]>
  [<f:facet name="groovyQuery"> ... </f:facet>]
  [<f:facet name="header"> ... </f:facet>]
  [<f:facet name="empty"> ... </f:facet>]
  ...
</fx:contentList>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_content_list_parameters">
                    <title>
                        Parameters
                    </title>
                    <variablelist>
                        <varlistentry>
                            <term>var</term>
                            <listitem>
                                <para>
                                    Name of the variable that provides the content. The actual FxContent instance itself
                                    is provided in "#{var}_content", i.e. if var="project", then the FxContent is
                                    supplied in "project_content".
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>indexVar</term>
                            <listitem>
                                <para>
                                    Optional name for a variable that exposes the current iteration index.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>queryBuilder</term>
                            <listitem>
                                <para>
                                    An expression of type SqlQueryBuilder that is used for selecting the contents.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>explode</term>
                            <listitem>
                                <para>
                                    Indicates whether the content instances should be "exploded",
                                    i.e. whether empty properties
                                    should be initialized. Useful for content editors. Defaults to false.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_content_list_facets">
                    <title>
                        Facets
                    </title>
                    <variablelist>
                        <varlistentry>
                            <term>groovyQuery</term>
                            <listitem>
                                <para>
                                    Embeds a query using FxQueryBuilder directly in the HTML page. For example:
                                    <programlisting language="xhtml"><![CDATA[<f:facet name="groovyQuery">
    like("caption", "A%")
    type("myArticleType")
</f:facet>
]]></programlisting>
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>header</term>
                            <listitem>
                                <para>
                                    An optional header row. Rendered only if at least one content instance is available.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>empty</term>
                            <listitem>
                                <para>
                                    An optional empty message. This is the only output that is rendered if the query
                                    returns no contents, and if no "empty" facet is specified, nothing is rendered at
                                    all.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
            </section>

            <section xml:id="jcl_fx_thumbnail">
                <title>
                    <code language="xhtml">&lt;fx:thumbnail></code>
                </title>

                <para>
                    Renders a thumbnail for a given
                    <code>FxPK</code>
                    or
                    <code>FxBinary</code>
                    reference.
                </para>

                <section xml:id="jcl_fx_thumbnail_synopsis">
                    <title>Synopsis</title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:thumbnail (pk="fxpk" | binary="fxbinary") [forceVersion="max|live"]/>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_thumbnail_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>pk</term>
                            <listitem>
                                <para>
                                    The primary key of the content instance. If the PK is specified,
                                    the default thumbnail of the content is rendered.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>binary</term>
                            <listitem>
                                <para>
                                    A specific binary entry of type
                                    <code>FxBinary</code>
                                    to be rendered. This is useful for for content types with more than one binary
                                    property. For an example, see
                                    <xref linkend="jcl_fx_children"/>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>urlOnly</term>
                            <listitem>
                                <para>
                                    If true, only the thumbnail URL will be rendered (relative to the context root,
                                    e.g.
                                    <code>thumbnail/pk5.1/s0</code>).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>previewSize</term>
                            <listitem>
                                <para>
                                    The desired size of the thumbnail. Valid values are taken from
                                    <link xlink:href="&flexiveJavadocBase;/shared/com/flexive/shared/value/BinaryDescriptor.PreviewSizes.html">
                                        BinaryDescriptor.PreviewSizes</link>:
                                    <itemizedlist>
                                        <listitem>
                                            <para><code>PREVIEW1</code>,
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <code>PREVIEW2</code>
                                                (default),
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><code>PREVIEW3</code>,
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><code>SCREENVIEW</code>,
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <code>ORIGINAL.</code>
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>forceVersion</term>
                            <listitem>
                                <para>
                                    If set to
                                    <code>max</code>
                                    or
                                    <code>live</code>,
                                    it overrides the version information in the PK or binary descriptor.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>includeTimestamp</term>
                            <listitem>
                                <para>
                                    If true, include a timestamp that forces the thumbnail to be reloaded
                                    every time the page is rendered. (since &flexive; 3.1.7)
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
            </section>

            <section xml:id="jcl_fx_resulttable">
                <title>
                    <code language="xhtml">&lt;fx:resultTable></code>
                </title>

                <para>
                    Renders a &yui; datatable widget for a &flexive; result set. This provides
                    an easy way of rendering a result to the user, and it includes a paginator
                    widget.
                </para>

                <section xml:id="jcl_fx_resulttable_synopsis">
                    <title>Synopsis</title>

                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:resultTable var="name" value="query" [viewType="list|thumbnails"]
    [clickHandler="clickHandler"] [actionColumnHandler="handler"] [previewSize="previewSize"]
    [rowsPerPage="rowsPerPage"] [initialPage="initialPage"]/>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_resulttable_parameters">
                    <title>Parameters</title>

                    <variablelist>
                        <varlistentry>
                            <term>var</term>
                            <listitem>
                                <para>
                                    The name of the Javascript variable that exposes the &yui; DataTable widget.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>value</term>
                            <listitem>
                                <para>
                                    The result set to be rendered, or a plain text FxSQL query.
                                    The following types are supported:
                                </para>
                                <variablelist>
                                    <varlistentry>
                                        <term>
                                            <classname>String</classname>
                                        </term>
                                        <listitem>
                                            <para>
                                                A &fxsql; query, for example:
                                                <code language="sql">SELECT @pk, #image/caption</code>
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>
                                            <classname>com.flexive.shared.search.FxResultSet</classname>
                                        </term>
                                        <listitem>
                                            <para>
                                                The result of a &fxsql; query.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term>
                                            <classname>com.flexive.shared.search.query.SqlQueryBuilder</classname>
                                        </term>
                                        <listitem>
                                            <para>
                                                A &fxsql; query builder instance the will be used for fetching
                                                the result set.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>viewType</term>
                            <listitem>
                                <para>The view type of the datatable.
                                    "list" renders a common table view for each of the columns,
                                    while "thumbnails" renders only the thumbnails as in the
                                    backend administration's thumbnail view. Note that the thumbnail view
                                    only works if the object's primary key ("@pk") was selected in the query,
                                    otherwise no valid thumbnail image can be rendered.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>clickHandler</term>
                            <listitem>
                                <para>
                                    An optional Javascript method for handling clicks on the table with
                                    signature
                                    <code language="javascript">function handler(targetEl, pk)</code>.
                                    The primary key parameter is only available if the @pk column
                                    was selected in the &fxsql; query.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>actionColumnHandler</term>
                            <listitem>
                                <para>
                                    An optional instance of type
                                    <type>flexive.yui.datatable.ActionColumnHandler</type>
                                    for generating the contents of the "Action" column - an additional column that can
                                    be used for displaying custom actions for contents and that will only be visible
                                    when this parameter is set. The
                                    <code language="javascript">
                                        flexive.yui.datatable.ActionColumnHandler#getActionColumn
                                    </code>
                                    method is passed the primary key and the permissions of the column, which can be
                                    null if the search result does not contain the @pk or @permissions properties.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>previewSize</term>
                            <listitem>
                                <para>
                                    name of the preview size to be used for thumbnails
                                    (see
                                    <link xlink:href="&flexiveJavadocBase;shared/com/flexive/shared/value/BinaryDescriptor.PreviewSizes.html">
                                        BinaryDescriptor#PreviewSizes
                                    </link>).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>rowsPerPage</term>
                            <listitem>
                                <para>
                                    current value for the paginator (optional).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>initialPage</term>
                            <listitem>
                                <para>
                                    current page index for the paginator (optional).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>firstColumn</term>
                            <listitem>
                                <para>
                                    index of the first column to be included in the table (1-based, optional).
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_resulttable_examples">
                    <title>Examples</title>

                    <example xml:id="jcl_fx_resulttable_examples_basic">
                        <title>Using fx:resultTable to submit and render &fxsql; queries</title>

                        <para>
                            The following code snippet renders two result tables: the first in thumbnail mode,
                            the second in list mode. The query is formulated in &fxsql; and is passed using the
                            <parameter>value</parameter>
                            attribute.
                        </para>

                        <programlisting language="xhtml"><![CDATA[<fx:resultTable var="thumbnailsTable" value="SELECT @pk, #image/caption" viewType="thumbnails"/>

<fx:resultTable var="listTable" value="SELECT *"/>
]]></programlisting>
                    </example>
                </section>
            </section>

            <section xml:id="jcl_fx_resulttableupdater">
                <title>
                    <code language="xhtml">&lt;fx:resultTableUpdater></code>
                </title>

                <para>
                    Provides support for updating a result table after an Ajax request. This allows to combine
                    &ajax4jsf; with the client-side fx:resultTable widget. After an Ajax response was rendered,
                    this tag updates a result table with the current result values. Take a look at
                    the backend administration's search results page for a more sophisticated example.
                </para>

                <section xml:id="jcl_fx_resulttableupdater_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:resultTableUpdater var="name" value="query"/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_resulttableupdater_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>var</term>
                            <listitem>
                                <para>
                                    The name of the javascript variable that exposes the &yui; DataTable widget.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>value</term>
                            <listitem>
                                <para>The result set to be rendered, or a plain text FxSQL query - see
                                    <link linkend="jcl_fx_resulttable">&lt;fx:resultTable></link>
                                    documentation.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>previewSize</term>
                            <listitem>
                                <para>
                                    name of the preview size to be used for thumbnails
                                    (see
                                    <link xlink:href="&flexiveJavadocBase;shared/com/flexive/shared/value/BinaryDescriptor.PreviewSizes.html">
                                        BinaryDescriptor#PreviewSizes
                                    </link>).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>firstColumn</term>
                            <listitem>
                                <para>
                                    index of the first column to be included in the table (1-based, optional).
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_resulttableupdater_examples">
                    <title>Examples</title>
                    <example xml:id="jcl_fx_resulttableupdater_examples_basic">
                        <title>Updating a resultTable through an &ajax4jsf; update</title>

                        <para>
                            When re-rendering this &ajax4jsf; output panel (e.g. through a command button
                            or an onchange listener)
                            the result table of the given name will be refreshed based on the current result:
                        </para>

                        <programlisting language="xhtml"><![CDATA[<a4j:outputPanel id="refreshResults">
    <fx:resultTableUpdater var="resultTable" value="#{fxSearchResultBean.result}"/>
</a4j:outputPanel>

<!-- Render the result table (this part of the page should not be included in the Ajax response)  -->
<fx:resultTable var="resultTable" value="#{fxSearchResultBean.result}"/>
]]></programlisting>
                    </example>
                </section>
            </section>

            <section xml:id="jcl_fx_colorpicker">
                <title>
                    <code language="xhtml">&lt;fx:colorPicker></code>
                </title>

                <para>
                    A color picker based on &yui;, shown in a popup dialog. The color value will be written
                    to the given form element (a text or hidden input element). The color picker can be nested
                    directly in a JSF input element (e.g. h:inputText). In this case it will be rendered directly
                    before the actual input element.
                </para>

                <section xml:id="jcl_fx_colorpicker_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:colorPicker [inputId="name"]/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_colorpicker_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>inputId</term>
                            <listitem>
                                <para>
                                    ID of the input element where the picked color value will be stored. If not set, the
                                    parent component ID will be used.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_colorpicker_examples">
                    <title>Examples</title>
                    <example xml:id="jcl_fx_colorpicker_examples_nested">
                        <title>Using the color picker with a JSF input component</title>

                        <para>
                            In this example, an existing JSF text input component will be augmented
                            with a color picker.
                        </para>

                        <programlisting language="xhtml"><![CDATA[<h:inputText id="color" value="#{myBean.color}" size="7">
    <fx:colorPicker/>
</h:inputText>
]]></programlisting>
                    </example>

                    <example xml:id="jcl_fx_colorpicker_examples_standalone">
                        <title>Using the color picker for a form input</title>

                        <para>
                            The color picker can be used "stand-alone" for any text-based form input.
                            To do so, just set the form input element ID with the
                            <parameter>inputId</parameter>
                            parameter.
                        </para>

                        <programlisting language="xhtml"><![CDATA[<input type="text" id="myinput" size="7"/>
<fx:colorPicker inputId="myinput"/>]]></programlisting>
                    </example>
                </section>
            </section>

            <section xml:id="jcl_fx_linearize_fxvalue_inputs">
                <title>
                    <code language="xhtml">&lt;fx:linearizeFxValueInputs></code>
                </title>

                <para>
                    Helper tag to linearize the navigation between all fx:fxValueInput instances on a page.
                    After activating the first input on the page, the user can navigate to all following using
                    the "tab" key (i.e. the tabindex will be strictly increasing for all succeeding inputs, skipping
                    other navigation elements and the language selects).
                </para>

                <para>
                    This tag requires &yui;. Add this near the end of the page, but before the call to
                    <link linkend="jcl_fx_yuisetup">fx:yuiSetup</link>.
                </para>

                <section xml:id="jcl_fx_linearize_fxvalue_inputs_synopsis">
                    <title>Synopsis</title>
                    <programlisting language="xhtml"><![CDATA[<fx:linearizeFxValueInputs [startIndex="index"] [rootNode="nodeId"]/>
]]></programlisting>
                </section>

                <section xml:id="jcl_fx_linearize_fxvalue_inputs_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>startIndex</term>
                            <listitem>
                                <para>
                                    The first tab-index to be used (default: 1).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>rootNode</term>
                            <listitem>
                                <para>
                                    An optional root DOM node ID where the search for fx:fxValueInput elements
                                    should start (default: the entire document will be searched).
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

            </section>

        </section>

        <section xml:id="jcl_search">
            <!--
                TODO: result datatable example when the search query tutorial is done
            -->
        </section>

        <section xml:id="jcl_navigation">
            <title>
                Navigation components
            </title>

            <para>
                &Flexive; offers a powerful way for mapping web page navigation structures
                through its
                <link linkend="core_tree">tree engine</link>.
                <!-- TODO: link to a tutorial with a "tree-backed" web page -->
                The components in this section allow rendering of (parts of) the
                tree in HTML, e.g. web page menus or trees.
            </para>

            <section xml:id="jcl_fx_navigation">
                <title>
                    <code language="xhtml">&lt;fx:navigation></code>
                </title>

                <para>
                    Renders part of the content tree as nested
                    <code>&lt;ul></code>
                    elements. These can be styled via CSS to resemble menus or even pop-up menus, or enhanced with
                    JavaScript using YahooUI components.
                </para>


                <section xml:id="jcl_fx_navigation_synopsis">
                    <title>Synopsis</title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:navigation var="varname" [output="default|csspopup|yui"] [path="/treepath"] [mode="live|edit"] [depth="int"] [selectedNodeId="nodeId"]
               [baseTypeId="id"] [baseTypeName="typename"] [includeRoot="true|false"] [includeFolders="true|false"]>
    <f:facet name="item">
        <ui:fragment>
            <a href="/content/#{node.id}">#{node.label}</a>
        </ui:fragment>
    </f:facet>
</fx:navigation>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_navigation_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>var</term>
                            <listitem>
                                <para>
                                    The variable name where the current tree node of type
                                    <link xlink:href="&flexiveJavadocBase;shared/com/flexive/shared/tree/FxTreeNode.html">
                                        FxTreeNode
                                    </link>
                                    will be exposed to the page.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>output</term>
                            <listitem>
                                <para>
                                    The output format.
                                    <variablelist>
                                        <varlistentry>
                                            <term>default</term>
                                            <listitem>
                                                <para>Plain HTML output.</para>
                                            </listitem>
                                        </varlistentry>
                                        <varlistentry>
                                            <term>csspopup</term>
                                            <listitem>
                                                <para>
                                                    Renders additional CSS classes that will show only
                                                    the first tree level and open the subfolders when the
                                                    mouse hovers over them.
                                                </para>
                                            </listitem>
                                        </varlistentry>
                                        <varlistentry>
                                            <term>yui</term>
                                            <listitem>
                                                <para>
                                                    Renders additional markup that allows the Yahoo UI
                                                    Menu component to build a menu. If JavaScript is disabled,
                                                    the plain HTML markup is shown to the use.
                                                    Note that you have to include YUI on the page with
                                                    <link linkend="jcl_fx_includes">&lt;fx:includes></link>.
                                                </para>
                                            </listitem>
                                        </varlistentry>
                                    </variablelist>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>path</term>
                            <listitem>
                                <para>
                                    The tree folder to be rendered. If none is specified, the root folder
                                    ("/") is rendered.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>mode</term>
                            <listitem>
                                <para>
                                    The tree mode, "edit" or "live" (default).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>depth</term>
                            <listitem>
                                <para>
                                    The maximum tree depth for sub folders. For example, a value of 2 will render
                                    content of the given tree path and the first level of subfolders.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>selectedNodeId</term>
                            <listitem>
                                <para>
                                    If specified, the given tree node ID will be highlighted in the HTML output.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>baseTypeId/baseTypeName</term>
                            <listitem>
                                <para>
                                    An optional type filter for the rendered nodes. Only nodes whose reference
                                    is of the given type (or a subtype of the given type) are rendered.
                                </para>
                                <para>
                                    When a non-folder base type is specified, folders are (by default) not
                                    rendered in the response. You can override this by setting the
                                    <code>includeFolders</code>
                                    attribute.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>includeFolders</term>
                            <listitem>
                                <para>
                                    When
                                    <code>baseTypeId/baseTypeName</code>
                                    is set, setting this attribute to "true" will include folders
                                    and their contents in the output even if the specified base type
                                    is not a folder.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>includeRoot</term>
                            <listitem>
                                <para>
                                    When set to true, the root node of the rendered (sub-)tree is
                                    included in the output. (default: false)
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_navigation_ex">
                    <title>Examples</title>

                    <example xml:id="jcl_fx_navigation_ex_text">
                        <title>A JSF/HTML navigation that selects the clicked node</title>
                        <para>
                            <programlisting language="xhtml"><![CDATA[<fx:navigation var="node" path="/" depth="5" selectedNodeId="#{navigationBean.selectedNodeId}">
    <f:facet name="item">
        <h:commandLink>
            <f:setPropertyActionListener value="#{node.id}" target="#{navigationBean.selectedNodeId}"/>
            #{node.label}
        </h:commandLink>
    </f:facet>
</fx:navigation>
]]></programlisting>
                            The JSF backing bean stores the selected node ID and will be updated through
                            the commandLink.

                            <programlisting language="java"><![CDATA[public class NavigationBean {
    private long selectedNodeId;

    public long getSelectedNodeId() {
        return selectedNodeId;
    }

    public void setSelectedNodeId(long selectedNodeId) {
        this.selectedNodeId = selectedNodeId;
    }
}]]></programlisting>
                        </para>
                    </example>
                </section>
            </section>

        </section>


        <section xml:id="jcl_framework">
            <title>
                Framework components
            </title>

            <section xml:id="jcl_fx_includes">
                <title>
                    <code language="xhtml">&lt;fx:includes></code>
                </title>

                <para>
                    Includes external resources (CSS and JavaScripts) used by &flexive; components. Place this in the
                    <code language="xhtml">&lt;head></code>
                    section of your HTML page.
                </para>

                <section xml:id="jcl_fx_includes_synopsis">
                    <title>Synopsis</title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:includes [all="true|false"] [htmlEditor="true|false"] [jsonRpc="true|false"] [yui="true|false"]/>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_includes_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>all</term>
                            <listitem>
                                <para>
                                    If true, includes all resources supported by the tag. This leads to a
                                    performance penalty for loading and initializing the Javascript
                                    libraries, but is more convenient if performance is not critical.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>htmlEditor</term>
                            <listitem>
                                <para>
                                    If true, the HTML editor (currently TinyMCE) will be loaded and
                                    initialized. Since TinyMCE must be initialized in the
                                    <code language="xhtml">&lt;head></code>
                                    section, unfortunately you have to set this attribute manually
                                    when a
                                    <code language="xhtml">&lt;fx:fxValueInput></code>
                                    component is used for a HTML property.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>htmlEditorConfig</term>
                            <listitem>
                                <para>
                                    The name of a TinyMCE configuration in
                                    <code>flexive.input.htmlEditorConfigs</code>.
                                    Possible values:
                                    <code>default-basic</code>
                                    (the default setting),
                                    <code>default-full</code>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>jsonRpc</term>
                            <listitem>
                                <para>
                                    Includes the &jsonRpcJava; library for Ajax calls via
                                    JSON/RPC (the Javascript proxy can then be obtained with
                                    <code language="javascript">flexive.yui.getJsonRpc()</code>).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>yui</term>
                            <listitem>
                                <para>
                                    Includes the &yui; bootstrap library. If you want to use Yahoo UI components,
                                    you also have to include a call to
                                    <link linkend="jcl_fx_yuisetup">&lt;fx:yuiSetup/></link>
                                    near the end of your page. You also have to specify the skin class on your page, the
                                    most convenient way is through the body tag, e.g.:
                                    <code>&lt;body class="yui-skin-sam"&gt;</code>.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>

                    <para>
                        Note that you can include the
                        <code language="xhtml">&lt;fx:includes></code>
                        tag more than once. This is useful if a component (e.g. the HTML editor)
                        is only needed on some pages and
                        <code language="xhtml">&lt;fx:includes></code>
                        is already included in the main page template.
                    </para>

                </section>

            </section>

            <section xml:id="jcl_fx_yuisetup">
                <title>
                    <code language="xhtml">&lt;fx:yuiSetup></code>
                </title>

                <para>
                    Initializes the &yui; widgets on the current page and loads all required libraries.
                    Note that you still have to initialize the YUI bootstrap loader using
                    <link linkend="jcl_fx_includes">&lt;fx:includes yui="true"></link>.
                </para>

                <para>
                    When using &yui; you have to specify the skin class on your page, the most convenient way
                    is through the body tag, e.g.:
                    <code>&lt;body class="yui-skin-sam"&gt;</code>.
                </para>

                <section xml:id="jcl_fx_yuisetup_synopsis">
                    <title>Synopsis</title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:yuiSetup/>
]]></programlisting>
                    </para>
                </section>

            </section>
        </section>

        <section xml:id="jcl_forms">
            <title>
                Form utility components
            </title>


            <section xml:id="jcl_fx_formrow">
                <title>
                    <code language="xhtml">&lt;fx:formRow></code>
                </title>

                <para>
                    Renders a row container for a single input field
                    and renders a label for the input element. The input field(s) are stored in the tag body.
                    You can set a CSS-based tooltip using the tooltipKey attribute, or use labelKey and
                    append ".tooltip" to the base message key (e.g.
                    <code>message.key</code>
                    and
                    <code>message.key.tooltip</code>).
                </para>

                <section xml:id="jcl_fx_formrow_synopsis">
                    <title>Synopsis</title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:formRow id="inputid" [label="label"] [labelKey="messagekey"] [newLine="true|false"] [width="widthInPx"] [height="heightInPx"]>
    [input element]
</fx:formRow>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_formrow_parameters">
                    <title>Parameters</title>
                    <variablelist>
                        <varlistentry>
                            <term>id</term>
                            <listitem>
                                <para>
                                    The client ID of the input element contained in the body.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>label</term>
                            <listitem>
                                <para>
                                    The input element label.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>tooltip</term>
                            <listitem>
                                <para>
                                    The input label tooltip.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>labelKey</term>
                            <listitem>
                                <para>
                                    The input element label key (overrides label).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>tooltipKey</term>
                            <listitem>
                                <para>
                                    Message key of the tooltip (overrides tooltip, if not specified and labelKey is set,
                                    it defaults to<code language="jsfel">#{labelKey}.tooltip</code>)
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>newLine</term>
                            <listitem>
                                <para>
                                    Specifies whether a newline should be rendered after the input row (default: true).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>width</term>
                            <listitem>
                                <para>
                                    Sets a fixed width on the row div (in pixels).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>height</term>
                            <listitem>
                                <para>
                                    Sets a fixed height on the row div (in pixels).
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_formrow_ex">
                    <title>Examples</title>

                    <example xml:id="jcl_fx_formrow_ex_text">
                        <title>
                            Rendering a plain text input row
                        </title>
                        <xi:include href="listings/jsfsupport_formrow_text.xml"/>
                    </example>
                </section>
            </section>

            <section xml:id="jcl_fx_fieldset">
                <title>
                    <code language="xhtml">&lt;fx:fieldSet></code>
                </title>

                <para>
                    Renders a HTML fieldset container for a group of formRow elements.
                </para>

                <section xml:id="jcl_fx_fieldset_synopsis">
                    <title>
                        Synopsis
                    </title>
                    <para>
                        <programlisting language="xhtml"><![CDATA[<fx:fieldSet [(legend="legend" | legendKey="legendKey")] [width="widthInPx"]>
...
</fx:fieldSet>
]]></programlisting>
                    </para>
                </section>

                <section xml:id="jcl_fx_fieldset_parameters">
                    <title>
                        Parameters
                    </title>
                    <variablelist>
                        <varlistentry>
                            <term>legend</term>
                            <listitem>
                                <para>
                                    The legend to be displayed in the fieldset header.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>legendKey</term>
                            <listitem>
                                <para>
                                    The message key of the localized message for the legend (overrides legend).
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>width</term>
                            <listitem>
                                <para>
                                    An optional attribute to specify a fixed width in pixels.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>

                <section xml:id="jcl_fx_fieldset_ex">
                    <title>
                        Examples
                    </title>

                    <example xml:id="jcl_fx_fieldset_ex_text">
                        <title>
                            A fieldset with two formrow elements
                        </title>
                        <xi:include href="listings/jsfsupport_fieldset_text.xml"/>
                    </example>
                </section>
            </section>
        </section>

        <section xml:id="jcl_beans">
            <title>
                JSF managed beans
            </title>

            <para>
                &Flexive; provides a set of JSF managed beans for working with &flexive; in JSF
                applications. Some of them are usually used only in administration pages, some will probably be used
                in every &flexive; application. For a complete reference consult the
                &flexiveJavadoc;.
            </para>

            <section xml:id="jcl_fx_content_view_bean">
                <title>&contentViewBean;</title>
                <para>
                    The &contentViewBean; provides a basic wrapper for the EJB content engine.
                    It is used to create and update instances, usually provided by the
                    <link linkend="jcl_fx_content">
                        <code language="xhtml">&lt;fx:content></code>
                    </link>
                    component.
                </para>

                <section xml:id="jcl_fx_content_view_bean_save">
                    <title>Saving content</title>

                    <para>
                        To save a FxContent instance, you have to set the
                        <code>content</code>
                        property
                        of &contentViewBean;. Usually this is done with a JSF setPropertyActionListener,
                        take a look at
                        <xref linkend="jcl_fx_content_ex_edit"/>.
                    </para>

                    <para>
                        You can also specify an optional success message that will be added
                        to the current JSF context after the content has been saved, using the
                        <code>successMessage</code>
                        property of &contentViewBean;.
                    </para>

                    <para>
                        When a content instance is created or saved, &contentViewBean; stores the
                        primary key in the request, which can be used for URI rewriting
                        as demonstrated in
                        <xref linkend="jcl_uri_rewriting"/>.
                    </para>
                </section>

                <section xml:id="jcl_fx_content_view_bean_addelements">
                    <title>Adding empty values to a content instance</title>

                    <para>
                        You can also add empty values to an existing content instance. This
                        is especially useful for adding empty group elements for generic
                        editors, as demonstrated in
                        <xref linkend="jcl_fx_content_ex_addgroups"/>.
                    </para>
                </section>
            </section>

            <section xml:id="jcl_fx_authentication_bean">
                <title>&authenticationBean;</title>
                <para>
                    The &authenticationBean; provides a simple wrapper for signing users
                    on and off using &flexive; security.
                </para>
                <para>
                    To create a login form, you have to
                    <itemizedlist>
                        <listitem>
                            <para>
                                bind form inputs to the
                                <code>username</code>
                                and
                                <code>password</code>
                                properties
                                of &authenticationBean;,
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                add a JSF commandButton or commandLink that invokes the
                                <code>&authenticationBean;.login</code>
                                action, and
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                add a navigation case for the
                                <code>loginSuccess</code>
                                result.
                                If login fails,
                                <code>login</code>
                                is returned instead.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                If desired, a checkbox mapped to the
                                <code>takeover</code>
                                property can be added to the login form.
                                It has to be checked, if other clients are logged in using the same credentials
                                (they will be logged out), otherwise logging in will fail, if the account does not
                                support
                                concurrent logins.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    A logout link calls the
                    <code>&authenticationBean;.logout</code>
                    action method. The logout method returns
                    <code>login</code>
                    as a result.
                    Logging out always succeeds (except for internal errors), so no other navigation
                    case is necessary.
                    Be sure to perform a redirect on the navigation target since the HTTP session
                    is invalidated on logout (otherwise you may get
                    "<computeroutput>Session already invalidated</computeroutput>"
                    errors). For example:

                    <programlisting language="xml"><![CDATA[<navigation-case>
    <from-outcome>login</from-outcome>
    <to-view-id>/pub/login.xhtml</to-view-id>
    <redirect/>
</navigation-case>
]]></programlisting>
                </para>

            </section>

            <section xml:id="jcl_fx_message_bean">
                <title>&messageBean;</title>
                <para>
                    The &messageBean; is an application-scoped bean that provides a localized message lookup service for
                    JSF. Instead of a single resource bundle as provided by JSF's loadBundle, the &messageBean;
                    provides centralized access to the messages of all &flexive; applications
                    and plugins available in the current context.
                </para>

                <section xml:id="jcl_fx_message_bean_usage">
                    <title>Looking up messages</title>
                    <para>
                        The &messageBean; implements the map interface and returns localized
                        messages for resource keys. For example,
                        <code language="jsfel">#{&messageBean;['Global.welcome']}</code>
                        returns the message defined for the key
                        <code>Global.welcome</code>
                        for the current user's locale.
                    </para>
                    <para>
                        Message texts can include positional arguments that will be replaced
                        when the message is rendered. You can add a comma-separated
                        list of literal replacements or JSF-EL expressions to the resource key.
                        For example, the message
                        <code>Global.welcome=Welcome, {0}</code>
                        could be formatted using
                        <code language="jsfel">#{&messageBean;['Global.welcome,#{myBean.userName}']}</code>.
                    </para>
                </section>

                <section xml:id="jcl_fx_message_bean_files">
                    <title>Providing messages for applications and plugins</title>
                    <para>
                        &Flexive; relies on fixed filenames for application and plugin messages.
                        If you place a file with the given name in your application or plugin package,
                        it will be automatically detected on startup by the &messageBean; and
                        will be available to all clients.
                    </para>
                    <para>
                        The &flexive; resource bundle base names are:
                        <variablelist>
                            <varlistentry>
                                <term>ApplicationMessages</term>
                                <listitem>
                                    <para>
                                        For applications like the &backendGui;, for example
                                        <filename>ApplicationMessages.properties</filename>
                                        or
                                        <filename>ApplicationMessages_de.properties</filename>.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term>PluginMessages</term>
                                <listitem>
                                    <para>
                                        For plugin packages, for example
                                        <filename>PluginMessages.properties</filename>
                                        or
                                        <filename>PluginMessages_de.properties</filename>.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </section>
            </section>
        </section>

        <section xml:id="jcl_classpath_resources">
            <title>Delivering XHTML pages from the classpath</title>
            <para>
                &Flexive; includes a classpath resource resolver for Facelets that allows any
                Facelets resources (especially XHTML pages) to be included directly from JAR files
                in the classpath, instead of storing them in a web application archive (WAR).
            </para>
            <para>
                The classpath resource resolver is declared in the &flexive; components'
                <filename>faces-config.xml</filename>,
                so no further steps are necessary for enabling it. The classpath resolver acts
                as a fallback for the common Facelets resource resolver, i.e. if a resource
                cannot be found using the default Facelets lookup, it attempts to load the same
                path using the context class loader.
            </para>
            <para>
                For example, if you store
                <filename>/mywebdir/mypage.xhtml</filename>
                in one of your JAR files, you can reference it just with this path in any of your
                JSF config files, like the
                <filename>faces-config.xml</filename>.
                It will then be delivered directly from your JAR file.
            </para>
        </section>

        <section xml:id="jcl_uri_rewriting">
            <title>URI rewriting for contents</title>
            <para>
                TODO
                <!-- TODO describe the ContentURIRoute infrastructure -->
            </para>
        </section>

    </section>

    <section xml:id="reusable_components">
        <title>Writing reusable &flexive; components
        </title>
        <para>
            While &flexive; builds on existing &jee5; infrastructure,
            it integrates additional services that make writing components for &flexive; applications even easier.
            <itemizedlist>
                <listitem>
                    <para>
                        Full EJB3 support in your applications and plugins, you can use existing EJBs or create new
                        ones,
                        and call your EJBs from &flexive; via scripting.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Easy integration of JSF components and beans through JSF infrastructure, i.e.
                        using a packaged
                        <filename>faces-config.xml</filename>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Serve Facelets templates directly from the JAR archive or any other location
                        in the classpath.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        &weblets; can be used for serving content that is not handled
                        by Facelets, like additional JavaScript files or stylesheets.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        A compact plugin system allows to extend the &backendGui; and
                        make your own application or plugin extensible in a typesafe manner.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Setup your plugin or application using startup scripts that have
                        full access to the &flexiveApi;.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <section xml:id="components_jsf">
            <title>JSF components</title>

            <para>
                JSF components provide a simple and powerful way of providing additional functionality
                to existing applications, for example a forum or comment section.
                A component packages all Java code and web resources into a single JAR file that can
                be dropped into the
                <filename>lib/</filename>
                directory of an existing
                <filename>flexive.ear</filename>
                file. After the next &flexive; startup it is available to all applications contained
                in the &flexive; archive.
            </para>

            <section xml:id="components_jsf_building">
                <title>Build file support</title>

                <para>
                    The &flexive; distribution contains a build target to create the directory structure
                    of a standalone component, including a build file to compile and package the component.
                </para>

                <para>
                    To create a new component, open the command shell and go to the directory containing
                    the &flexive; distribution. Execute
                    <command>ant</command>. You are greeted by the welcome screen of the flexive
                    build tool. Enter
                    <userinput>component.create</userinput>
                    as the target name and supply the name of your component (e.g.
                    <code>test</code>).
                    When you confirm the input, a new component directory layout is initialized in
                    the distribution's parent directory, in this case in
                    <filename>../test</filename>. Your screen should look approximately like this:
                    <screen><![CDATA[
Buildfile: build.xml

info:
  [flexive]
  [flexive] Welcome to the flexive build tool. Feel free to use the following build targets:
  [flexive]
  [flexive] project.create
  [flexive]     Creates a new flexive project directory.
  [flexive]
  [flexive] component.create
  [flexive]     Creates a new flexive UI component directory.
  [flexive]
  [flexive] db.create
  [flexive]         Create or reset the database schema of a flexive division.
  [flexive]         Warning: if the schema already exists, it will be dropped (i.e. you will lose all data
  [flexive]         stored in the schema).
  [flexive]
  [flexive] db.config.create
  [flexive]         Create or reset the global flexive configuration schema.
  [flexive]
    [input] Please enter a target name, or quit to exit:
]]><userinput>component.create</userinput><![CDATA[

check:

component.create:
    [input] Name of the component you want to create:
]]><userinput>test</userinput><![CDATA[
  [flexive]
  [flexive] Please confirm your input:
  [flexive] Component name:      test
  [flexive] Base directory:      ../test
  [flexive]
    [input] Are these settings correct? ([y], n)
]]><userinput>y</userinput><![CDATA[
    [mkdir] Created dir: /tmp/test
     [copy] Copying 8 files to /tmp/test
     [copy] Copied 13 empty directories to 6 empty directories under /tmp/test
     [copy] Copying 1 file to /tmp/test
     [echo] Component test created successfully. The component root directory is
     [echo] ../test
]]>
                    </screen>
                </para>
                <para>
                    Change to your component directory in
                    <filename>../test</filename>. The directory structure is similar to a &flexive;
                    project, the main difference is that there is only one source folder since all
                    classes will be packaged into one JAR file.
                    <screen><![CDATA[.
|-- build.xml
|-- resources
|   |-- META-INF
|   |   |-- faces-config.xml
|   |   |-- flexive-plugins-config.xml
|   |   `-- weblets-config.xml
|   |-- messages
|   |-- scripts
|   |   |-- library
|   |   |-- runonce
|   |   `-- startup
|   |-- templates
|   `-- weblets
|-- src
|   `-- java
`-- web]]></screen>

                    <variablelist>
                        <varlistentry>
                            <term>
                                <filename>src/java</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the Java sources of the component.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>web</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the web documents of the component, e.g. configuration screens
                                    for the component.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>resources/META-INF</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the component's configuration files for JSF,
                                    the &flexive; plugin descriptor, and the Weblets
                                    configuration.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>resources/messages</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the component's localized message resources that can
                                    be accessed with the &messageBean;.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>resources/scripts</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the run-once, startup and library scripts of the component.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>resources/weblets</filename>
                            </term>
                            <listitem>
                                <para>
                                    contains the &weblets; that serve resources like images or stylesheets
                                    directly from you component JAR file.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>resources/templates</filename>
                            </term>
                            <listitem>
                                <para>
                                    is the standard folder for Facelets templates. You can choose any
                                    folder of course if you like, but then you'd have to modify the
                                    build script.
                                </para>
                            </listitem>
                        </varlistentry>

                    </variablelist>
                </para>
                <para>To check if your build environment is working, execute
                    <command>ant</command>
                    in the component's base directory.
                    An (empty) component JAR file should now be created in
                    <filename>dist/test.jar</filename>. You can open the component in your favourite IDE now
                    and start adding classes, templates and web pages. If you move the component directory
                    to another directory (e.g. to maintain components in a larger &flexive; project)
                    be sure to modify the path to the &flexive; distribution in
                    <filename>build.xml</filename>.
                </para>
            </section>

            <section>
                <title>Deployment</title>
                <para>
                    To deploy the component, you have to make it available to the &flexive; application's classpath.
                    The easiest way to do this is to add the JAR file to the
                    <filename>lib/</filename>
                    folder of your
                    <filename>flexive.ear</filename>
                    file.
                </para>
                <para>
                    If you want to add it to your own &flexive; project created by the
                    build tool, you can copy it to the project's
                    <filename>lib/</filename>
                    directory. When you build the EAR file, it will be added to the archive's
                    <filename>lib/</filename>
                    folder and will be automatically deployed when &flexive; starts up.
                </para>
            </section>

            <section xml:id="components_jsf_package">
                <title>Packaging</title>

                <para>
                    A JSF component is a JAR file that may contain the following elements:
                    <variablelist>
                        <varlistentry>
                            <term>
                                <filename>META-INF/faces-config.xml</filename>
                            </term>
                            <listitem>
                                <para>
                                    Registers JSF beans, components, validators, and navigation rules.
                                    Note that you can reference XHTML pages from within your JAR file
                                    thanks to the classpath resource resolver as described in
                                    <xref linkend="jcl_classpath_resources"/>.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>META-INF/*.taglib.xml</filename>
                            </term>
                            <listitem>
                                <para>
                                    Register your own Facelets templates. The templates are stored directly
                                    in the JAR file and are referenced relative to the META-INF directory.
                                    For example, consider the following JAR contents:
                                    <programlisting><![CDATA[./META-INF/mycomponents.taglib.xml
./templates/button.xhtml
]]></programlisting>
                                    To register your button tag, the
                                    <filename>mycomponents.taglib.xml</filename>
                                    might look like the following:
                                    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE facelet-taglib PUBLIC
        "-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"
        "http://java.sun.com/dtd/facelet-taglib_1_0.dtd">

<facelet-taglib>
    <namespace>http://www.mycompany.com/jsf/components</namespace>

    <tag>
        <tag-name>button</tag-name>
        <source>../templates/button.xhtml</source>
    </tag>
</facelet-taglib>
]]></programlisting>
                                    Facelets scans the classpath for
                                    <filename>*.taglib.xml</filename>
                                    files and will automatically provide the
                                    registered templates and components under the given namespace.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>META-INF/flexive-plugins-config.xml</filename>
                            </term>
                            <listitem>
                                <para>
                                    Defines &flexive; JSF plugins, as described in
                                    <xref linkend="jsf_plugin_api"/>.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <filename>META-INF/weblets-config.xml</filename>
                            </term>
                            <listitem>
                                <para>
                                    Contains the &weblets; configuration if you want to deliver
                                    additional web resources like images or stylesheets. The weblets resources
                                    are stored in the JAR file like Facelets templates, but their base directory
                                    may be any package in the JAR file. For example, the following config file
                                    sets the weblets root directory of the &flexive; components package to
                                    <package>com/flexive/faces/weblets</package>
                                    and registers the weblet
                                    provider for the URI
                                    <uri>/flexive-web-resources/</uri>:

                                    <programlisting language="xml">
                                        <xi:include
                                                href="../../src/ui/jsf-components/resources/META-INF/weblets-config.xml"
                                                parse="text"/>
                                    </programlisting>

                                    If you attach
                                    <code>-SNAPSHOT</code>
                                    to the
                                    <code>weblet-version</code>
                                    number, you can disable browser caching for development builds. Otherwise
                                    Weblets will add caching information and you have to change the
                                    version number to ensure that all clients will use the most recent version.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>

            </section>
        </section>

        <section xml:id="components_ejb">
            <title>EJB components</title>

            <para>
                EJB3 components can be packaged in any JAR file and should be deployed automatically
                if included in the
                <filename>flexive.ear</filename>
                file. At the time of this writing, this mechanism was not working in current versions
                of Glassfish and JBoss unless you included an explicit
                <filename>ejb-ref.xml</filename>,
                so you have to add an explicit reference to the EJB JAR file in
                <filename>flexive.ear!/META-INF/application.xml</filename>
                if you use only EJB3 annotations.
                When you develop &flexive; applications as described in
                <xref linkend="writing_applications"/>,
                this is done automatically by the &flexive; build system.
            </para>
            <para>
                For further information on EJB packaging rules please refer to
                <biblioref linkend="bib_packagingejb3"/>,
                which is also a chapter in the great
                <biblioref linkend="bib_ejb3inaction"/>.
            </para>
        </section>

    </section>

    <section xml:id="jsf_plugin_api">
        <title>The JSF plugin API</title>
        <para>
            One of the main JSF features is its component-centric design. It allows developers
            to create component packages as JAR files that can be deployed in existing applications with
            little or no additional configuration. Prominent examples in the free software world are
            <link xlink:href="http://myfaces.apache.org/tomahawk/">MyFaces Tomahawk</link>,
            <link xlink:href="http://www.icefaces.org">ICEfaces</link>,
            or
            <link xlink:href="http://labs.jboss.com/jbossrichfaces/">JBoss RichFaces</link>.
        </para>
        <para>
            &Flexive; encourages the use of all JSF and Facelets features for writing reusable components,
            and adds its own plugin API to the mix for modifying existing &flexive; applications, most
            notably the &backendGui;. For example, a plugin developer may extend main menu entries,
            add new buttons or create whole new administration areas inside the &backendGui;.
        </para>
        <para>
            Currently the plugin API is only available in the JSF layer, although it is
            not specifically tied to JSF. It is a pure Java solution that may be used for
            adding plugins to any Java application, it's just that inside &flexive; most
            sensible extension points for plugins are in the JSF layer.
        </para>
        <para>
            The plugin API chapter covers only a small set of features needed for extending
            &flexive;, for information on writing reusable components see
            <xref linkend="reusable_components"/>.
        </para>

        <section xml:id="jpa_overview">
            <title>Overview</title>
            <para>
                The plugin API is based on three core interfaces and a JSF managed bean:

                <itemizedlist>
                    <listitem>
                        <para>
                            An
                            <glossterm>
                                <firstterm>extension point</firstterm>
                            </glossterm>
                            defines a "code point" where existing Java code can be extended.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Extension points are parameterized with a concrete sub-interface of a
                            <glossterm>
                                <firstterm>plugin executor</firstterm>
                            </glossterm>
                            .
                            A plugin executor interface exposes the methods which plugins may
                            call to modify application behaviour. For example, a plugin executor
                            for a tree may specify methods for adding or removing tree nodes.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A
                            <glossterm>
                                <firstterm>plugin</firstterm>
                            </glossterm>
                            implements an
                            interface which is parameterized with the type of an
                            <glossterm>extension point</glossterm>,
                            which in turn is parameterized with a
                            <glossterm>plugin executor</glossterm>
                            interface which will be used by the plugin.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The &pluginRegistryBean; acts as a global plugin registry for
                            the application. Plugins can be registered at application startup using
                            the PluginFactory interface.
                        </para>
                    </listitem>
                </itemizedlist>

                Extension points and plugin executors are provided by the application developer,
                the plugin developer only needs to implement a properly parameterized interface.
            </para>
        </section>

        <example xml:id="jpa_example_app">
            <title>Making a &flexive; application extensible
            </title>

            <para>
                The intent of the next two examples is to create an extension point which can handle arbitrary
                plugins attached to it, and then write a plugin for it. The first part is
                the responsibility of the original application developer, the second one applies
                to any plugin developer for that application.
            </para>

            <para>
                The first step for the application developer is to create a
                <interfacename>PluginExecutor</interfacename>
                interface that defines the methods available to plugins.
                In this example, we want to accumulate numbers generated by plugins.
                We define the following interface:
                <programlisting language="java"><![CDATA[public interface TestExecutor extends PluginExecutor {
    void pushResult(int result);
}
]]></programlisting>
                The executor takes a result (generated by the plugin), and stores it in an
                internal data structure. Why do we specify an interface instead
                of a concrete implementation class? The actual plugin executor implementation depends
                on the code being extended, and may contain private classes that are not
                (or should not be) visible to the plugin developer. Also, sometimes it is convenient to
                implement the executor as an anonymous inner class that has access to the
                surrounding method's variables, without publishing the actual implementation
                to somebody else.
            </para>

            <para>
                Next we declare an extension point, for example in a public shared class:
                <programlisting language="java"><![CDATA[public static final ExtensionPoint<TestExecutor> EXTENSIONPOINT =
        new ExtensionPoint<TestExecutor>("ourapp.extensionpoint") { };
]]></programlisting>
                We bind the extension point to our executor interface, and specify a unique identifier
                (<literal>ourapp.extensionpoint</literal>).
                When a plugin developer does not want to or cannot reference the
                <constant>EXTENSIONPOINT</constant>
                constant in his code, he can create a new extension point with the same identifier (and the same
                executor interface).
            </para>

            <para>
                Finally we create the executor implementation:
                <xi:include href="listings/jsfsupport_plugin_executor.xml"/>
                The class implements the
                <interfacename>TestExecutor</interfacename>
                interface, and adds an implementation-specific method to obtain the results. The executor
                implementation does not have to be visible to the client, but its interface has to.
            </para>

            <para>
                Extending our application is the last step. We instantiate a new executor, and
                ask the &pluginRegistryBean; to execute all registered plugins. Then we collect
                the result and show it to the user.
                <xi:include href="listings/jsfsupport_plugin_app.xml"/>
                Take a look at the next example to see how to write a plugin for our application.
            </para>
        </example>

        <example xml:id="jpa_example_client">
            <title>Writing a plugin for a &flexive; application
            </title>

            <para>
                Now that our application supports plugins as described in
                <link linkend="jpa_example_app">the previous example</link>, we'll show how to write a plugin
                for it. Remember that the executor interface allows us to send numbers to
                the application. We'll create a very simple plugin that always sends
                the number 42.
                <xi:include href="listings/jsfsupport_plugin_pluginimpl.xml"/>
                The executor is passed to the plugin, which then calls the method defined in the
                executor's interface.
            </para>

            <para>
                If we're distributing the plugin as (part of) a &flexive; component,
                we can add a
                <interfacename>PluginFactory</interfacename>
                to register the plugin during &flexive; startup.
                <xi:include href="listings/jsfsupport_plugin_factory.xml"/>
                Finally we register the factory with its fully qualified classname as shown in
                <xref linkend="jpa_pluginconfig"/>.
            </para>

        </example>

        <section xml:id="jpa_registry">
            <title>The plugin registry</title>
            <para>
                The &pluginRegistryBean; is an application-scoped JSF bean that acts as a central
                registry for all &flexive; plugins. It is initialized on application startup and
                scans the classpath for available plugins. An application can retrieve a list
                of registered plugins for a extension point or execute a plugin executor
                on all plugins of an extension point.
            </para>

            <section xml:id="jpa_registry_register">
                <title>Registering plugins at extension points</title>
                <para>
                    The plugin registry has a
                    <code>registerPlugin</code>
                    method for registering
                    plugins at extension points. You can call this method at any time, for example
                    from the constructor of an application-scoped JSF bean, or use the
                    <interfacename>PluginFactory</interfacename>
                    interface to be called by &flexive; on startup.
                </para>
                <para>
                    To register your plugin automatically during the startup of &flexive;, you have to
                    <orderedlist>
                        <listitem>
                            <para>
                                implement the
                                <interfacename>PluginFactory</interfacename>
                                interface,
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                set the factory name in
                                <filename>META-INF/flexive-plugins-config.xml</filename>
                                of your package, and
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                register your plugins in the
                                <interfacename>PluginFactory</interfacename>'s
                                <methodname>initialize</methodname>
                                method.
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
                <para>
                    The
                    <interfacename>PluginFactory</interfacename>
                    specifies a simple callback
                    interface that lets you register plugins with a
                    <classname>&pluginRegistryBean;</classname>. You have to specify the fully
                    qualified classname of your implementation in a file called
                    <filename>META-INF/flexive-plugins-config.xml</filename>,
                    for example:
                    <example xml:id="jpa_pluginconfig">
                        <title>Specifying a
                            <interfacename>PluginFactory</interfacename>
                            in
                            <filename>flexive-plugins-config.xml</filename>
                        </title>
                        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<plugins-config xmlns="http://www.flexive.com/plugins-config">
    <plugin-factory>
        com.flexive.faces.plugin.DemoPluginFactory
    </plugin-factory>
</plugins-config>]]></programlisting>
                    </example>
                    For an example of a concrete
                    <interfacename>PluginFactory</interfacename>
                    implementation, refer to
                    <xref linkend="jpa_example_client"/>.
                </para>
            </section>
        </section>
    </section>


</chapter>
