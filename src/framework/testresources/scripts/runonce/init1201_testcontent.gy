/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2014
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/


import com.flexive.shared.CacheAdmin
import com.flexive.shared.EJBLookup
import com.flexive.shared.FxContext
import com.flexive.shared.FxLanguage
import com.flexive.shared.content.FxContent
import com.flexive.shared.content.FxPK
import com.flexive.shared.interfaces.ContentEngine
import com.flexive.shared.scripting.FxScriptBinding
import com.flexive.shared.scripting.groovy.GroovyContentBuilder
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder
import com.flexive.shared.search.query.SqlQueryBuilder
import com.flexive.shared.security.ACLCategory
import com.flexive.shared.security.Mandator
import com.flexive.shared.structure.*
import com.flexive.shared.value.*
import com.flexive.shared.workflow.Step
import com.flexive.shared.workflow.StepDefinition
import com.flexive.shared.workflow.Workflow

/**
 * Test fixture: content data
 *
 * @author Daniel Lichtenberger (daniel.lichtenberger@flexive.com), UCS - unique computing solutions gmbh (http://www.ucs.at)
 * @author Markus Plesser, UCS
 * @version $Rev$
 */

if (!FxContext.get().testDivision) {
    println "Not creating test fixture..."
    return
}
/*try {
  Class.forName("com.flexive.tests.shared.FxValueTest")
} catch (ClassNotFoundException e) {
  println "Testclasses are not found/packaged ... not creating test fixture ..."
  return
}*/

println "Creating test fixture - content..."

// create 25 folder instances with single-language caption and comment
25.times { i ->
    def FxContent co = EJBLookup.contentEngine.initialize(CacheAdmin.environment.getType("folder").id)
    co.setValue("/fqn", new FxString(false, "test fqn " + i))
    co.setValue("/caption", new FxString(true, "test caption " + i))
    co.setValue("/comment", new FxString("folder comment " + i))
    EJBLookup.contentEngine.save(co)
}

// create test type
EJBLookup.scriptingEngine.runScript("SearchTestType.gy", new FxScriptBinding())

long dummyACLId = EJBLookup.aclEngine.create("Dummy ACL", new FxString("Dummy ACL"), Mandator.MANDATOR_FLEXIVE, "#000000", "", ACLCategory.INSTANCE)

// create CMIS example types
new GroovyTypeBuilder().cmis_person {
    name()
    ssn()
    email(multiplicity: FxMultiplicity.MULT_0_N)
}
new GroovyTypeBuilder().cmis_person_data {
    ssn()   // used to join with cmis_person.ssn
    entryDate(dataType: FxDataType.Date)
    annualSalary(dataType: FxDataType.LargeNumber)
}
new GroovyTypeBuilder().cmis_audit_log {
    person(dataType: FxDataType.Reference,      // used to join with cmis_person.id
            referencedType: CacheAdmin.environment.getType("cmis_person"))
    date(dataType: FxDataType.DateTime)
    activity()
}
new GroovyTypeBuilder().cmis_multivalued {
    name()
    email(multiplicity: FxMultiplicity.MULT_0_N)
    date(dataType: FxDataType.Date, multiplicity: FxMultiplicity.MULT_0_N)
    dateTime(dataType: FxDataType.DateTime, multiplicity: FxMultiplicity.MULT_0_N)
}

// hierarchy for testing descendant types (B is subtype of A, C is subtype of B)
new GroovyTypeBuilder().cmis_type_A {
    astring()
}
new GroovyTypeBuilder().cmis_type_B(parentTypeName: "cmis_type_A") {
    bstring()
}
new GroovyTypeBuilder().cmis_type_C(parentTypeName: "cmis_type_B") {
    cstring()
}

// create test types with property permissions
new GroovyTypeBuilder().cmis_property_perm(usePropertyPermissions: false) {
    name()
    sensible()  // can read it in base type, protected in subtype
}
new GroovyTypeBuilder().cmis_property_perm_secured(parentTypeName: "cmis_property_perm", usePropertyPermissions: true) {
}
def securedEdit = CacheAdmin.environment.getAssignment("cmis_property_perm_secured/sensible").asEditable()
// secure assignment in derived type
def propAclId = EJBLookup.aclEngine.create("CMIS private property permission", new FxString("CMIS Property Perm"), Mandator.MANDATOR_FLEXIVE,
                               "000000", "", ACLCategory.STRUCTURE)
EJBLookup.assignmentEngine.save(securedEdit.setACL(CacheAdmin.environment.getACL(
    propAclId
)), false)


// create CMIS test data
def builder = new GroovyContentBuilder("CMIS_PERSON")
builder {
    name("Peter Bones")
    ssn("3721")
    email("peter.bones@gmail.com")
    email("peter.bones@myprov.net")
}
builder.getContent().setAclIds([dummyACLId, builder.getContent().getAclIds().get(0)])
def bones = builder.getContent().save()
def bonesPk = bones.pk
// to test version filtering in all queries, create a second (identical) version
EJBLookup.contentEngine.createNewVersion(bones)
builder = new GroovyContentBuilder("CMIS_PERSON")
builder {
    name("Sandra Locke")
    ssn("8392")
    email("sandra.locke@gmx.net")
}
def sandraPk = EJBLookup.contentEngine.save(builder.getContent())

// SSN 7294 has no match in CMIS_PERSON_DATA
builder = new GroovyContentBuilder("CMIS_PERSON")
builder {
    name("Alex Cervais")
    ssn("7294")
}
EJBLookup.contentEngine.save(builder.getContent())
builder = new GroovyContentBuilder("CMIS_PERSON")
builder {
    name("Martin Black")
    ssn("5241")
}
EJBLookup.contentEngine.save(builder.getContent())

builder = new GroovyContentBuilder("CMIS_PERSON_DATA")
builder {
    ssn("3721")
    entryDate(new FxDate(false, new Date(2008, 2, 10)))
    annualSalary(new FxLargeNumber(false, 50000))
}
EJBLookup.contentEngine.save(builder.getContent())
builder {
    ssn("8392")
    entryDate(new FxDate(false, new Date(2003, 5, 13)))
    annualSalary(new FxLargeNumber(false, 85000))
}
EJBLookup.contentEngine.createNewVersion(builder.getContent().save())
builder {
    ssn("5241")
    entryDate(new FxDate(false, new Date(2001, 3, 24)))
    annualSalary(new FxLargeNumber(false, 75000))
}
EJBLookup.contentEngine.save(builder.getContent())

builder = new GroovyContentBuilder("CMIS_AUDIT_LOG")
builder {
    person(new FxReference(false, new ReferencedContent(bonesPk)))
    date(new FxDateTime(false, new Date(new Date().getTime() - 3600L*1000)))
    activity("Logged in")
}
EJBLookup.contentEngine.save(builder.getContent())
builder {
    date(new FxDateTime(false, new Date(new Date().getTime() - 32L*60*1000)))
    activity("Logged out")
}
EJBLookup.contentEngine.save(builder.getContent())
builder {
    person(new FxReference(false, new ReferencedContent(sandraPk)))
    date(new FxDateTime(false, new Date(new Date().getTime() - 28*60*1000)))
    activity("Updated article #31.5")
}
EJBLookup.contentEngine.createNewVersion(builder.getContent().save())
builder {
    date(new FxDateTime(false, new Date(new Date().getTime() - 22*60*1000)))
    activity("Updated contact #912.1")
}
EJBLookup.contentEngine.save(builder.getContent())

// create some hierarchical data
EJBLookup.contentEngine.initialize("cmis_type_a").setValue("/astring", "A").save()
EJBLookup.contentEngine.initialize("cmis_type_b").setValue("/astring", "AB").setValue("/bstring", "B").save()
EJBLookup.contentEngine.initialize("cmis_type_c").setValue("/astring", "ABC").setValue("/bstring", "BC").setValue("/cstring", "C").save()

// create property permissions test data
EJBLookup.contentEngine.initialize("cmis_property_perm").setValue("/name", "Unprotected").setValue("/sensible", "Unprotected sensible").save()
EJBLookup.contentEngine.createNewVersion(
  EJBLookup.contentEngine.initialize("cmis_property_perm_secured").setValue("/name", "Protected").setValue("/sensible", "Protected sensible").save()
)

// create multivalued data
builder = new GroovyContentBuilder("CMIS_MULTIVALUED")
builder {
    name("Saturday Night Fever")
    date(new FxDate(false, new Date(new Date().getTime() - 14L*24*3600*1000)))
    date(new FxDate(false, new Date(new Date().getTime() - 7L*24*3600*1000)))
    date(new FxDate(false, new Date(new Date().getTime() + 7L*24*3600*1000)))
    dateTime(new FxDateTime(false, new Date(new Date().getTime() - 14L*24*3600*1000)))
    dateTime(new FxDateTime(false, new Date(new Date().getTime() - 7L*24*3600*1000)))
}
EJBLookup.contentEngine.createNewVersion(builder.getContent().save())
builder = new GroovyContentBuilder("CMIS_MULTIVALUED")
builder {
    name("Sunday Chillout")
    date(new FxDate(false, new Date(new Date().getTime() - 25L*24*3600*1000)))
    date(new FxDate(false, new Date(new Date().getTime() - 10L*24*3600*1000)))
    date(new FxDate(false, new Date(new Date().getTime())))
    dateTime(new FxDateTime(false, new Date(new Date().getTime() - 24L*24*3600*1000)))
    dateTime(new FxDateTime(false, new Date(new Date().getTime() - 11L*24*3600*1000)))
}
EJBLookup.contentEngine.save(builder.getContent())

//create test type + data

int instanceCount = 10

Date buildDate(int counter) {
    final Random random = new Random();
    return new Date(100 + counter, random.nextInt(12), random.nextInt(28), random.nextInt(24), random.nextInt(60), random.nextInt(60))
}

DateRange buildDateRange(int counter) {
    return new DateRange(buildDate(counter), buildDate(counter+1))
}

FxSelectListItem buildSelectOneSearchProp(int counter) {
    FxSelectList list = CacheAdmin.environment.getSelectList("SearchTest SelectList")
    return list.items[counter % list.items.size()]
}

SelectMany buildSelectManySearchProp(int counter) {
    FxSelectList list = CacheAdmin.environment.getSelectList("SearchTest SelectList")
    SelectMany sm = new SelectMany(list)
    // select up to 5 items
    5.times {
      sm.select(list.items[new Random().nextInt(list.items.size())].id)
    }
    return sm
}

ReferencedContent buildReference(int counter, List<FxPK> folderPks) {
    return new ReferencedContent(folderPks.get(counter % folderPks.size()));
}

BinaryDescriptor buildBinarySearchProp(int counter) {
    return new BinaryDescriptor("test binary prop", Thread.currentThread().contextClassLoader.getResourceAsStream("fxresources/binaries/thumbs/mime-txt.png"))
}

void buildGroupData(String prefix, FxContent co, int counter, folderPks) {
    co.setValue("$prefix/stringSearchProp", new FxString(false, "StringValue$counter"))
    co.setValue("$prefix/stringSearchPropML", new FxString(FxLanguage.ENGLISH, "StringValueML$counter").setTranslation(FxLanguage.GERMAN, "DE StringValueML" + counter))
    co.setValue("$prefix/textSearchProp", new FxString(false, "TextValue$counter"))
    co.setValue("$prefix/htmlSearchProp", new FxHTML(false, "HTMLValue$counter"))
    co.setValue("$prefix/numberSearchProp", new FxNumber(false, counter))
    co.setValue("$prefix/largeNumberSearchProp", new FxLargeNumber(false, counter))
    co.setValue("$prefix/floatSearchProp", new FxFloat(false, counter))
    co.setValue("$prefix/doubleSearchProp", new FxDouble(false, counter))
    co.setValue("$prefix/dateSearchProp", new FxDate(false, buildDate(counter)))
    co.setValue("$prefix/dateTimeSearchProp", new FxDateTime(false, buildDate(counter)))
    co.setValue("$prefix/dateRangeSearchProp", new FxDateRange(false, buildDateRange(counter)))
    co.setValue("$prefix/dateTimeRangeSearchProp", new FxDateTimeRange(false, buildDateRange(counter)))
    co.setValue("$prefix/booleanSearchProp", new FxBoolean(false, counter % 2 == 0))
    co.setValue("$prefix/binarySearchProp", new FxBinary(false, buildBinarySearchProp(counter)))
    co.setValue("$prefix/referenceSearchProp", new FxReference(false, buildReference(counter, folderPks)))
//    co.setValue("$prefix/inlineReferenceSearchProp", new FxReference(false, buildReferenceSearchProp(counter)))
    co.setValue("$prefix/selectOneSearchProp", new FxSelectOne(false, buildSelectOneSearchProp(counter)))
    co.setValue("$prefix/selectManySearchProp", new FxSelectMany(false, buildSelectManySearchProp(counter)))
    co.setValue("$prefix/multiSearchProp[1]", "MultiString1 $counter".toString());
    co.setValue("$prefix/multiSearchProp[2]", "MultiString2 $counter".toString());
    co.setValue("$prefix/multiSearchProp[3]", "MultiString3 $counter".toString());
}

long start = System.currentTimeMillis()
final List<FxPK> folderPks = new SqlQueryBuilder().select("@pk").type("FOLDER").getResult().collectColumn(1)
int instances = 0
final List<Integer> indices = [*1..instanceCount]
Collections.shuffle(indices)

long instanceACLId = CacheAdmin.environment.getDefaultACL(ACLCategory.INSTANCE).id

instanceCount.times { int counter ->
    final ContentEngine contentEngine = EJBLookup.contentEngine
    final FxEnvironment env = CacheAdmin.environment
    FxContent co = contentEngine.initialize(env.getType("SearchTest").id)
    co.setAclIds([dummyACLId, instanceACLId])
    // use shuffled index for numeric values to prevent saving all contents
    // in ascending sort order (this will trigger bugs that rely on the DB's natural
    // ordering)
    final int index = indices.get(counter)
    buildGroupData("", co, index, folderPks)
    buildGroupData("/GroupTop", co, index, folderPks)
    buildGroupData("/GroupTop/GroupNested", co, index, folderPks)
    FxContent dbContent = contentEngine.load(EJBLookup.contentEngine.save(co))
    instances++
    final Workflow workflow = env.getWorkflow(env.getStep(dbContent.stepId).workflowId)
    final Step editStep = (Step) workflow.getSteps().find { Step step ->
        step.stepDefinitionId == StepDefinition.EDIT_STEP_ID
    }
    // create some versions
    dbContent.setStepId(editStep.id)
    (counter % 5).times {
        contentEngine.createNewVersion(dbContent)
        instances++
    }
}

println "Creation of " + instances + " test instances took " + (System.currentTimeMillis() - start) + " ms (= " + ((System.currentTimeMillis() - start) / instances) + " ms/instance)"
