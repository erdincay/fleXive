<?xml version="1.0" encoding="UTF-8"?>
<jbosscache xmlns="urn:jboss:jbosscache-core:config:3.2">

   <!-- Configure the TransactionManager -->
    <transaction transactionManagerLookupClass="org.jboss.cache.transaction.GenericTransactionManagerLookup"/>

    <!--
        Using READ_COMMITTED instead of REPEATABLE_READ allows flexive to populate data caches outside
        potentially long-running transactions, which greatly reduces the risks of introducing deadlocks due
        to MVCC write locks.

        Lock striping is disabled to prevent random deadlocks between unrelated requests, which are quite likely
        when using flexive APIs in long-running transactions.
    -->
    <locking isolationLevel="READ_COMMITTED" useLockStriping="false"/>

   <!--
      wakeUpInterval: time interval (millis) when the eviction thread kicks in.
   -->
    <eviction wakeUpInterval="5000">
      <!--
         Cache wide defaults
         default algorithmClass: if an algorithm class is not specified for a region, this one is used by default.
         default eventQueueSize  if an event queue size is not specified for a region, this one is used by default.
      -->
        <default algorithmClass="org.jboss.cache.eviction.LRUAlgorithm" eventQueueSize="200000">
            <property name="maxNodes" value="-1" />
            <property name="timeToLive" value="-1" />
            <property name="maxAge" value="-1"/>
        </default>

      <!-- configurations for various regions--> 
        <region name="/Division1/FxContent">
            <property name="maxNodes" value="1000" />
            <property name="timeToLive" value="1000000" />  <!-- in milliseconds -->
        </region>
        <region name="/Division1/userConfig">
            <property name="maxNodes" value="10000" />
            <property name="timeToLive" value="1000000" />  <!-- in milliseconds -->
        </region>
    </eviction>
</jbosscache>
