/** *************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2010
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ************************************************************** */

import com.flexive.extractor.ExtractedData
import com.flexive.extractor.Extractor
import com.flexive.shared.value.BinaryDescriptor
import com.flexive.shared.media.FxMediaEngine
import java.nio.channels.FileChannel
import java.nio.ByteBuffer
import com.sun.pdfview.*
import java.awt.image.BufferedImage
import java.awt.*
import javax.imageio.ImageIO

if (processed) {
  println "already processed in documents ..."
  return
}

// check which renderer to use, if both are active PDFRenderer will be used first and 
// ICEpdf as fallback in case of errors
boolean usePDFRenderer = true
boolean useICEpdf = true


boolean isDocument = true
int doc_previewId = BinaryDescriptor.SYS_UNKNOWN
//Extractor.DOC_TYPE docType = Extractor.DOC_TYPE.WORD
switch (mimeType) {
  case "application/msword":
    doc_previewId = BinaryDescriptor.SYS_DOC
    docType = Extractor.DocumentType.Word
    break
  case "application/mspowerpoint":
    doc_previewId = BinaryDescriptor.SYS_PPT
    docType = Extractor.DocumentType.Powerpoint
    break
  case "application/msexcel":
    doc_previewId = BinaryDescriptor.SYS_XLS
    docType = Extractor.DocumentType.Excel
    break
  case "application/pdf":
    doc_previewId = BinaryDescriptor.SYS_PDF
    docType = Extractor.DocumentType.PDF
    break
  case "text/html":
    doc_previewId = BinaryDescriptor.SYS_HTML
    docType = Extractor.DocumentType.HTML
    break
  default:
    isDocument = false
}

if (!isDocument) {
  println "no document!"
  return
}
println "processing a document!"
try {
  metaData = Extractor.extractData(binaryFile, docType).toXML()
} catch (Throwable t) {
  println "Failed to extract data, returning empty set: " + t.message
  metaData = ExtractedData.toEmptyXML()
}

processed = true
useDefaultPreview = true
defaultId = doc_previewId
if (docType == Extractor.DocumentType.PDF) {
  if (!(usePDFRenderer || useICEpdf)) {
    println "Warning: no PDF renderer active!"
    return
  }
  boolean success = false
  //try to render the first PDF page as image
  try {
    String ext = ".PNG"
    File imgFile = File.createTempFile("PDFIMG", ext)
    BufferedImage img = null;

    if (usePDFRenderer) {
      println "Using PDFRenderer for rendering"
      // set up the PDF reading
      RandomAccessFile raf = new RandomAccessFile((File) binaryFile, "r");
      FileChannel channel = raf.getChannel();
      ByteBuffer buf = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel.size());
      PDFFile pdffile = new PDFFile(buf);

      // get the first page
      PDFPage page = pdffile.getPage(0);

      // create and configure a graphics object

      img = new BufferedImage((int) page.getBBox().getWidth(), (int) page.getBBox().getHeight(), BufferedImage.TYPE_INT_ARGB);
      Graphics2D g2 = img.createGraphics();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

      // do the actual drawing
      PDFRenderer renderer = new PDFRenderer(page, g2,
              new Rectangle(0, 0, (int) page.getBBox().getWidth(), (int) page.getBBox().getHeight()), null, Color.WHITE);
      page.waitForFinish();
      renderer.run();
      success = renderer.getStatus() == Watchable.COMPLETED
    }
    if(!success && useICEpdf) {
      println "Using ICEpdf for rendering"
      //try ICEPdf
      org.icepdf.core.pobjects.Document doc = new org.icepdf.core.pobjects.Document()
      doc.setFile(((File) binaryFile).getAbsolutePath())
      if (doc.getNumberOfPages() > 0) {
        img = (BufferedImage) doc.getPageImage(0, org.icepdf.core.util.GraphicsRenderingHints.PRINT, org.icepdf.core.pobjects.Page.BOUNDARY_CROPBOX, 0f, 1.0f)
        success = true
      }
    }

    if (success && img != null) {
      ImageIO.write(img, ext.substring(1), imgFile)

      previewFile1 = File.createTempFile("PREV1", ext)
      previewFile2 = File.createTempFile("PREV2", ext)
      previewFile3 = File.createTempFile("PREV3", ext)
      previewFile4 = File.createTempFile("PREV4", ext)
      dimensionsPreview1 = FxMediaEngine.scale(imgFile, previewFile1, ext, BinaryDescriptor.PREVIEW1_BOX, BinaryDescriptor.PREVIEW1_BOX)
      dimensionsPreview2 = FxMediaEngine.scale(imgFile, previewFile2, ext, BinaryDescriptor.PREVIEW2_BOX, BinaryDescriptor.PREVIEW2_BOX)
      dimensionsPreview3 = FxMediaEngine.scale(imgFile, previewFile3, ext, BinaryDescriptor.PREVIEW3_BOX, BinaryDescriptor.PREVIEW3_BOX)
      dimensionsPreview4 = FxMediaEngine.scale(imgFile, previewFile4, ext, BinaryDescriptor.SCREENVIEW_WIDTH, BinaryDescriptor.SCREENVIEW_HEIGHT)
      useDefaultPreview = false
    }
    if (!imgFile.delete())
      imgFile.deleteOnExit()
  } catch (Throwable e) {
    println "PDF rendering failed: " + e.message
  }
}

println "Processed document. Using default preview: " + useDefaultPreview