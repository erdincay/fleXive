/** *************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2014
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ************************************************************** */

//file: AudioMetaParser.gy
//description:
// Parser for Audio meta information. Sets Audio type fields.
// To be called for Audio type instance creation
//expected bindings:
//  ticket ... UserTicket
// [optional] binaryDescriptor ... the BinaryDescriptor (taken from the content if null)
//  content ... the FxContent being processed
//author: Christopher Blasnik, Unique Computing Solutions GmbH

import com.flexive.shared.value.*

def binValue
if (binding.variables.containsKey("binaryDescriptor"))
    binValue = binaryDescriptor != null ? binaryDescriptor : content.getPropertyData("/File").value.defaultTranslation
else
    binValue = content.getPropertyData("/File").value.defaultTranslation

if (binValue.metadata == null || binValue.metadata.length() < 20) {
    println "No metadata present for audio file to process!"
    //ensure that the filename is set, else the file can not be saved
    if (!content.containsValue("/MIMETYPE"))
        content.setValue("/MIMETYPE", new FxString(false, (String) binValue.mimeType))
    return
}


void process(cmap, key, rawvalue) {
    if (rawvalue == null || rawvalue.toString().trim().length() == 0)
        return
    def value = rawvalue.toString()
    if (value.endsWith('.'))
        value = value.substring(0, value.length() - 1);
    if (!cmap.containsKey(key))
        cmap[key] = value
    else
        cmap[key] += ' ' + value
}

try {
    // println "Meta data (first 20 chars): ${binValue.metadata.substring(0, 20)}...";
    def meta = new XmlSlurper().parseText(binValue.metadata);
    def cmap = [:]
    def java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy")

    process(cmap, 'String|Caption', binValue.name)
    process(cmap, 'String|Length', meta.audioData.length)
    process(cmap, 'LargeNumber|Durationmicros', meta.audioData.durationmicros)
    process(cmap, 'Double|Samplerate', meta.meta.find { it.@key == 'samplerate'})
    process(cmap, 'String|Encoding', meta.meta.find { it.@key == 'encoding'})
    process(cmap, 'Number|Channels', meta.meta.find { it.@key == 'channels'})
    // id3 tag / ogg comment metadata extraction
    process(cmap, 'String|MetaData/SongTitle', meta.meta.find {it.@key == 'songtitle'})
    process(cmap, 'String|MetaData/Artist', meta.meta.find {it.@key == 'artist'})
    process(cmap, 'String|MetaData/Album', meta.meta.find {it.@key == 'album'})
    process(cmap, 'String|MetaData/Genre', meta.meta.find {it.@key == 'genre'})
    process(cmap, 'Number|MetaData/Year', meta.meta.find {it.@key == 'year'})
    process(cmap, 'String|MetaData/AudioFileComment', meta.meta.find {it.@key == 'audiofilecomment'})
    process(cmap, 'Number|MetaData/Bps', meta.meta.find {it.@key == 'bps'})
    process(cmap, 'Boolean|MetaData/Vbr', meta.meta.find {it.@key == 'vbr'})

    // traverse metadata
    cmap.each() {key, value ->
        def _type = key.split('\\|')[0]
        def fxvalue
        key = key.split("\\|")[1]

        switch (_type) {
            case "String": fxvalue = new FxString(key == "Caption", (String)value); break
            case "Number": fxvalue = new FxNumber(false, Integer.parseInt((String)value)); break
            case "LargeNumber": fxvalue = new FxLargeNumber(false, Long.parseLong((String)value)); break
            case "Double": fxvalue = new FxDouble(false, Double.parseDouble((String)value)); break
            case "Date": fxvalue = new FxDate(false, sdf.parse((String)value)); break;
            case "Boolean": fxvalue = new FxBoolean(false, Boolean.parseBoolean((String)value)); break
        }

        try {
            content.setValue("/" + key, fxvalue);
        } catch (Exception e) {
            System.err.println("Failed to process metadata for /$key (ignored): " + e.getMessage())
        }
    }

    if (!content.containsValue("/MIMETYPE"))
        content.setValue("/MIMETYPE", new FxString(false, (String) binValue.mimeType))

    return content

} catch (Exception e) {
    System.err.println("Failed to process metadata (ignored): " + e.getMessage())
}