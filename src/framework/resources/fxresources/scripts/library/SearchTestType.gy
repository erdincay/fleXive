/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2008
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

import com.flexive.shared.CacheAdmin
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder
import com.flexive.shared.structure.FxDataType
import com.flexive.shared.structure.FxMultiplicity
import com.flexive.shared.value.FxString
import com.flexive.shared.security.ACL
import com.flexive.shared.exceptions.FxRuntimeException
import com.flexive.shared.structure.FxSelectListEdit
import com.flexive.shared.structure.FxSelectListItemEdit
import com.flexive.shared.EJBLookup
import com.flexive.shared.FxLanguage

/**
 * Create the "SearchTest" type that is used for embedded persistence engine tests
 * and may also be used for GUI testing.
 */

try {
    CacheAdmin.getEnvironment().getType("SearchTest")
    return  // type already exists
} catch (FxRuntimeException e) {
    // not found, continue
}

// create SelectLists
ACL aclList = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLIST);
ACL aclItem = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLISTITEM);
FxSelectListEdit searchTestList = FxSelectListEdit.createNew("SearchTest SelectList", new FxString("SearchTest SelectList"), new FxString("SelectList used for search testcases"),
        false, aclList, aclItem);
10.times {i ->
    new FxSelectListItemEdit("Item$i", aclItem, searchTestList, new FxString("Label_$i"), "ListItem$i", "#FFFFFF");
}
EJBLookup.getSelectListEngine().save(searchTestList);

final ACL defaultInstanceACL = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.STRUCTURE)
final long instanceAclId = EJBLookup.aclEngine.create("Test type ACL", new FxString(FxLanguage.ENGLISH, "Test type ACL"),
        defaultInstanceACL.mandatorId, "#000000", "ACL for type SearchTest", ACL.Category.STRUCTURE);
final ACL instanceACL = CacheAdmin.environment.getACL(instanceAclId);

new GroovyTypeBuilder().SearchTest(acl: instanceACL, useTypePermissions: true, useStepPermissions: true,
                                   useInstancePermissions: true, usePropertyPermissions: false) {
    stringSearchProp(FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_N)
    stringSearchPropML(multilang: true, FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_N)
    textSearchProp(FxDataType.Text, multiplicity: FxMultiplicity.MULT_0_N)
    htmlSearchProp(FxDataType.HTML, multiplicity: FxMultiplicity.MULT_0_N)
    numberSearchProp(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_N)
    largeNumberSearchProp(FxDataType.LargeNumber, multiplicity: FxMultiplicity.MULT_0_N)
    floatSearchProp(FxDataType.Float, multiplicity: FxMultiplicity.MULT_0_N)
    doubleSearchProp(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_N)
    dateSearchProp(FxDataType.Date, multiplicity: FxMultiplicity.MULT_0_N)
    dateTimeSearchProp(FxDataType.DateTime, multiplicity: FxMultiplicity.MULT_0_N)
    dateRangeSearchProp(FxDataType.DateRange, multiplicity: FxMultiplicity.MULT_0_N)
    dateTimeRangeSearchProp(FxDataType.DateTimeRange, multiplicity: FxMultiplicity.MULT_0_N)
    booleanSearchProp(FxDataType.Boolean, multiplicity: FxMultiplicity.MULT_0_N)
    binarySearchProp(FxDataType.Binary, multiplicity: FxMultiplicity.MULT_0_N)
    referenceSearchProp(FxDataType.Reference, multiplicity: FxMultiplicity.MULT_0_N, referencedType: CacheAdmin.environment.getType("FOLDER"))
//    inlineReferenceSearchProp(FxDataType.InlineReference, multiplicity: FxMultiplicity.MULT_0_N, referencedType: CacheAdmin.environment.getType("FOLDER"))
    selectOneSearchProp(FxDataType.SelectOne, multiplicity: FxMultiplicity.MULT_0_N, referencedList: CacheAdmin.environment.getSelectList("SearchTest SelectList"))
    selectManySearchProp(FxDataType.SelectMany, multiplicity: FxMultiplicity.MULT_0_1, referencedList: CacheAdmin.environment.getSelectList("SearchTest SelectList"))

    // create a new group
    GroupTop(description: new FxString("Group at top level"), multiplicity: FxMultiplicity.MULT_0_N) {
        stringSearchProp(assignment: "SearchTest/stringSearchProp")
        stringSearchPropML(assignment: "SearchTest/stringSearchPropML")
        textSearchProp(assignment: "SearchTest/textSearchProp")
        htmlSearchProp(assignment: "SearchTest/htmlSearchProp")
        numberSearchProp(assignment: "SearchTest/numberSearchProp")
        largeNumberSearchProp(assignment: "SearchTest/largeNumberSearchProp")
        floatSearchProp(assignment: "SearchTest/floatSearchProp")
        doubleSearchProp(assignment: "SearchTest/doubleSearchProp")
        dateSearchProp(assignment: "SearchTest/dateSearchProp")
        dateTimeSearchProp(assignment: "SearchTest/dateTimeSearchProp")
        dateRangeSearchProp(assignment: "SearchTest/dateRangeSearchProp")
        dateTimeRangeSearchProp(assignment: "SearchTest/dateTimeRangeSearchProp")
        booleanSearchProp(assignment: "SearchTest/booleanSearchProp")
        binarySearchProp(assignment: "SearchTest/binarySearchProp")
        referenceSearchProp(assignment: "SearchTest/referenceSearchProp")
//        inlineReferenceSearchProp(assignment: "SearchTest/inlineReferenceSearchProp")
        selectOneSearchProp(assignment: "SearchTest/selectOneSearchProp")
        selectManySearchProp(assignment: "SearchTest/selectManySearchProp")

        GroupNested(description: new FxString("Nested group"), multiplicity: FxMultiplicity.MULT_0_N) {
            stringSearchProp(assignment: "SearchTest/stringSearchProp")
            stringSearchPropML(assignment: "SearchTest/stringSearchPropML")
            textSearchProp(assignment: "SearchTest/textSearchProp")
            htmlSearchProp(assignment: "SearchTest/htmlSearchProp")
            numberSearchProp(assignment: "SearchTest/numberSearchProp")
            largeNumberSearchProp(assignment: "SearchTest/largeNumberSearchProp")
            floatSearchProp(assignment: "SearchTest/floatSearchProp")
            doubleSearchProp(assignment: "SearchTest/doubleSearchProp")
            dateSearchProp(assignment: "SearchTest/dateSearchProp")
            dateTimeSearchProp(assignment: "SearchTest/dateTimeSearchProp")
            dateRangeSearchProp(assignment: "SearchTest/dateRangeSearchProp")
            dateTimeRangeSearchProp(assignment: "SearchTest/dateTimeRangeSearchProp")
            booleanSearchProp(assignment: "SearchTest/booleanSearchProp")
            binarySearchProp(assignment: "SearchTest/binarySearchProp")
            referenceSearchProp(assignment: "SearchTest/referenceSearchProp")
//            inlineReferenceSearchProp(assignment: "SearchTest/inlineReferenceSearchProp")
            selectOneSearchProp(assignment: "SearchTest/selectOneSearchProp")
            selectManySearchProp(assignment: "SearchTest/selectManySearchProp")
        }
    }
}
