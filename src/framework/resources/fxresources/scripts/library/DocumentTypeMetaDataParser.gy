/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2010
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

//file: DocumentTypeMetaDataParser.gy
//description: Temporary: Same functionality as DocumentMetaParser.gy, accepts metadata directly
// parameters: XML metaData, FxContent content
//author: Christopher Blasnik, Unique Computing Solutions GmbH

import com.flexive.shared.value.FxString
import com.flexive.shared.value.FxBoolean
import com.flexive.shared.value.FxNumber
import com.flexive.shared.value.FxDateTime

if(metaData == null)
    return content;

def meta = new XmlSlurper().parseText(metaData);
def cmap = [:]

void process(cmap,key,rawvalue)  {
  if( rawvalue==null || rawvalue.toString().trim().length() == 0 )
    return
  def value = rawvalue.toString()
  if(value.endsWith('.'))
    value = value.substring(0, value.length()-1);
  if( !cmap.containsKey(key) )
    cmap[key] = value
  else
    cmap[key] += ' '+value
}

if( meta.summary ) {
    if( meta.summary.author )
        process(cmap, 'String|Author', meta.summary.author)
    if( meta.summary.applicationName )
        process(cmap, 'String|Application', meta.summary.applicationName)
    if( meta.summary.charCount )
        process(cmap, 'Number|Characters', meta.summary.charCount)
    if( meta.summary.comments )
        process(cmap, 'String|Comments', meta.summary.comments)
    if( meta.summary.createdAt )
        process(cmap, 'DateTime|CreateDate', meta.summary.createdAt)
    if( meta.summary.editTime )
        process(cmap, 'DateTime|EditDate', meta.summary.editTime)
    if( meta.summary.keywords )
        process(cmap, 'String|Keywords', meta.summary.keywords)
    if( meta.summary.lastModifiedBy )
        process(cmap, 'String|LastEditor', meta.summary.lastModifiedBy)
    if( meta.summary.lastPrintedAt )
        process(cmap, 'DateTime|LastPrinted', meta.summary.lastPrintedAt)
    if( meta.summary.title ) {
    	String title = (String)meta.summary.title
    	if("untitled".equals(title))
    	  title = (String)meta.name
        process(cmap, 'MLString|Caption', title)
    }
    if( meta.summary.lastModifiedAt )
        process(cmap, 'DateTime|LastModified', meta.summary.lastModifiedAt)
    if( meta.summary.pageCount )
        process(cmap, 'Number|Pages', meta.summary.pageCount)
    if( meta.summary.revNumber )
        process(cmap, 'String|RevNumber', meta.summary.revNumber)
    if( meta.summary.wordCount )
        process(cmap, 'Number|Words', meta.summary.wordCount)
    if( meta.summary.encrypted )
        process(cmap, 'Boolean|Encrypted', meta.summary.encrypted)
    if( meta.summary.additionalText )
        process(cmap, 'String|AdditionalText', meta.summary.additionalText)
} else {
    //println "No summary information!"
}

cmap.each() {key, value ->
    def _type = key.split('\\|')[0]
    def fxvalue
    key = key.split("\\|")[1]

    switch (_type) {
        case "String": fxvalue = new FxString(false, (String)value); break
        case "MLString": fxvalue = new FxString(true, (String)value); break
        case "Boolean": fxvalue = new FxBoolean(false, (Boolean)Boolean.valueOf(value)); break
        case "Number":
            if (value.endsWith("+0+0"))
                value = value.substring(0, value.indexOf("+0+0"))
            int _int = Integer.valueOf(value);
            if (_int == -1 || _int == 0) {
                fxvalue = null
                break
            }
            fxvalue = new FxNumber(false, _int); break
        case "DateTime":
            fxvalue = new FxDateTime(false, new java.util.Date(Long.valueOf(value)))
            break
    }
    if (fxvalue != null) {
        if (!content.containsValue("/" + key)) {
            content.setValue("/" + key, fxvalue);
        }
    }
}


if( !content.containsValue("/CAPTION") )
    content.setValue("/CAPTION", new FxString(true, (String)binValue.name))
if( !content.containsValue("/ENCRYPTED") )
    content.setValue("/ENCRYPTED", new FxBoolean(false, false))
return content