import com.flexive.shared.value.FxString
import com.flexive.shared.CacheAdmin
import com.flexive.shared.value.FxNumber
import com.flexive.shared.value.FxDouble
import com.flexive.shared.value.FxDateTime
import com.flexive.shared.value.FxSelectOne

/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2010
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

//file: ImageTypeMetaDataParser.gy
//description: Temporary: Same functionality as DocumentMetaParser.gy, accepts BinaryDescriptor & content instance directly
// binding parameters: BinaryDescriptor desc, FxContent content
//author: Christopher Blasnik, Unique Computing Solutions GmbH

if(desc.metadata == null)
    return content;

void process(cmap, key, rawvalue) {
    if (rawvalue == null || rawvalue.toString().trim().length() == 0)
        return
    def value = rawvalue.toString()
    if (value.endsWith('.'))
        value = value.substring(0, value.length() - 1);
    if (!cmap.containsKey(key))
        cmap[key] = value
    else
        cmap[key] += ' ' + value
}

try {
    // set the filename
    content.setValue("/FILENAME", new FxString(false, desc.name))

    def meta = new XmlSlurper().parseText(desc.metadata);
    def cmap = [:]
    def java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")

    def compList = CacheAdmin.environment.getSelectList("Image Compression")
    def orientList = CacheAdmin.environment.getSelectList("Image Orientation")

    process(cmap, 'String|Caption', desc.name)
    process(cmap, 'DateTime|DateCreated', meta.meta.find{ it.@key == 'DateTimeOriginal'})
    if( !cmap.containsKey('DateTime|DateCreated') )
        process(cmap, 'DateTime|DateCreated', meta.meta.find{ it.@key == 'DateTime'})

    def width = meta.meta.find{ it.@key == 'PixelXDimension'}
    if( width == "" )
        width = meta.imageData.width
    def height = meta.meta.find{ it.@key == 'PixelYDimension'}
    if( height == "")
        height = meta.imageData.height
    process(cmap, 'Number|PixelXDimension', width)
    process(cmap, 'Number|PixelYDimension', height)

    process(cmap, 'Double|xResolution', meta.meta.find{ it.@key == 'xResolution'})
    process(cmap, 'Double|yResolution', meta.meta.find{ it.@key == 'xResolution'})
    process(cmap, 'Number|BitsPerPixel', meta.imageData.bpp)
    process(cmap, 'String|ColorType', meta.imageData.colorType)
    process(cmap, 'SelectList|Compression', meta.imageData.compressionAlgorithm);
    process(cmap, 'String|MetaData/Manufacturer', meta.meta.find{ it.@key == 'Make'})
    process(cmap, 'String|MetaData/Model', meta.meta.find{ it.@key == 'Model'})
    process(cmap, 'Number|MetaData/ISO', meta.meta.find{ it.@key == 'ISOSpeedRatings'})
    process(cmap, 'SelectList|MetaData/Orientation', meta.meta.find{ it.@key == 'Orientation'});
    process(cmap, 'String|MetaData/FocalLength', meta.meta.find{ it.@key == 'FocalLength'})
    process(cmap, 'String|MetaData/MaxApertureValue', meta.meta.find{ it.@key == 'MaxApertureValue'})
    process(cmap, 'String|MetaData/ApertureValue', meta.meta.find{ it.@key == 'ApertureValue'})
    process(cmap, 'String|MetaData/ExposureBias', meta.meta.find{ it.@key == 'ExposureBiasValue'})
    process(cmap, 'String|MetaData/ExposureProgram', meta.meta.find{ it.@key == 'ExposureMode'})
    process(cmap, 'String|MetaData/ExposureTime', meta.meta.find{ it.@key == 'ExposureTime'})
    process(cmap, 'String|MetaData/FNumber', meta.meta.find{ it.@key == 'FNumber'})
    process(cmap, 'String|MetaData/Flash', meta.meta.find{ it.@key == 'Flash'})
    process(cmap, 'String|MetaData/MeteringMode', meta.meta.find{ it.@key == 'MeteringMode'})
    process(cmap, 'String|MetaData/WhiteBalance', meta.meta.find{ it.@key == 'WhiteBalance'})
    process(cmap, 'String|MetaData/OriginatingProgram', meta.meta.find{ it.@key == 'Software'})

    cmap.each() {key, value ->
        def _type = key.split('\\|')[0]
        def fxvalue
        key = key.split("\\|")[1]

        switch (_type) {
            case "String": fxvalue = new FxString(key=="Caption", value); break
            case "Number":
                fxvalue = new FxNumber(false, Integer.parseInt(value)); break
            case "Double": fxvalue = new FxDouble(false, Double.parseDouble(value)); break
            case "DateTime": fxvalue = new FxDateTime(false, sdf.parse(value)); break
            case "SelectList":
                if (key == "Compression") {
                    try {
                        if( value.startsWith("PNG"))
                            value = "PNG"
                        fxvalue = new FxSelectOne(false, compList.getItemByData(value.toUpperCase()))
                    } catch (Throwable t) {
                        println "Error setting select list item: " + t.message
                        fxvalue = null
                    }
                }
                if (key == "MetaData/Orientation") {
                    try {
                        fxvalue = new FxSelectOne(false, orientList.getItemByData(value.toUpperCase()))
                    } catch (Throwable t) {
                        println "Error setting select list item: " + t.message
                        fxvalue = null
                    }
                }
        }

        try {
            content.setValue("/" + key, fxvalue);
        } catch (Exception e) {
            System.err.println("Failed to process metadata for /$key (ignored): " + e.getMessage())
        }
    }

    return content
} catch (Exception e) {
    System.err.println("Failed to process metadata (ignored): " + e.getMessage())
}