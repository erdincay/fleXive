/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2010
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

import com.flexive.shared.media.FxMediaEngine
import com.flexive.shared.media.FxMetadata
import com.flexive.shared.media.impl.FxMediaNativeEngine
import com.flexive.shared.value.BinaryDescriptor

/*
Parameters:
===========
"boolean processed",
"boolean useDefaultPreview",
"int defaultId",
"String mimeType",
"String metaData",
"String binaryFile",
"String previewFile1",
"String previewFile2",
"String previewFile3",
"String previewFile4",
"int[] dimensionsPreview1",
"int[] dimensionsPreview2",
"int[] dimensionsPreview3",
"int[] dimensionsPreview4"
*/
if (processed)
    return

boolean isImage = mimeType.startsWith("image/")
if (!isImage)
    return

File f_binaryFile = binaryFile != null ? new File((String)binaryFile) : null
if( f_binaryFile == null || !f_binaryFile.exists() || !f_binaryFile.isFile() ) {
  System.err.println("Binary file ["+binaryFile+"] does not exist or is not a file!")
  return
}

//parse metadata
FxMetadata meta = FxMediaEngine.identify(mimeType, f_binaryFile)
if (!meta.isImageMetadata())
  return //could not identify as image
metaData = meta.toXML()
//create previews
String ext = ".JPG"
if (mimeType.endsWith("/png"))
    ext = ".PNG"
else if (mimeType.endsWith("/gif"))
    ext = ".GIF"

File f_previewFile1 = null
File f_previewFile2 = null
File f_previewFile3 = null
File f_previewFile4 = null

//check if upscaling is needed
int orgWidth = meta.asImageMetadata().getWidth()
int orgHeight = meta.asImageMetadata().getHeight()

if(orgWidth > BinaryDescriptor.PREVIEW1_BOX || orgHeight > BinaryDescriptor.PREVIEW1_BOX)
  f_previewFile1 = File.createTempFile("PREV1", ext)
if(orgWidth > BinaryDescriptor.PREVIEW2_BOX || orgHeight > BinaryDescriptor.PREVIEW2_BOX)
  f_previewFile2 = File.createTempFile("PREV2", ext)
if(orgWidth > BinaryDescriptor.PREVIEW3_BOX || orgHeight > BinaryDescriptor.PREVIEW3_BOX)
  f_previewFile3 = File.createTempFile("PREV3", ext)
if(orgWidth > BinaryDescriptor.SCREENVIEW_WIDTH || orgHeight > BinaryDescriptor.SCREENVIEW_HEIGHT)
  f_previewFile4 = File.createTempFile("PREV4", ext)

if( orgWidth <= 256 && orgHeight <= 256 ) {
    // avoid overhead of launching ImageMagick for small images
    if( f_previewFile1 != null)
      dimensionsPreview1 = FxMediaNativeEngine.scale(f_binaryFile, f_previewFile1, ext, BinaryDescriptor.PREVIEW1_BOX, BinaryDescriptor.PREVIEW1_BOX)
    if( f_previewFile2 != null)
      dimensionsPreview2 = FxMediaNativeEngine.scale(f_binaryFile, f_previewFile2, ext, BinaryDescriptor.PREVIEW2_BOX, BinaryDescriptor.PREVIEW2_BOX)
    if( f_previewFile3 != null)
      dimensionsPreview3 = FxMediaNativeEngine.scale(f_binaryFile, f_previewFile3, ext, BinaryDescriptor.PREVIEW3_BOX, BinaryDescriptor.PREVIEW3_BOX)
    if( f_previewFile4 != null)
      dimensionsPreview4 = FxMediaNativeEngine.scale(f_binaryFile, f_previewFile4, ext, BinaryDescriptor.SCREENVIEW_WIDTH, BinaryDescriptor.SCREENVIEW_HEIGHT)
} else {
    if( f_previewFile1 != null)
      dimensionsPreview1 = FxMediaEngine.scale(f_binaryFile, f_previewFile1, ext, BinaryDescriptor.PREVIEW1_BOX, BinaryDescriptor.PREVIEW1_BOX)
    if( f_previewFile2 != null)
      dimensionsPreview2 = FxMediaEngine.scale(f_binaryFile, f_previewFile2, ext, BinaryDescriptor.PREVIEW2_BOX, BinaryDescriptor.PREVIEW2_BOX)
    if( f_previewFile3 != null)
      dimensionsPreview3 = FxMediaEngine.scale(f_binaryFile, f_previewFile3, ext, BinaryDescriptor.PREVIEW3_BOX, BinaryDescriptor.PREVIEW3_BOX)
    if( f_previewFile4 != null)
      dimensionsPreview4 = FxMediaEngine.scale(f_binaryFile, f_previewFile4, ext, BinaryDescriptor.SCREENVIEW_WIDTH, BinaryDescriptor.SCREENVIEW_HEIGHT)
}

if( f_previewFile1 != null ) previewFile1 = f_previewFile1.absolutePath
if( f_previewFile2 != null ) previewFile2 = f_previewFile2.absolutePath
if( f_previewFile3 != null ) previewFile3 = f_previewFile3.absolutePath
if( f_previewFile4 != null ) previewFile4 = f_previewFile4.absolutePath

processed = true
useDefaultPreview = false
//println "Processed ok!!"