/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2008
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

import com.flexive.shared.media.FxMediaEngine
import com.flexive.shared.media.FxMetadata
import com.flexive.shared.media.impl.FxMediaNativeEngine
import com.flexive.shared.value.BinaryDescriptor

/*
Parameters:
===========
"boolean processed",
"boolean useDefaultPreview",
"int defaultId",
"String mimeType",
"String metaData",
"File binaryFile",
"File previewFile1",
"File previewFile2",
"File previewFile3",
"int[] dimensionPreview1",
"int[] dimensionPreview2",
"int[] dimensionPreview3"
*/
if (processed)
    return

boolean isImage = mimeType.startsWith("image/")
if (!isImage)
    return

//parse metadata
FxMetadata meta = FxMediaEngine.identify(mimeType, binaryFile)
metaData = meta.toXML()
//create previews
String ext = ".JPG"
if (mimeType.endsWith("/png"))
    ext = ".PNG"
else if (mimeType.endsWith("/gif"))
    ext = ".GIF"
previewFile1 = File.createTempFile("PREV1", ext)
previewFile2 = File.createTempFile("PREV2", ext)
previewFile3 = File.createTempFile("PREV3", ext)
if( meta.asImageMetadata().getWidth() <= 256 && meta.asImageMetadata().getHeight() <= 256 ) {
    dimensionsPreview1 = FxMediaNativeEngine.scale(binaryFile, previewFile1, ext, BinaryDescriptor.PREVIEW1_BOX, BinaryDescriptor.PREVIEW1_BOX)
    dimensionsPreview2 = FxMediaNativeEngine.scale(binaryFile, previewFile2, ext, BinaryDescriptor.PREVIEW2_BOX, BinaryDescriptor.PREVIEW2_BOX)
    dimensionsPreview3 = FxMediaNativeEngine.scale(binaryFile, previewFile3, ext, BinaryDescriptor.PREVIEW3_BOX, BinaryDescriptor.PREVIEW3_BOX)
} else {
    dimensionsPreview1 = FxMediaEngine.scale(binaryFile, previewFile1, ext, BinaryDescriptor.PREVIEW1_BOX, BinaryDescriptor.PREVIEW1_BOX)
    dimensionsPreview2 = FxMediaEngine.scale(binaryFile, previewFile2, ext, BinaryDescriptor.PREVIEW2_BOX, BinaryDescriptor.PREVIEW2_BOX)
    dimensionsPreview3 = FxMediaEngine.scale(binaryFile, previewFile3, ext, BinaryDescriptor.PREVIEW3_BOX, BinaryDescriptor.PREVIEW3_BOX)
}
processed = true
useDefaultPreview = false
//println "Processed ok!!"