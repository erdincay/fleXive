/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2008
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/
//file: init0020_DocumentType.gy
//description: Create the "Document" FxType needed for all flexive installations
//expected bindings:
//  ticket ... UserTicket
//  scriptname ... name of this script
//author: Markus Plesser, Unique Computing Solutions GmbH
import com.flexive.shared.*
import com.flexive.shared.configuration.SystemParameters
import com.flexive.shared.structure.*
import com.flexive.shared.scripting.*
import com.flexive.shared.security.*
import com.flexive.shared.value.FxString
import com.flexive.shared.search.*

class DocumentType {
    def typeEngine = EJBLookup.getTypeEngine();
    def assignmentEngine = EJBLookup.getAssignmentEngine()
    def name = FxType.DOCUMENT
    def typeDesc = new FxString(FxLanguage.ENGLISH, "Document")
    ACL documentACL = CacheAdmin.environment.getACL(ACLCategory.STRUCTURE.defaultId)
    FxType type

    void createType() {
        typeDesc.setTranslation(FxLanguage.GERMAN, "Dokument")
        type = FxTypeEdit.createNew(name, typeDesc, documentACL)
        typeEngine.save(type)
        type = CacheAdmin.environment.getType(type.name)
    }

    void addProperty(name, description, descriptionDe, hint, multiplicity, dataType, multiline=false) {
        assignmentEngine.createProperty(type.id, FxPropertyEdit.createNew(name,
                        new FxString(true, FxLanguage.ENGLISH, description).setTranslation(FxLanguage.GERMAN, descriptionDe),
                        new FxString(hint),
                        multiplicity,
                        documentACL,
                        dataType).setAutoUniquePropertyName(true).setMultiLine(multiline), "/")
    }

    void createProperties() {
        addProperty("Document", "The document file", "Datei", "", FxMultiplicity.MULT_1_1, FxDataType.Binary)
        addProperty("Author", "Author", "Autor", "", FxMultiplicity.MULT_0_1, FxDataType.String1024)
        addProperty("Application", "Application", "Applikation", "Application that created the document", FxMultiplicity.MULT_0_1, FxDataType.String1024)
        addProperty("Characters", "Count of characters", "Anzahl Buchstaben", "", FxMultiplicity.MULT_0_1, FxDataType.Number)
        addProperty("Comments", "Comments", "Kommentare", "", FxMultiplicity.MULT_0_1, FxDataType.Text, true)
        addProperty("CreateDate", "Creation Date", "Erstellungsdatum", "", FxMultiplicity.MULT_0_1, FxDataType.DateTime)
        addProperty("EditDate", "Last Edit Date", "Letzte Editierung", "", FxMultiplicity.MULT_0_1, FxDataType.DateTime)
        addProperty("Keywords", "Keywords", "Schl\u00fcsselw\u00f6rter", "", FxMultiplicity.MULT_0_1, FxDataType.Text, true)
        addProperty("LastEditor", "Last editor", "Letzter Bearbeiter", "", FxMultiplicity.MULT_0_1, FxDataType.String1024)
        addProperty("LastPrinted", "Last printed", "Zuletzt gedruckt", "", FxMultiplicity.MULT_0_1, FxDataType.DateTime)
        assignmentEngine.save(FxPropertyAssignmentEdit.createNew(CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_CAPTION_ROOTASSIGNMENT)),
            type, "Title", "/").setLabel(new FxString(true, FxLanguage.ENGLISH, "Document title").setTranslation(FxLanguage.GERMAN, "Dokumenttitel")).setEnabled(true), false);        
//        addProperty("Title", "Document title", "Dokumenttitel", "", FxMultiplicity.MULT_0_1, FxDataType.String1024)
        addProperty("LastModified", "Last modification", "Letzte \u00c4nderung", "", FxMultiplicity.MULT_0_1, FxDataType.DateTime)
        addProperty("Pages", "Number of pages", "Seitenanzahl", "", FxMultiplicity.MULT_0_1, FxDataType.Number)
        addProperty("RevNumber", "Revision number", "Revisionsnummer", "", FxMultiplicity.MULT_0_1, FxDataType.String1024)
        addProperty("Words", "Count of words", "Wortanzahl", "", FxMultiplicity.MULT_0_1, FxDataType.Number)
        addProperty("Encrypted", "Encrypted", "Verschl\u00fcsselt", "", FxMultiplicity.MULT_1_1, FxDataType.Boolean)
        addProperty("AdditionalText", "Additional text", "Zus\u00e4tzlicher Text", "", FxMultiplicity.MULT_0_1, FxDataType.Text, true)
        addProperty("Description", "Description", "Beschreibung", "", FxMultiplicity.MULT_0_1, FxDataType.Text, true)
    }

    void createScriptMappings() {
      // move to flexive-extractor-documents
    }
}

DocumentType dt = new DocumentType()
dt.createType()
dt.createProperties()
dt.createScriptMappings()

// create default result columns for the backend application
EJBLookup.resultPreferencesEngine.saveSystemDefault(
        new ResultPreferences(
                [new ResultColumnInfo("@pk"),
                 new ResultColumnInfo("#" + FxType.DOCUMENT + "/title"),
                 new ResultColumnInfo("#" + FxType.DOCUMENT + "/createDate"),
                 new ResultColumnInfo("#" + FxType.DOCUMENT + "/description"),
                 new ResultColumnInfo("#" + FxType.DOCUMENT + "/author"),
                ],
                [new ResultOrderByInfo("#" + FxType.DOCUMENT + "/title", SortDirection.ASCENDING)],
                25, 0
        ),
        CacheAdmin.environment.getType(FxType.DOCUMENT).id,
        ResultViewType.LIST,
        AdminResultLocations.values()
)
