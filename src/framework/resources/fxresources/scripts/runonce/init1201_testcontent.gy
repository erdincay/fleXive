/***************************************************************
*  This file is part of the [fleXive](R) project.
*
*  Copyright (c) 1999-2008
*  UCS - unique computing solutions gmbh (http://www.ucs.at)
*  All rights reserved
*
*  The [fleXive](R) project is free software; you can redistribute
*  it and/or modify it under the terms of the GNU General Public
*  License as published by the Free Software Foundation;
*  either version 2 of the License, or (at your option) any
*  later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*  A copy is found in the textfile GPL.txt and important notices to the
*  license from the author are found in LICENSE.txt distributed with
*  these libraries.
*
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  For further information about UCS - unique computing solutions gmbh,
*  please see the company website: http://www.ucs.at
*
*  For further information about [fleXive](R), please see the
*  project website: http://www.flexive.org
*
*
*  This copyright notice MUST APPEAR in all copies of the file!
***************************************************************/

import com.flexive.shared.CacheAdmin
import com.flexive.shared.EJBLookup
import com.flexive.shared.FxContext
import com.flexive.shared.content.FxContent
import com.flexive.shared.content.FxPK
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder
import com.flexive.shared.security.ACL
import com.flexive.shared.structure.*
import com.flexive.shared.value.*
import com.flexive.shared.search.query.SqlQueryBuilder
import com.flexive.shared.interfaces.ContentEngine
import com.flexive.shared.workflow.Workflow
import com.flexive.shared.workflow.Step
import com.flexive.shared.workflow.StepDefinition
import com.flexive.shared.FxLanguage



/**
 * Test fixture: content data
 *
 * @author Daniel Lichtenberger (daniel.lichtenberger@flexive.com), UCS - unique computing solutions gmbh (http://www.ucs.at)
 * @author Markus Plesser, UCS
 * @version $Rev$
 */
if (!FxContext.get().testDivision) {
    println "Not creating test fixture..."
    return
}
println "Creating test fixture - content..."

// create 25 folder instances with single-language caption and comment
25.times { i ->
    def FxContent co = EJBLookup.contentEngine.initialize(CacheAdmin.environment.getType("folder").id)
    co.setValue("/fqn", new FxString(false, "test fqn " + i))
    co.setValue("/caption", new FxString(true, "test caption " + i))
    co.setValue("/comment", new FxString("folder comment " + i))
    EJBLookup.contentEngine.save(co)
}

// create SelectLists
ACL aclList = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLIST);
ACL aclItem = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLISTITEM);
FxSelectListEdit searchTestList = FxSelectListEdit.createNew("SearchTest SelectList", new FxString("SearchTest SelectList"), new FxString("SelectList used for search testcases"),
        false, aclList, aclItem);
10.times {i ->
    new FxSelectListItemEdit("Item$i", aclItem, searchTestList, new FxString("Label_$i"), "ListItem$i", "#FFFFFF");
}
EJBLookup.getSelectListEngine().save(searchTestList);

//TODO: update once inline reference is implemented!

// create a type that contains all data types to test the search engine(s)
final ACL defaultInstanceACL = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.STRUCTURE)
final long instanceAclId = EJBLookup.aclEngine.create("Test type ACL", new FxString(FxLanguage.ENGLISH, "Test type ACL"),
        defaultInstanceACL.mandatorId, "#000000", "ACL for type SearchTest", ACL.Category.STRUCTURE);
final ACL instanceACL = CacheAdmin.environment.getACL(instanceAclId);

new GroovyTypeBuilder().SearchTest(acl: instanceACL, useTypePermissions: true, useStepPermissions: true,
                                   useInstancePermissions: true, usePropertyPermissions: false) {
    stringSearchProp(FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_N)
    textSearchProp(FxDataType.Text, multiplicity: FxMultiplicity.MULT_0_N)
    htmlSearchProp(FxDataType.HTML, multiplicity: FxMultiplicity.MULT_0_N)
    numberSearchProp(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_N)
    largeNumberSearchProp(FxDataType.LargeNumber, multiplicity: FxMultiplicity.MULT_0_N)
    floatSearchProp(FxDataType.Float, multiplicity: FxMultiplicity.MULT_0_N)
    doubleSearchProp(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_N)
    dateSearchProp(FxDataType.Date, multiplicity: FxMultiplicity.MULT_0_N)
    dateTimeSearchProp(FxDataType.DateTime, multiplicity: FxMultiplicity.MULT_0_N)
    dateRangeSearchProp(FxDataType.DateRange, multiplicity: FxMultiplicity.MULT_0_N)
    dateTimeRangeSearchProp(FxDataType.DateTimeRange, multiplicity: FxMultiplicity.MULT_0_N)
    booleanSearchProp(FxDataType.Boolean, multiplicity: FxMultiplicity.MULT_0_N)
    binarySearchProp(FxDataType.Binary, multiplicity: FxMultiplicity.MULT_0_N)
    referenceSearchProp(FxDataType.Reference, multiplicity: FxMultiplicity.MULT_0_N, referencedType: CacheAdmin.environment.getType("FOLDER"))
//    inlineReferenceSearchProp(FxDataType.InlineReference, multiplicity: FxMultiplicity.MULT_0_N, referencedType: CacheAdmin.environment.getType("FOLDER"))
    selectOneSearchProp(FxDataType.SelectOne, multiplicity: FxMultiplicity.MULT_0_N, referencedList: CacheAdmin.environment.getSelectList("SearchTest SelectList"))
    selectManySearchProp(FxDataType.SelectMany, multiplicity: FxMultiplicity.MULT_0_1, referencedList: CacheAdmin.environment.getSelectList("SearchTest SelectList"))

    // create a new group
    GroupTop(description: new FxString("Group at top level"), multiplicity: FxMultiplicity.MULT_0_N) {
        stringSearchProp(assignment: "SearchTest/stringSearchProp")
        textSearchProp(assignment: "SearchTest/textSearchProp")
        htmlSearchProp(assignment: "SearchTest/htmlSearchProp")
        numberSearchProp(assignment: "SearchTest/numberSearchProp")
        largeNumberSearchProp(assignment: "SearchTest/largeNumberSearchProp")
        floatSearchProp(assignment: "SearchTest/floatSearchProp")
        doubleSearchProp(assignment: "SearchTest/doubleSearchProp")
        dateSearchProp(assignment: "SearchTest/dateSearchProp")
        dateTimeSearchProp(assignment: "SearchTest/dateTimeSearchProp")
        dateRangeSearchProp(assignment: "SearchTest/dateRangeSearchProp")
        dateTimeRangeSearchProp(assignment: "SearchTest/dateTimeRangeSearchProp")
        booleanSearchProp(assignment: "SearchTest/booleanSearchProp")
        binarySearchProp(assignment: "SearchTest/binarySearchProp")
        referenceSearchProp(assignment: "SearchTest/referenceSearchProp")
//        inlineReferenceSearchProp(assignment: "SearchTest/inlineReferenceSearchProp")
        selectOneSearchProp(assignment: "SearchTest/selectOneSearchProp")
        selectManySearchProp(assignment: "SearchTest/selectManySearchProp")

        GroupNested(description: new FxString("Nested group"), multiplicity: FxMultiplicity.MULT_0_N) {
            stringSearchProp(assignment: "SearchTest/stringSearchProp")
            textSearchProp(assignment: "SearchTest/textSearchProp")
            htmlSearchProp(assignment: "SearchTest/htmlSearchProp")
            numberSearchProp(assignment: "SearchTest/numberSearchProp")
            largeNumberSearchProp(assignment: "SearchTest/largeNumberSearchProp")
            floatSearchProp(assignment: "SearchTest/floatSearchProp")
            doubleSearchProp(assignment: "SearchTest/doubleSearchProp")
            dateSearchProp(assignment: "SearchTest/dateSearchProp")
            dateTimeSearchProp(assignment: "SearchTest/dateTimeSearchProp")
            dateRangeSearchProp(assignment: "SearchTest/dateRangeSearchProp")
            dateTimeRangeSearchProp(assignment: "SearchTest/dateTimeRangeSearchProp")
            booleanSearchProp(assignment: "SearchTest/booleanSearchProp")
            binarySearchProp(assignment: "SearchTest/binarySearchProp")
            referenceSearchProp(assignment: "SearchTest/referenceSearchProp")
//            inlineReferenceSearchProp(assignment: "SearchTest/inlineReferenceSearchProp")
            selectOneSearchProp(assignment: "SearchTest/selectOneSearchProp")
            selectManySearchProp(assignment: "SearchTest/selectManySearchProp")
        }
    }
}

//create test data

int instanceCount = 50

Date buildDate(int counter) {
    final Random random = new Random();
    return new Date(100 + counter, random.nextInt(12), random.nextInt(28), random.nextInt(24), random.nextInt(60), random.nextInt(60))
}

DateRange buildDateRange(int counter) {
    return new DateRange(buildDate(counter), buildDate(counter+1))
}

FxSelectListItem buildSelectOneSearchProp(int counter) {
    FxSelectList list = CacheAdmin.environment.getSelectList("SearchTest SelectList")
    return list.items[counter % list.items.size()]
}

SelectMany buildSelectManySearchProp(int counter) {
    FxSelectList list = CacheAdmin.environment.getSelectList("SearchTest SelectList")
    SelectMany sm = new SelectMany(list)
    sm.select(list.items[0].id)
    sm.select(list.items[counter % list.items.size()].id)
    return sm
}

ReferencedContent buildReference(int counter, List<FxPK> folderPks) {
    return new ReferencedContent(folderPks.get(counter % folderPks.size()));
}

BinaryDescriptor buildBinarySearchProp(int counter) {
    return new BinaryDescriptor("test binary prop", Thread.currentThread().contextClassLoader.getResourceAsStream("fxresources/binaries/thumbs/mime-txt.png"))
}

void buildGroupData(String prefix, FxContent co, int counter, folderPks) {
    co.setValue("$prefix/stringSearchProp", new FxString(false, "StringValue$counter"))
    co.setValue("$prefix/textSearchProp", new FxString(false, "TextValue$counter"))
    co.setValue("$prefix/htmlSearchProp", new FxHTML(false, "HTMLValue$counter"))
    co.setValue("$prefix/numberSearchProp", new FxNumber(false, counter))
    co.setValue("$prefix/largeNumberSearchProp", new FxLargeNumber(false, counter))
    co.setValue("$prefix/floatSearchProp", new FxFloat(false, counter))
    co.setValue("$prefix/doubleSearchProp", new FxDouble(false, counter))
    co.setValue("$prefix/dateSearchProp", new FxDate(false, buildDate(counter)))
    co.setValue("$prefix/dateTimeSearchProp", new FxDateTime(false, buildDate(counter)))
    co.setValue("$prefix/dateRangeSearchProp", new FxDateRange(false, buildDateRange(counter)))
    co.setValue("$prefix/dateTimeRangeSearchProp", new FxDateTimeRange(false, buildDateRange(counter)))
    co.setValue("$prefix/booleanSearchProp", new FxBoolean(false, counter % 2 == 0))
    co.setValue("$prefix/binarySearchProp", new FxBinary(false, buildBinarySearchProp(counter)))
    co.setValue("$prefix/referenceSearchProp", new FxReference(false, buildReference(counter, folderPks)))
//    co.setValue("$prefix/inlineReferenceSearchProp", new FxReference(false, buildReferenceSearchProp(counter)))
    co.setValue("$prefix/selectOneSearchProp", new FxSelectOne(false, buildSelectOneSearchProp(counter)))
    co.setValue("$prefix/selectManySearchProp", new FxSelectMany(false, buildSelectManySearchProp(counter)))
}

long start = System.currentTimeMillis()
final List<FxPK> folderPks = new SqlQueryBuilder().select("@pk").type("FOLDER").getResult().collectColumn(1)
int instances = 0
instanceCount.times { int counter ->
    final ContentEngine contentEngine = EJBLookup.contentEngine
    final FxEnvironment env = CacheAdmin.environment
    FxContent co = contentEngine.initialize(env.getType("SearchTest").id)
    buildGroupData("", co, counter, folderPks)
    buildGroupData("/GroupTop", co, counter, folderPks)
    buildGroupData("/GroupTop/GroupNested", co, counter, folderPks)
    FxContent dbContent = contentEngine.load(EJBLookup.contentEngine.save(co))
    instances++
    final Workflow workflow = env.getWorkflow(env.getStep(dbContent.stepId).workflowId)
    final Step editStep = (Step) workflow.getSteps().find { Step step ->
        step.stepDefinitionId == StepDefinition.EDIT_STEP_ID
    }
    // create some versions
    (counter % 5).times {
        dbContent.setStepId(editStep.id)
        dbContent = contentEngine.load(contentEngine.createNewVersion(dbContent))
        instances++
    }
}

println "Creation of " + instances + " test instances took " + (System.currentTimeMillis() - start) + " ms (= " + ((System.currentTimeMillis() - start) / instances) + " ms/instance)"