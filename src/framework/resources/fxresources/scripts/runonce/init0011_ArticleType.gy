import com.flexive.shared.*
import com.flexive.shared.configuration.SystemParameters
import com.flexive.shared.exceptions.FxRuntimeException
import com.flexive.shared.search.*
import com.flexive.shared.structure.*
import com.flexive.shared.value.FxString
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder
//import com.flexive.shared.security.*

/** *************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2008
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ************************************************************** */
//file: init0011_article.gy
//description: Create the "Article" FxType needed for all flexive installations
//expected bindings:
//  ticket ... UserTicket
//  scriptname ... name of this script
//author: Gregor Schober, Unique Computing Solutions GmbH
// uncomment commented code to create distinct access control lists
//def String TYPE_ACL = "Article Type ACL";
//def String CONTENT_ACL = "Article Content ACL";
//def String WF_ACL = "Article Workflow ACL";
def String ARTICLE_TYPE = "Article";

try {
    if (CacheAdmin.getEnvironment().getType(ARTICLE_TYPE) != null) {
        println "Article type '${ARTICLE_TYPE}' already exists! exiting!";
        return;
    }
} catch (FxRuntimeException nf) {
    //ok, ignore
}
//try {
//    CacheAdmin.getEnvironment().getACL(TYPE_ACL);
//} catch (FxRuntimeException e) {
//    long typeACL = acl.create(TYPE_ACL, new FxString("ACL for the Article Type"), Mandator.MANDATOR_FLEXIVE, "#00CCDD", "", ACLCategory.STRUCTURE);
//    acl.assign(typeACL, UserGroup.GROUP_EVERYONE, true, true, true, true, true, true)
//}
//try {
//    CacheAdmin.getEnvironment().getACL(CONTENT_ACL);
//} catch (FxRuntimeException e) {
//    long coACL = acl.create(CONTENT_ACL, new FxString("ACL for contents of the Article Type"), Mandator.MANDATOR_FLEXIVE, "#00CCDD", "", ACLCategory.INSTANCE);
//    acl.assign(coACL, UserGroup.GROUP_EVERYONE, true, true, true, true, true, true)
//}
//try {
//    CacheAdmin.getEnvironment().getACL(WF_ACL);
//} catch (FxRuntimeException e) {
//    long wfACL = acl.create(WF_ACL, new FxString("ACL for the workflow of the Article Type"), Mandator.MANDATOR_FLEXIVE, "#00CCDD", "", ACLCategory.WORKFLOW);
//    acl.assign(wfACL, UserGroup.GROUP_EVERYONE, true, true, true, true, true, true)
//}

//def ACL typeACL = CacheAdmin.getEnvironment().getACL(TYPE_ACL);

new GroovyTypeBuilder().Article(
        label: new FxString(FxLanguage.ENGLISH, "Article").setTranslation(FxLanguage.GERMAN, "Artikel")) {

    title(assignment: CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_CAPTION_ROOTASSIGNMENT)),
            label: new FxString(FxLanguage.ENGLISH, "Title").setTranslation(FxLanguage.GERMAN, "Titel"),
            createSubAssignments: false)
    
    'abstract'(label: new FxString("Abstract"),
            dataType: FxDataType.Text,
            multiline: true,
            overrideMultiline: true)

    longtexthtml(label: new FxString("HTML"),
            dataType: FxDataType.HTML,
            multiline: true,
            overrideMultiline: true,
            defaultMultiplicity: 0)

    longtext(label: new FxString("Text"),
            dataType: FxDataType.Text,
            multiline: true,
            overrideMultiline: true)

    image(label: new FxString("Image"),
            multiplicity: FxMultiplicity.MULT_0_N,
            dataType: FxDataType.Binary,
            defaultMultiplicity: 0)

    listitem(label: new FxString("Listitem"),
            multiplicity: FxMultiplicity.MULT_0_N,
            defaultMultiplicity: 0)

    imagelink(label: new FxString("Linked Image"),
            multiplicity: FxMultiplicity.MULT_0_N,
            dataType: FxDataType.Reference,
            defaultMultiplicity: 0,
            referencedType: "IMAGE")
    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    // xx ARTICLE TEASER GROUP
    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    Teaser(label: new FxString("Teaser"),
            overrideMultiplicity: true) {

        teaser_title(label: new FxString("Title"),
                multiplicity: FxMultiplicity.MULT_1_1,
                multiline: true,
                overrideMultiline: true,
                fullTextIndexed: false,
                defaultMultiplicity: 0)

        teaser_text(label: new FxString("Text"),
                dataType: FxDataType.Text,
                multiline: true,
                overrideMultiline: true,
                fullTextIndexed: false,
                defaultMultiplicity: 0)

        teaser_image(label: new FxString("Linked Image"),
                dataType: FxDataType.Reference,
                referencedType: CacheAdmin.environment.getType("IMAGE"),
                fullTextIndexed: false,
                defaultMultiplicity: 0)
    }

    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    // xx ARTICLE "BOX" GROUP
    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    Box(label: new FxString("Box"),
            multiplicity: FxMultiplicity.MULT_0_N,
            defaultMultiplicity: 0) {

        box_title(label: new FxString("Title"),
                multiplicity: FxMultiplicity.MULT_1_1,
                fullTextIndexed: false,
                defaultMultiplicity: 0)

        box_text(label: new FxString("Text"),
                dataType: FxDataType.Text,
                multiline: true,
                overrideMultiline: true,
                fullTextIndexed: false,
                defaultMultiplicity: 0)

        box_image(label: new FxString("Linked Image"),
                dataType: FxDataType.Reference,
                referencedType: CacheAdmin.environment.getType("IMAGE"),
                fullTextIndexed: false,
                defaultMultiplicity: 0)
    }
}

// create default result columns for the backend application
EJBLookup.resultPreferencesEngine.saveSystemDefault(
        new ResultPreferences(
                [new ResultColumnInfo("@pk"),
                        new ResultColumnInfo("#article/title"),
                        new ResultColumnInfo("created_at"),
                        new ResultColumnInfo("#article/abstract")],
                [new ResultOrderByInfo("created_at", SortDirection.DESCENDING)],
                25, 0
        ),
        CacheAdmin.environment.getType("ARTICLE").id,
        ResultViewType.LIST,
        AdminResultLocations.values()
)