/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2010
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

/**
 * Create type icons.
 *
 * @author Daniel Lichtenberger (daniel.lichtenberger@flexive.com), UCS - unique computing solutions gmbh (http://www.ucs.at)
 * @version $Rev: 618 $
 */

import com.flexive.shared.*
import com.flexive.shared.value.FxBinary
import com.flexive.shared.value.BinaryDescriptor
import com.flexive.shared.content.FxPK
import com.flexive.shared.scripting.groovy.GroovyContentBuilder
import com.flexive.shared.value.FxReference
import com.flexive.shared.value.ReferencedContent
import com.flexive.shared.structure.FxType

InputStream getImageResource(path) {
    return Thread.currentThread().getContextClassLoader().getResourceAsStream("fxresources/binaries/thumbs/" + path)
}

FxBinary getImageBinary(name, path) {
    final InputStream stream = getImageResource(path)
    return stream != null ? new FxBinary(false, new BinaryDescriptor(name, stream)) : new FxBinary(false, null).setEmpty();
}

FxPK createTypeIcon(String typeName, String fileName) {
    def builder = new GroovyContentBuilder("image")
    builder {
        imageBinary(getImageBinary("Type Icon: " + typeName.toUpperCase(), fileName))
    }
    EJBLookup.contentEngine.save(builder.content)
}

def addTypeIcon(String typeName, String fileName) {
    EJBLookup.typeEngine.save(
            CacheAdmin.environment.getType(typeName)
            .asEditable()
            .setIcon(new FxReference(new ReferencedContent(createTypeIcon(typeName, fileName))))
    )
}

if (!FxSharedUtils.isMinimalRunOnceScripts()) {
    addTypeIcon("image", "type-image.png")
    addTypeIcon(FxType.CONTACTDATA, "type-contact.png")
    addTypeIcon("article", "type-article.png")
    addTypeIcon(FxType.DOCUMENT, "type-document.png")
    addTypeIcon(FxType.FOLDER, "type-folder.png")
}
