//file: init0010_ImageType.gy
//description: Create the "Image" FxType needed for all flexive installations
//expected bindings:
//  ticket ... UserTicket
//  scriptname ... name of this script
//author: Markus Plesser, Unique Computing Solutions GmbH

import com.flexive.shared.*;
import com.flexive.shared.exceptions.*;
import com.flexive.shared.interfaces.ACLEngine;
import com.flexive.shared.interfaces.ContentEngine;
import com.flexive.shared.interfaces.ScriptingEngine;
import com.flexive.shared.interfaces.AssignmentEngine;
import com.flexive.shared.interfaces.TypeEngine;
import com.flexive.shared.scripting.FxScriptInfo;
import com.flexive.shared.scripting.FxScriptEvent;
import com.flexive.shared.structure.*;
import com.flexive.shared.security.ACL;
import com.flexive.shared.FxLanguage
import com.flexive.shared.configuration.SystemParameters
import com.flexive.shared.value.FxString
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder

void createSelectLists() {
    ACL aclList = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLIST);
    ACL aclItem = CacheAdmin.getEnvironment().getDefaultACL(ACL.Category.SELECTLISTITEM);
    FxSelectListEdit compressionList = FxSelectListEdit.createNew("Image Compression", new FxString("Image Compression"), new FxString("Compression algorithm used for images like JPEG"),
            false, aclList, aclItem);
    new FxSelectListItemEdit(aclItem, compressionList, new FxString("unknown"), "unknown", "#FFFFFF");
    new FxSelectListItemEdit(aclItem, compressionList, new FxString("JPEG"), "JPEG", "#FFFFFF");
    new FxSelectListItemEdit(aclItem, compressionList, new FxString("GIF"), "GIF", "#FFFFFF");
    new FxSelectListItemEdit(aclItem, compressionList, new FxString("TIFF"), "TIFF", "#FFFFFF");
    EJBLookup.getSelectListEngine().save(compressionList);
}

def String IMAGE_TYPE = "Image";

def ContentEngine co = EJBLookup.getContentEngine();
def ACLEngine acl = EJBLookup.getACLEngine();
def TypeEngine type = EJBLookup.getTypeEngine();
def AssignmentEngine ass = EJBLookup.getAssignmentEngine();
def ScriptingEngine se = EJBLookup.getScriptingEngine();

try {
    if (CacheAdmin.getEnvironment().getType(IMAGE_TYPE) != null) {
        println "Image type '${IMAGE_TYPE}' already exists! Skipping create attempt!";
        return;
    }
} catch (FxRuntimeException nf) {
    //ok, ignore
}

//create needed select lists
createSelectLists();

def ACL typeACL = CacheAdmin.getEnvironment().getACL(ACL.Category.STRUCTURE.defaultId)
def long typeId = type.save(FxTypeEdit.createNew(IMAGE_TYPE, new FxString(FxLanguage.ENGLISH, "Image").setTranslation(FxLanguage.GERMAN, "Bild"), typeACL, null));

def builder = new GroovyTypeBuilder(typeId)
builder {
    fqn(assignment: CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_FQN_ROOTASSIGNMENT)).getXPath())
    caption(assignment: CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_CAPTION_ROOTASSIGNMENT)).getXPath())
    imagebinary(dataType: FxDataType.Binary, multiplicity: FxMultiplicity.MULT_1_1, acl: typeACL)
    fileName(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_1_1, multilang: false, defaultMultiplicity: 0)
    abstractText(name: "Abstract", alias: "Abstract", dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    dateCreated(dataType: FxDataType.DateTime, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    author(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    authorTitle(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    credit(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    contact(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    source(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    copyright(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    compression(FxDataType.SelectOne, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, referencedList: CacheAdmin.getEnvironment().getSelectList("Image Compression"), defaultMultiplicity: 0)
    pixelXDimension(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    pixelYDimension(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    xResolution(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    yResolution(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    keywords(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_N, multilang: true, defaultMultiplicity: 0)
    TakeLocation(defaultMultiplicity: 0) {
        city(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true)
        subLocation(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        proviceState(label: new FxString("Province/State"), dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        country(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
    }
    MetaData(defaultMultiplicity: 0) {
        manufacturer(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        model(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        orientation(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        focalLength(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        maxApertureValue(dataType: FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureBias(dataType: FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureProgram(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureTime(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        fNumber(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        originatingProgram(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        meteringMode(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        specialInstructions(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        fixtureIdentifier(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
    }
}

FxScriptInfo si = se.createScriptFromLibrary(FxScriptEvent.BeforeContentCreate, "ImageMetaParser.gy", "ImageMetaParser.gy", "Script filling image properties");
se.createTypeScriptMapping(si.getId(), typeId, true, true);