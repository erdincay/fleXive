/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2008
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/

//file: init0010_ImageType.gy
//description: Create the "Image" FxType needed for all flexive installations
//expected bindings:
//  ticket ... UserTicket
//  scriptname ... name of this script
//author: Markus Plesser, Unique Computing Solutions GmbH

import com.flexive.shared.*
import com.flexive.shared.exceptions.*
import com.flexive.shared.interfaces.*
import com.flexive.shared.scripting.*
import com.flexive.shared.structure.*
import com.flexive.shared.security.*
import com.flexive.shared.FxLanguage
import com.flexive.shared.configuration.SystemParameters
import com.flexive.shared.value.FxString
import com.flexive.shared.scripting.groovy.GroovyTypeBuilder
import com.flexive.shared.search.*
void createSelectLists() {
    ACL aclList = CacheAdmin.getEnvironment().getDefaultACL(ACLCategory.SELECTLIST);
    ACL aclItem = CacheAdmin.getEnvironment().getDefaultACL(ACLCategory.SELECTLISTITEM);
    FxSelectListEdit compressionList = FxSelectListEdit.createNew("Image Compression", new FxString("Image Compression"), new FxString("Compression algorithm used for images like JPEG"),
            false, aclList, aclItem);
    new FxSelectListItemEdit("UNKNOWN", aclItem, compressionList, new FxString("Unknown"), "UNKNOWN", "#FFFFFF");
    new FxSelectListItemEdit("NONE", aclItem, compressionList, new FxString("None"), "NONE", "#FFFFFF");
    new FxSelectListItemEdit("LZW", aclItem, compressionList, new FxString("LZW"), "LZW", "#FFFFFF");
    new FxSelectListItemEdit("JPEG", aclItem, compressionList, new FxString("JPEG"), "JPEG", "#FFFFFF");
    new FxSelectListItemEdit("RLE", aclItem, compressionList, new FxString("RLE: Run-Length Encoding"), "RLE", "#FFFFFF");
    new FxSelectListItemEdit("PS", aclItem, compressionList, new FxString("Photoshop"), "PHOTOSHOP", "#FFFFFF");
    new FxSelectListItemEdit("PNG", aclItem, compressionList, new FxString("PNG Filter"), "PNG", "#FFFFFF");
    new FxSelectListItemEdit("CCITT3", aclItem, compressionList, new FxString("CCITT Group 3 1-Dimensional Modified Huffman run-length encoding."), "CCITT_GROUP_3", "#FFFFFF");
    new FxSelectListItemEdit("CCITT4", aclItem, compressionList, new FxString("CCITT Group 4"), "CCITT_GROUP_4", "#FFFFFF");
    new FxSelectListItemEdit("CCITT1", aclItem, compressionList, new FxString("CCITT 1D"), "CCITT_1D", "#FFFFFF");

    EJBLookup.getSelectListEngine().save(compressionList);

    FxSelectListEdit orientationList = FxSelectListEdit.createNew("Image Orientation", new FxString("Image Orientation"), new FxString("Image orientation like portrait or landscape"),
            false, aclList, aclItem);
    new FxSelectListItemEdit("UNKNOWN", aclItem, orientationList, new FxString("Unknown"), "UNKNOWN", "#FFFFFF");
    new FxSelectListItemEdit("Portrait", aclItem, orientationList, new FxString("Portrait"), "0", "#FFFFFF");
    new FxSelectListItemEdit("Landscape", aclItem, orientationList, new FxString("Landscape"), "1", "#FFFFFF");
    EJBLookup.getSelectListEngine().save(orientationList);
}

def String IMAGE_TYPE = "Image";

def ContentEngine co = EJBLookup.getContentEngine();
def ACLEngine acl = EJBLookup.getAclEngine();
def TypeEngine type = EJBLookup.getTypeEngine();
def AssignmentEngine ass = EJBLookup.getAssignmentEngine();
def ScriptingEngine se = EJBLookup.getScriptingEngine();

try {
    if (CacheAdmin.getEnvironment().getType(IMAGE_TYPE) != null) {
        println "Image type '${IMAGE_TYPE}' already exists! Skipping create attempt!";
        return;
    }
} catch (FxRuntimeException nf) {
    //ok, ignore
}

//create needed select lists
createSelectLists();

def ACL typeACL = CacheAdmin.getEnvironment().getACL(ACLCategory.STRUCTURE.defaultId)
def long typeId = type.save(FxTypeEdit.createNew(IMAGE_TYPE, new FxString(FxLanguage.ENGLISH, "Image").setTranslation(FxLanguage.GERMAN, "Bild"), typeACL, null));

def builder = new GroovyTypeBuilder(typeId)
builder {
    fqn(assignment: CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_FQN_ROOTASSIGNMENT)).getXPath())
    caption(assignment: CacheAdmin.getEnvironment().getAssignment((Long) EJBLookup.configurationEngine.get(SystemParameters.TREE_CAPTION_ROOTASSIGNMENT)).getXPath())
    imagebinary(dataType: FxDataType.Binary, multiplicity: FxMultiplicity.MULT_1_1, acl: typeACL)
    fileName(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_1_1, multilang: false, defaultMultiplicity: 0)
    abstractText(name: "Abstract", alias: "Abstract", dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    dateCreated(dataType: FxDataType.DateTime, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    author(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    authorTitle(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    credit(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    contact(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    source(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    copyright(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true, defaultMultiplicity: 0)
    compression(FxDataType.SelectOne, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, referencedList: CacheAdmin.getEnvironment().getSelectList("Image Compression"), defaultMultiplicity: 0)
    pixelXDimension(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    pixelYDimension(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    xResolution(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    yResolution(FxDataType.Double, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    bitsPerPixel(FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    colorType(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
    keywords(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_N, multilang: true, defaultMultiplicity: 0)
    TakeLocation(defaultMultiplicity: 0) {
        city(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: true)
        subLocation(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        proviceState(label: new FxString("Province/State"), dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        country(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
    }
    MetaData(defaultMultiplicity: 0) {
        manufacturer(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        model(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        orientation(FxDataType.SelectOne, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, referencedList: CacheAdmin.getEnvironment().getSelectList("Image Orientation"), defaultMultiplicity: 0)
        iso(name:"ISO", FxDataType.Number, multiplicity: FxMultiplicity.MULT_0_1, multilang: false, defaultMultiplicity: 0)
        focalLength(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        maxApertureValue(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        apertureValue(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureBias(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureProgram(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        exposureTime(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        fNumber(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        originatingProgram(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        meteringMode(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        specialInstructions(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        fixtureIdentifier(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        flash(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
        whiteBalance(dataType: FxDataType.String1024, multiplicity: FxMultiplicity.MULT_0_1, multilang: false)
    }
}

FxScriptInfo si = se.createScriptFromLibrary(FxScriptEvent.BeforeContentCreate, "ImageMetaParser.gy", "ImageMetaParser.gy", "Script filling image properties");
se.createTypeScriptMapping(si.getId(), typeId, true, true);

EJBLookup.resultPreferencesEngine.saveSystemDefault(
        new ResultPreferences(
                [new ResultColumnInfo("#image/imageBinary"),
                 new ResultColumnInfo("@pk"),
                 new ResultColumnInfo("#image/caption"),
                 new ResultColumnInfo("#image/dateCreated"),
                 new ResultColumnInfo("#image/filename"),
                 new ResultColumnInfo("#image/author")
                ],
                [new ResultOrderByInfo("#image/caption", SortDirection.ASCENDING)],
                25, 0
        ),
        CacheAdmin.environment.getType(IMAGE_TYPE).id,
        ResultViewType.LIST,
        AdminResultLocations.values()
)
