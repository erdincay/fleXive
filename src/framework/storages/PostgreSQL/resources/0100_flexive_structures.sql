-- register stored procedures needed for this script
-- TDB

-- Currently PostgreSQL' binary type BYTEA is used to store blob's but is limited to 1GB
-- see http://jdbc.postgresql.org/documentation/head/binary-data.html
-- and http://www.postgresql.org/docs/8.4/interactive/datatype-binary.html

-- NUMERIC is used for Double

-- -------------------------
-- Languages
-- -------------------------
CREATE TABLE FXS_LANG (
  LANG_CODE INTEGER NOT NULL PRIMARY KEY,
  ISO_CODE VARCHAR(2) NOT NULL,
  INUSE BOOLEAN DEFAULT FALSE,
  DISPPOS INTEGER,
  CONSTRAINT unique_iso UNIQUE(ISO_CODE)
);
COMMENT ON COLUMN FXS_LANG.INUSE IS 'use this language?';
COMMENT ON COLUMN FXS_LANG.DISPPOS IS 'display position';
COMMENT ON TABLE FXS_LANG IS 'Language definitions';

CREATE TABLE FXS_LANG_T (
  LANG_CODE INTEGER NOT NULL,
  LANG INTEGER NOT NULL,
  DESCRIPTION TEXT NOT NULL,
  FOREIGN KEY (LANG_CODE) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
ALTER TABLE FXS_LANG_T ADD CONSTRAINT LANG_CODE_LANG UNIQUE(LANG_CODE, LANG);
COMMENT ON TABLE FXS_LANG IS 'Language definitions (translations)';

-- -------------------------
-- MANDATORS
-- -------------------------
CREATE TABLE FXS_MANDATOR (
 ID BIGINT NOT NULL,
 NAME VARCHAR(255) NOT NULL,
 METADATA BIGINT,
 IS_ACTIVE BOOLEAN NOT NULL,
 CREATED_BY BIGINT NOT NULL,
 CREATED_AT BIGINT NOT NULL,
 MODIFIED_BY BIGINT NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 PRIMARY KEY(ID),
 CONSTRAINT UK_MANDATORS_NAME UNIQUE (NAME)
);
COMMENT ON TABLE FXS_MANDATOR IS 'all available mandators';

-- -------------------------
-- ACCOUNTS
-- -------------------------
CREATE TABLE FXS_ACCOUNTS (
 ID BIGINT NOT NULL,
 MANDATOR BIGINT NOT NULL,
 USERNAME VARCHAR(255) NOT NULL,
 PASSWORD VARCHAR(255) NOT NULL,
 EMAIL VARCHAR(255) NOT NULL,
 CONTACT_ID BIGINT,
 VALID_FROM BIGINT,
 VALID_TO BIGINT,
 DESCRIPTION VARCHAR(2000) DEFAULT '',
 CREATED_BY BIGINT NOT NULL,
 CREATED_AT BIGINT NOT NULL,
 MODIFIED_BY BIGINT NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 IS_ACTIVE BOOLEAN NOT NULL,
 IS_VALIDATED BOOLEAN NOT NULL,
 LANG INTEGER NOT NULL DEFAULT 1,
 LOGIN_NAME VARCHAR(255) NOT NULL,
 ALLOW_MULTILOGIN BOOLEAN NOT NULL,
 DEFAULT_NODE BIGINT,
 UPDATETOKEN VARCHAR(64) NULL,
 REST_TOKEN CHAR(64) NULL,
 REST_EXPIRES BIGINT NULL,
 PRIMARY KEY(ID),
 CONSTRAINT UK_ACCOUNTS_LOGIN_NAME UNIQUE(USERNAME),
 CONSTRAINT UK_ACCOUNTS_REST_TOKEN UNIQUE(REST_TOKEN),
 FOREIGN KEY(MANDATOR) REFERENCES FXS_MANDATOR(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
 FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ACCOUNTS IS 'accounts';
CREATE INDEX IDX_ACCOUNTS_USERNAME ON FXS_ACCOUNTS(USERNAME);
CREATE INDEX IDX_ACCOUNTS_EMAIL ON FXS_ACCOUNTS(EMAIL);
CREATE INDEX IDX_ACCOUNTS_REST_TOKEN ON FXS_ACCOUNTS(REST_TOKEN);

-- -------------------------
-- ACCOUNTS DETAILS
-- -------------------------
CREATE TABLE FXS_ACCOUNT_DETAILS (
 ID BIGINT NOT NULL  ,
 APPLICATION VARCHAR(255)NOT NULL,
 LAST_LOGIN BIGINT NOT NULL,
 LAST_LOGIN_FROM VARCHAR(255) NOT NULL,
 ISLOGGEDIN BOOLEAN NOT NULL,
 FAILED_ATTEMPTS INTEGER NOT NULL,
 AUTHSRC VARCHAR(255) NOT NULL,
 -- PRIMARY KEY(ID,APPLICATION),    -- don't use primary key to avoid locking tables for logins (FX-868)
 FOREIGN KEY (ID) REFERENCES FXS_ACCOUNTS(ID)
   ON DELETE CASCADE ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ACCOUNT_DETAILS IS 'accounts details, storing the (last) login state';
CREATE INDEX IDX_ACCOUNT_DETAILS_ID_APP ON FXS_ACCOUNT_DETAILS(ID, APPLICATION);

-- -------------------------
-- GROUPS
-- -------------------------
CREATE TABLE FXS_USERGROUPS (
 ID BIGINT NOT NULL,
 MANDATOR BIGINT NOT NULL,
 AUTOMANDATOR BIGINT,
 ISSYSTEM BOOLEAN NOT NULL DEFAULT FALSE,
 NAME VARCHAR(255) NOT NULL,
 COLOR VARCHAR(32) NOT NULL DEFAULT '000000',
 CREATED_BY BIGINT NOT NULL,
 CREATED_AT BIGINT NOT NULL,
 MODIFIED_BY BIGINT NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 PRIMARY KEY(ID),
 CONSTRAINT UK_USERGROUPS_NAME UNIQUE(NAME,MANDATOR),
 FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
 FOREIGN KEY (AUTOMANDATOR) REFERENCES FXS_MANDATOR(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_USERGROUPS IS 'groups';

-- -------------------------
-- GROUPS to ACCOUNTS
-- -------------------------
CREATE TABLE FXS_USERGROUPMEMBERS (
 ACCOUNT BIGINT NOT NULL,
 USERGROUP BIGINT NOT NULL,
 PRIMARY KEY(ACCOUNT,USERGROUP),
 FOREIGN KEY (ACCOUNT) REFERENCES FXS_ACCOUNTS(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
 FOREIGN KEY (USERGROUP) REFERENCES FXS_USERGROUPS(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_USERGROUPMEMBERS IS 'Groups to accounts relation';

-- -------------------------
-- ACLS
-- -------------------------
CREATE TABLE FXS_ACL (
 ID BIGINT NOT NULL,
 MANDATOR BIGINT NOT NULL,
 NAME VARCHAR(255) NOT NULL,
 DESCRIPTION VARCHAR(255),
 CAT_TYPE INTEGER NOT NULL,
 COLOR VARCHAR(32)  DEFAULT '000000',
 CREATED_BY BIGINT NOT NULL,
 CREATED_AT BIGINT NOT NULL,
 MODIFIED_BY INTEGER NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 PRIMARY KEY(ID),
 FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
 CONSTRAINT UK_ACL_NAME UNIQUE(NAME)
);
COMMENT ON TABLE FXS_ACL IS 'ACLs';
COMMENT ON COLUMN FXS_ACL.CAT_TYPE IS '1=Content, 2=Structure, 3=Workflow';

CREATE TABLE FXS_ACL_T (
  ID BIGINT NOT NULL,
  LANG INTEGER,
  DEFLANG BOOLEAN,
  LABEL TEXT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ACL_T IS 'ACL translations';

-- -------------------------
-- Role Assignments
-- -------------------------
CREATE TABLE FXS_ROLEMAPPING (
  ACCOUNT BIGINT NOT NULL,
  USERGROUP BIGINT NOT NULL,
  ROLE BIGINT NOT NULL,
  PRIMARY KEY(ACCOUNT,USERGROUP,ROLE),
  FOREIGN KEY (ACCOUNT) REFERENCES FXS_ACCOUNTS(ID)
	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (USERGROUP) REFERENCES FXS_USERGROUPS(ID)
	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ROLEMAPPING IS 'Role assignments';

-- -------------------------
-- History tracking
-- -------------------------
CREATE TABLE FXS_HISTORY(
  ACCOUNT BIGINT NOT NULL,
  LOGINNAME VARCHAR(512) NOT NULL,
  TIMESTP BIGINT NOT NULL,
  ACTION_KEY VARCHAR(512) NOT NULL,
  ACTION_ARGS VARCHAR(4096),
  SESSION VARCHAR(256),
  APPLICATION VARCHAR(256),
  REMOTEHOST VARCHAR(256),
  TYPEID BIGINT,
  TYPENAME VARCHAR(256),
  PKID BIGINT,
  PKVER INTEGER,
  EN_MESSAGE TEXT NOT NULL,
  DATA TEXT
);
COMMENT ON TABLE FXS_HISTORY IS 'History tracker';
COMMENT ON COLUMN FXS_HISTORY.ACTION_ARGS IS 'key arguments, separated by pipe characters';

-- -------------------------
-- ACL Assignments
-- -------------------------
CREATE TABLE FXS_ACLASSIGNMENTS(
  USERGROUP BIGINT NOT NULL,
  ACL BIGINT NOT NULL,
  PEDIT BOOLEAN NOT NULL,
  PREMOVE BOOLEAN NOT NULL,
  PEXPORT BOOLEAN NOT NULL,
  PREL BOOLEAN NOT NULL,
  PREAD BOOLEAN NOT NULL,
  PCREATE BOOLEAN NOT NULL,
  CREATED_BY BIGINT NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  MODIFIED_BY BIGINT NOT NULL,
  MODIFIED_AT BIGINT NOT NULL,
  PRIMARY KEY(USERGROUP,ACL),
  FOREIGN KEY (USERGROUP) REFERENCES FXS_USERGROUPS(ID)
	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ACLASSIGNMENTS IS 'ACL assignments';

-- -------------------------
-- Workflows
-- -------------------------
CREATE TABLE FXS_WORKFLOWS(
  ID BIGINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(1024),
  PRIMARY KEY(ID),
  CONSTRAINT UK_WORKFLOWS_NAME UNIQUE(NAME)
);
COMMENT ON TABLE FXS_WORKFLOWS IS 'Workflows';

-- -------------------------
-- Step Definitions
-- -------------------------
CREATE TABLE FXS_WF_STEPDEFS (
  ID BIGINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  UNIQUE_TARGET BIGINT,
  PRIMARY KEY(ID),
  CONSTRAINT UK_STEPDEFS_NAME UNIQUE(NAME),
  FOREIGN KEY(UNIQUE_TARGET) REFERENCES FXS_WF_STEPDEFS(ID)
	  ON DELETE SET NULL
);
COMMENT ON TABLE FXS_WF_STEPDEFS IS 'Step Templates';

-- -------------------------
-- Step Definitions Translations
-- -------------------------
CREATE TABLE FXS_WF_STEPDEFS_T (
  ID BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  DEFLANG BOOLEAN,
  NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(LANG,ID),
  FOREIGN KEY(ID) REFERENCES FXS_WF_STEPDEFS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY(LANG) REFERENCES FXS_LANG(LANG_CODE)
	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_WF_STEPDEFS_T IS 'Step Templates Translation';

-- -------------------------
-- Steps
-- -------------------------
CREATE TABLE FXS_WF_STEPS (
  ID BIGINT NOT NULL,
  STEPDEF BIGINT NOT NULL,
  WORKFLOW BIGINT NOT NULL,
  ACL BIGINT NOT NULL,
  POS INTEGER NOT NULL,
  PRIMARY KEY(ID),
  CONSTRAINT UK_DEF_WF UNIQUE(STEPDEF, WORKFLOW),
  FOREIGN KEY(STEPDEF) REFERENCES FXS_WF_STEPDEFS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY(WORKFLOW) REFERENCES FXS_WORKFLOWS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY(ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_WF_STEPS IS 'Steps';

-- -------------------------
-- Step routes
-- -------------------------
CREATE TABLE FXS_WF_ROUTES (
  ID BIGINT NOT NULL,
  FROM_STEP BIGINT NOT NULL,
  TO_STEP BIGINT NOT NULL,
  USERGROUP BIGINT NOT NULL ,
  PRIMARY KEY(ID),
  CONSTRAINT UK_ROUTE UNIQUE(FROM_STEP, TO_STEP, USERGROUP) ,
  FOREIGN KEY(USERGROUP) REFERENCES FXS_USERGROUPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY(FROM_STEP) REFERENCES FXS_WF_STEPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY(TO_STEP) REFERENCES FXS_WF_STEPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_WF_ROUTES IS 'Routes';

-- -------------------------
-- Content Type Definitions
-- -------------------------
CREATE TABLE FXS_TYPEDEF (
  ID BIGINT NOT NULL,
  ACL BIGINT NOT NULL,
  DEFACL BIGINT,
  WORKFLOW BIGINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  PARENT BIGINT DEFAULT NULL,
  STORAGE_MODE INTEGER NOT NULL,
  CATEGORY INTEGER NOT NULL,
  TYPE_MODE INTEGER NOT NULL,
  LANG_MODE INTEGER NOT NULL,
  TYPE_STATE INTEGER NOT NULL,
  SECURITY_MODE INTEGER NOT NULL,
  MULTIPLE_CONTENT_ACLS BOOLEAN NOT NULL DEFAULT TRUE,
  INSUPERTYPEQUERY BOOLEAN NOT NULL DEFAULT TRUE,
  TRACKHISTORY BOOLEAN NOT NULL,
  HISTORY_AGE BIGINT,
  MAX_VERSIONS INTEGER NOT NULL,
  AUTO_VERSION BOOLEAN NOT NULL DEFAULT FALSE,
  REL_TOTAL_MAXSRC BIGINT NOT NULL,
  REL_TOTAL_MAXDST BIGINT NOT NULL,
  ICON_REF BIGINT,
  CREATED_BY BIGINT NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  MODIFIED_BY BIGINT DEFAULT NULL,
  MODIFIED_AT BIGINT,
  PRIMARY KEY  (ID),
  CONSTRAINT UK_TYPENAME UNIQUE(NAME),
  FOREIGN KEY (PARENT) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (WORKFLOW) REFERENCES FXS_WORKFLOWS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPEDEF IS 'Type definitions';
COMMENT ON COLUMN FXS_TYPEDEF.ACL IS 'ACL for the type, only checked if enabled in permissions';
COMMENT ON COLUMN FXS_TYPEDEF.DEFACL IS 'Optional default ACL for instances';
COMMENT ON COLUMN FXS_TYPEDEF.NAME IS 'name of the type';
COMMENT ON COLUMN FXS_TYPEDEF.PARENT IS 'parent for derived types, null if this is the parent, cyclic checks have to be performed by the application';
COMMENT ON COLUMN FXS_TYPEDEF.STORAGE_MODE IS E'how are data tables organized \n0=inbound\n1=outbound\n2=external table (no versioning, permissions, etc)\n3=memory (nothing persisted, for small amounts of data only, no query engine available!)';
COMMENT ON COLUMN FXS_TYPEDEF.CATEGORY IS '0=system,  1=user';
COMMENT ON COLUMN FXS_TYPEDEF.TYPE_MODE IS '0=Content, 1=Relation';
COMMENT ON COLUMN FXS_TYPEDEF.LANG_MODE IS '0=no multi language, 1=one language per instance, 2=multiple languages per field';
COMMENT ON COLUMN FXS_TYPEDEF.SECURITY_MODE IS 'Bit coded field that indicates which permissions are used. 0=none, 0x01=instance, 0x02=property, 0x04=step, 0x08=type';
COMMENT ON COLUMN FXS_TYPEDEF.MULTIPLE_CONTENT_ACLS IS 'When true, multiple ACLs can be assigned to a content.';
COMMENT ON COLUMN FXS_TYPEDEF.INSUPERTYPEQUERY IS 'When true, this type will be included in supertype queries.';
COMMENT ON COLUMN FXS_TYPEDEF.TRACKHISTORY IS 'track changes on instance data? HISTORY_AGE tells for how long they are kept.';
COMMENT ON COLUMN FXS_TYPEDEF.HISTORY_AGE IS 'Days to keep histories for instance changes if TRACKHISTORY is true. 0=for ever';
COMMENT ON COLUMN FXS_TYPEDEF.MAX_VERSIONS IS E'maximum number of versions to keep (if the storage mode supports versions)\n-1 = unlimited\n0 = no versioning\n> 0 = number of versions to keep';
COMMENT ON COLUMN FXS_TYPEDEF.AUTO_VERSION IS 'When true and contents have changed, a new version will be created when saving.';
COMMENT ON COLUMN FXS_TYPEDEF.REL_TOTAL_MAXSRC IS 'If not 0 used to override the MAXSRC from FXS_TYPERELS for a total amount';
COMMENT ON COLUMN FXS_TYPEDEF.REL_TOTAL_MAXDST IS 'If not 0 used to override the MAXDST from FXS_TYPERELS for a total amount';
COMMENT ON COLUMN FXS_TYPEDEF.ICON_REF IS 'Optional reference to a content instance for a preview icon';

CREATE TABLE FXS_TYPEDEF_T (
  ID BIGINT NOT NULL,
  LANG INTEGER,
  DEFLANG BOOLEAN,
  DESCRIPTION TEXT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPEDEF_T IS 'Type definition translations';

-- ---------------------------------
-- Content Type Relation Definitions
-- ---------------------------------
CREATE TABLE FXS_TYPERELS (
  TYPEDEF BIGINT NOT NULL,
  TYPESRC BIGINT NOT NULL,
  TYPEDST BIGINT NOT NULL,
  MAXSRC BIGINT NOT NULL,
  MAXDST BIGINT NOT NULL,
  CONSTRAINT UK_TYPEREFS UNIQUE(TYPEDEF,TYPESRC,TYPEDST),
  FOREIGN KEY (TYPEDEF) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (TYPESRC) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (TYPEDST) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPERELS IS 'Possible relation definitions';
COMMENT ON COLUMN FXS_TYPERELS.MAXSRC IS 'Max. number of allowed source entries, unlimited if 0';
COMMENT ON COLUMN FXS_TYPERELS.MAXDST IS 'Max. number of allowed destination entries, unlimited if 0';

-- -------------------------
-- Property Groups Definition
-- -------------------------
CREATE TABLE FXS_TYPEGROUPS (
  ID BIGINT NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DEFMINMULT INTEGER NOT NULL,
  DEFMAXMULT INTEGER NOT NULL,
  MAYOVERRIDEMULT BOOLEAN NOT NULL,
  PRIMARY KEY  (ID)
);
COMMENT ON TABLE FXS_TYPEGROUPS IS 'Type Groups';

CREATE TABLE FXS_TYPEGROUPS_T (
  ID BIGINT NOT NULL,
  LANG INTEGER,
  DESCRIPTION TEXT,
  DESCRIPTION_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  HINT TEXT,
  HINT_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEGROUPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPEGROUPS_T IS 'Type Groups translations';
COMMENT ON COLUMN FXS_TYPEGROUPS_T.DESCRIPTION IS 'Description';
COMMENT ON COLUMN FXS_TYPEGROUPS_T.DESCRIPTION_MLD IS 'When true, this is the default language.';
COMMENT ON COLUMN FXS_TYPEGROUPS_T.HINT IS 'Hint messages for GUIs';
COMMENT ON COLUMN FXS_TYPEGROUPS_T.HINT_MLD IS 'When true, this is the default language.';

-- -------------------------
-- Property Datatype Definition
-- -------------------------
CREATE TABLE FXS_DATATYPES (
  TYPECODE BIGINT NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  PRIMARY KEY  (TYPECODE),
  CONSTRAINT UK_DATATYPES_NAME UNIQUE(NAME)
);
COMMENT ON TABLE FXS_DATATYPES IS 'Datatypes';

CREATE TABLE FXS_DATATYPES_T (
  ID BIGINT NOT NULL,
  LANG INTEGER,
  DEFLANG BOOLEAN,
  DESCRIPTION TEXT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_DATATYPES(TYPECODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_DATATYPES_T IS 'Datatypes translations';

-- -------------------------
-- Binary storage
-- -------------------------
CREATE TABLE FX_BINARY (
  ID BIGINT NOT NULL,
  VER INTEGER NOT NULL,
  QUALITY INTEGER NOT NULL,
  FBLOB BYTEA,
  NAME VARCHAR(1025) NOT NULL,
  BLOBSIZE BIGINT NOT NULL,
  XMLMETA TEXT,
  CREATED_AT BIGINT NOT NULL,
  MIMETYPE VARCHAR(256) NOT NULL,
  PREVIEW_REF BIGINT DEFAULT NULL,
  ISIMAGE BOOLEAN NOT NULL,
  RESOLUTION NUMERIC,
  WIDTH INTEGER,
  HEIGHT INTEGER,
  PREV1 BYTEA,
  PREV2 BYTEA,
  PREV3 BYTEA,
  PREV4 BYTEA,
  PREV1_WIDTH INTEGER,
  PREV1_HEIGHT INTEGER,
  PREV2_WIDTH INTEGER,
  PREV2_HEIGHT INTEGER,
  PREV3_WIDTH INTEGER,
  PREV3_HEIGHT INTEGER,
  PREV4_WIDTH INTEGER,
  PREV4_HEIGHT INTEGER,
  PREV1SIZE INTEGER,
  PREV2SIZE INTEGER,
  PREV3SIZE INTEGER,
  PREV4SIZE INTEGER,
  MD5SUM VARCHAR(32) DEFAULT 'unknown',
  PRIMARY KEY (ID, VER, QUALITY),
-- TODO: this is a workaround since foreign keys can only reference primary keys
  FOREIGN KEY (PREVIEW_REF,VER,QUALITY) REFERENCES FX_BINARY(ID,VER,QUALITY)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_BINARY IS 'Binary Datastore';
COMMENT ON COLUMN FX_BINARY.XMLMETA IS 'XML Meta Data like IPTC';
COMMENT ON COLUMN FX_BINARY.PREV1 IS 'if image: scaled to fit a 42x42 box, else null';
COMMENT ON COLUMN FX_BINARY.PREV2 IS 'if image: scaled to fit a 85x85 box, else null';
COMMENT ON COLUMN FX_BINARY.PREV3 IS 'if image: scaled to fit a 232x232 box, else null';
COMMENT ON COLUMN FX_BINARY.PREV4 IS 'if image: scaled to fit a 1024x768 box, else null';

CREATE INDEX FXI_BINARY_ID ON FX_BINARY(ID);
CREATE INDEX FXI_BINARY_VER ON FX_BINARY(VER);
CREATE INDEX FXI_BINARY_MIME ON FX_BINARY(MIMETYPE);
CREATE INDEX FXI_BINARY_PREVIEW_REF ON FX_BINARY(PREVIEW_REF);

-- -------------------------
-- Binary transit table
-- -------------------------
CREATE TABLE FXS_BINARY_TRANSIT (
	BKEY VARCHAR(32) NOT NULL,
    MIMETYPE VARCHAR(256),
	FBLOB BYTEA,
	BLOBSIZE BIGINT,
	TFER_DONE BOOLEAN,
	EXPIRE BIGINT NOT NULL,
	PREVIEW_REF BIGINT DEFAULT NULL,
    PREVIEW_REF_VER INTEGER DEFAULT 1, -- helper column to satisfy foreign key
    PREVIEW_REF_QUALITY INTEGER DEFAULT 1, -- helper column to satisfy foreign key
	PREV1 BYTEA,
    PREV2 BYTEA,
    PREV3 BYTEA,
    PREV4 BYTEA,
    PREV1_WIDTH INTEGER,
    PREV1_HEIGHT INTEGER,
    PREV2_WIDTH INTEGER,
    PREV2_HEIGHT INTEGER,
    PREV3_WIDTH INTEGER,
    PREV3_HEIGHT INTEGER,
    PREV4_WIDTH INTEGER,
    PREV4_HEIGHT INTEGER,
    PREV1SIZE INTEGER,
    PREV2SIZE INTEGER,
    PREV3SIZE INTEGER,
    PREV4SIZE INTEGER,
	PRIMARY KEY (BKEY),
    FOREIGN KEY (PREVIEW_REF, PREVIEW_REF_VER, PREVIEW_REF_QUALITY) REFERENCES FX_BINARY(ID, VER, QUALITY)
  	    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_BINARY_TRANSIT IS 'Binary transit (temporary binary storage)';
COMMENT ON COLUMN FXS_BINARY_TRANSIT.TFER_DONE IS 'Data still being transferred or finished?';
COMMENT ON COLUMN FXS_BINARY_TRANSIT.PREV1 IS 'if image: scaled to fit a 42x42 box, else null';
COMMENT ON COLUMN FXS_BINARY_TRANSIT.PREV2 IS 'if image: scaled to fit a 85x85 box, else null';
COMMENT ON COLUMN FXS_BINARY_TRANSIT.PREV3 IS 'if image: scaled to fit a 232x232 box, else null';
COMMENT ON COLUMN FXS_BINARY_TRANSIT.PREV4 IS 'if image: scaled to fit a 1024x768 box, else null';

CREATE INDEX FXI_BINARY_TR_BKEY ON FXS_BINARY_TRANSIT(BKEY);
CREATE INDEX FXI_BINARY_TR_EXPIRE ON FXS_BINARY_TRANSIT(EXPIRE);

-- -------------------------
-- Selectlists
-- -------------------------
CREATE TABLE FXS_SELECTLIST (
  ID BIGINT NOT NULL,
  PARENTID BIGINT,
  NAME VARCHAR(255) NOT NULL,
  ALLOW_ITEM_CREATE BOOLEAN NOT NULL,
  ACL_CREATE_ITEM BIGINT NOT NULL,
  ACL_ITEM_NEW BIGINT NOT NULL,
  DEFAULT_ITEM BIGINT,
  BCSEP VARCHAR(255) DEFAULT ' > ',
  SAMELVLSELECT BOOLEAN DEFAULT FALSE,
  SORTENTRIES BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (ID),
  CONSTRAINT UK_SELECTLIST_NAME UNIQUE(NAME),
  FOREIGN KEY (PARENTID) REFERENCES FXS_SELECTLIST(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL_CREATE_ITEM) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL_ITEM_NEW) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SELECTLIST IS 'Selectlists';

CREATE TABLE FXS_SELECTLIST_T (
  ID BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  LABEL TEXT,
  LABEL_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  DESCRIPTION TEXT,
  DESCRIPTION_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (ID,LANG),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_SELECTLIST(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SELECTLIST_T IS 'Selectlist translations';
COMMENT ON COLUMN FXS_SELECTLIST_T.LABEL IS 'Label for GUIs';
COMMENT ON COLUMN FXS_SELECTLIST_T.LABEL_MLD IS 'When true, this is the default language.';
COMMENT ON COLUMN FXS_SELECTLIST_T.DESCRIPTION IS 'Description';
COMMENT ON COLUMN FXS_SELECTLIST_T.DESCRIPTION_MLD IS 'When true, this is the default language.';

CREATE TABLE FXS_SELECTLIST_ITEM (
  ID BIGINT NOT NULL,
  ACL BIGINT NOT NULL,
  PARENTID BIGINT,
  LISTID BIGINT NOT NULL,
  NAME VARCHAR(255),
  DATA TEXT,
  COLOR VARCHAR(32) NOT NULL DEFAULT '#000000',
  CREATED_BY BIGINT NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  MODIFIED_BY BIGINT NOT NULL,
  MODIFIED_AT BIGINT NOT NULL,
  DBIN_ID BIGINT,
  DBIN_VER INTEGER,
  DBIN_QUALITY INTEGER,
  POS INTEGER DEFAULT 0,
  PRIMARY KEY (ID),
  CONSTRAINT UK_SELECTLIST_ITEM UNIQUE(LISTID,NAME),
  FOREIGN KEY (LISTID) REFERENCES FXS_SELECTLIST(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (DBIN_ID,DBIN_VER,DBIN_QUALITY) REFERENCES FX_BINARY(ID,VER,QUALITY)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PARENTID) REFERENCES FXS_SELECTLIST_ITEM(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SELECTLIST_ITEM IS 'Selectlist Items';

CREATE INDEX FXI_SELECLIST_ITEM_DBIN_ID ON FXS_SELECTLIST_ITEM(DBIN_ID);

CREATE TABLE FXS_SELECTLIST_ITEM_T (
  ID BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  DEFLANG BOOLEAN,
  LABEL VARCHAR(255) NOT NULL,
  PRIMARY KEY(LANG,ID),
  FOREIGN KEY (ID) REFERENCES FXS_SELECTLIST_ITEM(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SELECTLIST_ITEM_T IS 'Selectlist Items translations';

ALTER TABLE FXS_SELECTLIST ADD FOREIGN KEY (DEFAULT_ITEM) REFERENCES FXS_SELECTLIST_ITEM(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT;

-- -------------------------
-- Property Definition
-- -------------------------
CREATE TABLE FXS_TYPEPROPS (
  ID BIGINT NOT NULL,
  SYSINTERNAL BOOLEAN NOT NULL DEFAULT FALSE,
  NAME VARCHAR(50) NOT NULL,
  DEFMINMULT INTEGER NOT NULL,
  DEFMAXMULT INTEGER NOT NULL,
  MAYOVERRIDEMULT BOOLEAN NOT NULL,
  ACL BIGINT NOT NULL,
  MAYOVERRIDEACL BOOLEAN NOT NULL,
  DATATYPE BIGINT NOT NULL,
  REFTYPE BIGINT,
  REFLIST BIGINT,
  ISFULLTEXTINDEXED BOOLEAN NOT NULL,
  UNIQUEMODE INTEGER NOT NULL DEFAULT 0,
  DEFAULT_VALUE TEXT,
  PRIMARY KEY (ID),
  CONSTRAINT UK_TYPEPROPS_NAME UNIQUE(NAME),
  FOREIGN KEY (DATATYPE) REFERENCES FXS_DATATYPES(TYPECODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (REFTYPE) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (REFLIST) REFERENCES FXS_SELECTLIST(ID)
   	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPEPROPS IS 'Properties';
COMMENT ON COLUMN FXS_TYPEPROPS.MAYOVERRIDEMULT IS 'if true, assignments of this property may override the multiplicity';
COMMENT ON COLUMN FXS_TYPEPROPS.MAYOVERRIDEACL IS 'if true, assignments of this property may override the ACL';
COMMENT ON COLUMN FXS_TYPEPROPS.DATATYPE IS 'Data type like integer, string, numeric, etc.';
COMMENT ON COLUMN FXS_TYPEPROPS.REFTYPE IS 'For referenced data types the referenced type';
COMMENT ON COLUMN FXS_TYPEPROPS.REFLIST IS 'For select list data types the referenced select list';
COMMENT ON COLUMN FXS_TYPEPROPS.ISFULLTEXTINDEXED IS 'Include in fulltext queries';
COMMENT ON COLUMN FXS_TYPEPROPS.DEFAULT_VALUE IS 'Default value serialized to XML';

CREATE TABLE FXS_TYPEPROPS_T (
  ID BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  DESCRIPTION TEXT,
  DESCRIPTION_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  HINT TEXT,
  HINT_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (ID,LANG),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEPROPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPEPROPS_T IS 'Properties translations';
COMMENT ON COLUMN FXS_TYPEPROPS_T.DESCRIPTION IS 'Description';
COMMENT ON COLUMN FXS_TYPEPROPS_T.DESCRIPTION_MLD IS 'When true, this is the default language.';
COMMENT ON COLUMN FXS_TYPEPROPS_T.HINT IS 'Hint messages for GUIs';
COMMENT ON COLUMN FXS_TYPEPROPS_T.HINT_MLD IS 'When true, this is the default language.';

-- -----------------------------
-- Property and Group Assignment
-- -----------------------------
CREATE TABLE FXS_ASSIGNMENTS (
  ID BIGINT NOT NULL,
  ATYPE INTEGER NOT NULL,
  ENABLED BOOLEAN NOT NULL,
  TYPEDEF BIGINT NOT NULL,
  MINMULT INTEGER NOT NULL,
  MAXMULT INTEGER NOT NULL,
  DEFMULT INTEGER NOT NULL,
  POS INTEGER NOT NULL,
  XPATH VARCHAR(512) NOT NULL,
  XALIAS VARCHAR(50),
  BASE BIGINT,
  PARENTGROUP BIGINT NOT NULL,
-- Group (ATYPE==0) fields:
  AGROUP BIGINT,
  GROUPMODE INTEGER,
-- Property (ATYPE==1) fields:
  APROPERTY BIGINT,
  ACL BIGINT,
  DEFLANG INTEGER NOT NULL DEFAULT 0,
  SYSINTERNAL BOOLEAN NOT NULL DEFAULT FALSE,
  DEFAULT_VALUE TEXT,
  PRIMARY KEY (ID),
  CONSTRAINT UK_PROPPOSITIONING UNIQUE(TYPEDEF,POS,PARENTGROUP),
  CONSTRAINT UK_ASSIGNMENTS UNIQUE(TYPEDEF,PARENTGROUP,XALIAS),
  FOREIGN KEY (TYPEDEF) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PARENTGROUP) REFERENCES FXS_ASSIGNMENTS(ID) DEFERRABLE,
--   	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (BASE) REFERENCES FXS_ASSIGNMENTS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT DEFERRABLE,
  FOREIGN KEY (AGROUP) REFERENCES FXS_TYPEGROUPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (APROPERTY) REFERENCES FXS_TYPEPROPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (DEFLANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ASSIGNMENTS IS 'Assignment of properties and groups to types/relations';
COMMENT ON COLUMN FXS_ASSIGNMENTS.ID IS 'Id of this assignment';
COMMENT ON COLUMN FXS_ASSIGNMENTS.ATYPE IS 'Group (0) or Property (1) assignment';
COMMENT ON COLUMN FXS_ASSIGNMENTS.ENABLED IS 'Is this assignment available?';
COMMENT ON COLUMN FXS_ASSIGNMENTS.TYPEDEF IS 'FxType this assignment belongs to';
COMMENT ON COLUMN FXS_ASSIGNMENTS.DEFMULT IS 'Default multiplicity';
COMMENT ON COLUMN FXS_ASSIGNMENTS.BASE IS 'if assigned to a derived type BASE references the same assignment in a parent type, else the assignment to root; if its a root assignment it is 0';
COMMENT ON COLUMN FXS_ASSIGNMENTS.PARENTGROUP IS 'if not 0 the PARENTGROUP is the assignment of the parent group, else it is assigned to the root';
COMMENT ON COLUMN FXS_ASSIGNMENTS.AGROUP IS 'assigned group';
COMMENT ON COLUMN FXS_ASSIGNMENTS.GROUPMODE IS '0=any-of, 1=one-of';
COMMENT ON COLUMN FXS_ASSIGNMENTS.APROPERTY IS 'assigned property';
COMMENT ON COLUMN FXS_ASSIGNMENTS.DEFLANG IS 'Default language if multilingual, 0 (system) if no default set';
COMMENT ON COLUMN FXS_ASSIGNMENTS.DEFAULT_VALUE IS 'Default value serialized to XML';

CREATE TABLE FXS_ASSIGNMENTS_T (
  ID BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  DESCRIPTION TEXT,
  DESCRIPTION_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  HINT TEXT,
  HINT_MLD BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (ID,LANG),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID) REFERENCES FXS_ASSIGNMENTS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_ASSIGNMENTS_T IS 'Assignments translations';
COMMENT ON COLUMN FXS_ASSIGNMENTS_T.DESCRIPTION IS 'Description';
COMMENT ON COLUMN FXS_ASSIGNMENTS_T.DESCRIPTION_MLD IS 'When true, this is the default language.';
COMMENT ON COLUMN FXS_ASSIGNMENTS_T.HINT IS 'Hint messages for GUIs';
COMMENT ON COLUMN FXS_ASSIGNMENTS_T.HINT_MLD IS 'When true, this is the default language.';

-- -------------------------
-- TYPE Options
-- -------------------------
CREATE TABLE FXS_TYPE_OPT (
  OPTKEY VARCHAR(32),
  ID BIGINT NOT NULL,
  ISINHERITED BOOLEAN,
  MAYOVERRIDE BOOLEAN,
  OPTVALUE TEXT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TYPE_OPT IS 'Options for types';

-- -------------------------
-- Property/Assignment Options
-- -------------------------
CREATE TABLE FXS_PROP_OPT (
  OPTKEY VARCHAR(32),
  ID BIGINT NOT NULL,
  ASSID BIGINT,
  ISINHERITED BOOLEAN,
  MAYOVERRIDE BOOLEAN,
  OPTVALUE TEXT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEPROPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ASSID) REFERENCES FXS_ASSIGNMENTS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_PROP_OPT IS 'Options for properties/assignments';

-- -------------------------
-- Group/Assignment Options
-- -------------------------
CREATE TABLE FXS_GROUP_OPT (
  OPTKEY VARCHAR(32),
  ID BIGINT NOT NULL,
  ASSID INTEGER,
  ISINHERITED BOOLEAN,
  MAYOVERRIDE BOOLEAN,
  OPTVALUE TEXT,
  FOREIGN KEY (ID) REFERENCES FXS_TYPEGROUPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ASSID) REFERENCES FXS_ASSIGNMENTS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_GROUP_OPT IS 'Options for groups/assignments';

-- -------------------------
-- Main content data
-- -------------------------
CREATE TABLE FX_CONTENT (
  ID BIGINT NOT NULL,
  VER INTEGER NOT NULL,
  REFID BIGINT,
  REFVER INTEGER,
  TDEF BIGINT NOT NULL,
  MANDATOR BIGINT NOT NULL,
  ACL BIGINT NOT NULL,
  STEP BIGINT NOT NULL,
  MAX_VER INTEGER NOT NULL,
  LIVE_VER INTEGER NOT NULL,
  ISMAX_VER BOOLEAN NOT NULL,
  ISLIVE_VER BOOLEAN NOT NULL,
  ISACTIVE BOOLEAN NOT NULL,
  MAINLANG INTEGER NOT NULL,
  RELSRC_ID BIGINT,
  RELSRC_VER INTEGER,
  RELDST_ID BIGINT,
  RELDST_VER INTEGER,
  RELSRC_POS INTEGER,
  RELDST_POS INTEGER,
  CREATED_BY BIGINT NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  MODIFIED_BY BIGINT NOT NULL,
  MODIFIED_AT BIGINT NOT NULL,
  DBIN_ID BIGINT NOT NULL,
  DBIN_VER INTEGER NOT NULL,
  DBIN_QUALITY INTEGER NOT NULL,
  DBIN_ACL BIGINT NOT NULL,
  PRIMARY KEY (ID,VER),
  FOREIGN KEY (MAINLANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (TDEF) REFERENCES FXS_TYPEDEF(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (STEP) REFERENCES FXS_WF_STEPS(ID)
   ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (DBIN_ID,DBIN_VER,DBIN_QUALITY) REFERENCES FX_BINARY(ID,VER,QUALITY)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (DBIN_ACL) REFERENCES FXS_ACL(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_CONTENT IS 'Content data main table';

CREATE INDEX FXI_CONTENT_REFID ON FX_CONTENT(REFID);
CREATE INDEX FXI_CONTENT_REFVER ON FX_CONTENT(REFVER);
CREATE INDEX FXI_CONTENT_TDEF ON FX_CONTENT(TDEF);
CREATE INDEX FXI_CONTENT_STEP ON FX_CONTENT(STEP);
CREATE INDEX FXI_CONTENT_MANDATOR ON FX_CONTENT(MANDATOR);
CREATE INDEX FXI_CONTENT_ISMAX_VER ON FX_CONTENT(ISMAX_VER);
CREATE INDEX FXI_CONTENT_ISLIVE_VER ON FX_CONTENT(ISLIVE_VER);
CREATE INDEX FXI_CONTENT_ISACTIVE ON FX_CONTENT(ISACTIVE);
CREATE INDEX FXI_CONTENT_MAINLANG ON FX_CONTENT(MAINLANG);
CREATE INDEX FXI_CONTENT_RELSRC_ID ON FX_CONTENT(RELSRC_ID);
CREATE INDEX FXI_CONTENT_RELDST_ID ON FX_CONTENT(RELDST_ID);
CREATE INDEX FXI_CONTENT_CREATED_BY ON FX_CONTENT(CREATED_BY);
CREATE INDEX FXI_CONTENT_CREATED_AT ON FX_CONTENT(CREATED_AT);
CREATE INDEX FXI_CONTENT_MODIFIED_BY ON FX_CONTENT(MODIFIED_BY);
CREATE INDEX FXI_CONTENT_MODIFIED_AT ON FX_CONTENT(MODIFIED_AT);
CREATE INDEX FXI_CONTENT_DBIN_ID ON FX_CONTENT(DBIN_ID);

-- -------------------------
-- Additional ACLs (2-) for contents.
-- -------------------------
CREATE TABLE FX_CONTENT_ACLS (
  ID BIGINT NOT NULL,
  VER INTEGER NOT NULL,
  ACL BIGINT NOT NULL,

  PRIMARY KEY (ID, VER, ACL),
  FOREIGN KEY (ID,VER) REFERENCES FX_CONTENT(ID,VER)
    ON DELETE CASCADE ON UPDATE RESTRICT,
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT
);

COMMENT ON TABLE FX_CONTENT_ACLS IS 'Additional ACLs for contents';

-- -------------------------
-- Content detail data
-- -------------------------
CREATE TABLE FX_CONTENT_DATA (
  ID BIGINT NOT NULL,
  VER INTEGER NOT NULL,
  POS INTEGER,
  LANG INTEGER NOT NULL,
  TPROP  BIGINT,
  ASSIGN BIGINT NOT NULL,
  XDEPTH INTEGER,
--  XPATH TEXT NOT NULL,
--  XPATHMULT TEXT NOT NULL,
  XMULT VARCHAR(255) NOT NULL,
  XINDEX INTEGER NOT NULL,
  PARENTXMULT VARCHAR(255) NOT NULL,
--  PARENTXPATH TEXT NOT NULL,
  ISMAX_VER BOOLEAN NOT NULL,
  ISLIVE_VER BOOLEAN NOT NULL,
  ISGROUP BOOLEAN NOT NULL,
  ISMLDEF BOOLEAN NOT NULL,
  FSELECT BIGINT DEFAULT 0,
  FREF BIGINT DEFAULT NULL,
  FDATE1 TIMESTAMP(3) NULL DEFAULT NULL,
  FDATE2 TIMESTAMP(3) NULL DEFAULT NULL,
  FBLOB INTEGER,
  FBLOB_VER INTEGER DEFAULT 1,  -- helper column to satisfy foreign key
  FBLOB_QUALITY INTEGER DEFAULT 1,  -- helper column to satisfy foreign key
  FCLOB TEXT,
  UFCLOB TEXT,
  FINT INTEGER,
  FBIGINT BIGINT,
  FTEXT1024 VARCHAR(1024),
  UFTEXT1024 VARCHAR(1024),
  FDOUBLE DOUBLE PRECISION,
  FFLOAT REAL,
  FBOOL BOOLEAN,
  PRIMARY KEY (ID,VER,LANG,ASSIGN,XMULT,FSELECT),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (TPROP) REFERENCES FXS_TYPEPROPS(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (FBLOB,FBLOB_VER,FBLOB_QUALITY) REFERENCES FX_BINARY(ID,VER,QUALITY)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID,VER) REFERENCES FX_CONTENT(ID,VER)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (FSELECT) REFERENCES FXS_SELECTLIST_ITEM(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_CONTENT_DATA IS 'Content data detail table';
COMMENT ON COLUMN FX_CONTENT_DATA.POS IS 'Positioning relative to current hierarchy level maintained by flexive';
COMMENT ON COLUMN FX_CONTENT_DATA.TPROP IS 'FXS_TYPEPROPS id unless its a group';
COMMENT ON COLUMN FX_CONTENT_DATA.ASSIGN IS 'Id of the assignment';
COMMENT ON COLUMN FX_CONTENT_DATA.XDEPTH IS 'XPath hierarchy depth';
COMMENT ON COLUMN FX_CONTENT_DATA.XMULT IS 'Multiplicities for each element like 1,1,2,5,etc. preceeded by 1 for the root group';
COMMENT ON COLUMN FX_CONTENT_DATA.XINDEX IS 'Multiplicity of this element';
COMMENT ON COLUMN FX_CONTENT_DATA.PARENTXMULT IS 'XMULT of the parent group (needed for unique positioning), always 1 for entries in the root group';
COMMENT ON COLUMN FX_CONTENT_DATA.ISMLDEF IS 'Is this field the multilanguage default?';
COMMENT ON COLUMN FX_CONTENT_DATA.FREF IS 'Reference to other content instances';
COMMENT ON COLUMN FX_CONTENT_DATA.UFCLOB IS 'Clob with uppercase values';
COMMENT ON COLUMN FX_CONTENT_DATA.FINT IS 'Integer and for references';

-- Special purpose indexes for structure management
CREATE INDEX FXI_CD_ASS ON FX_CONTENT_DATA(ASSIGN);
CREATE INDEX FXI_CD_PRP ON FX_CONTENT_DATA(TPROP);
CREATE INDEX FXI_CD_ASS_XINDEX ON FX_CONTENT_DATA(ASSIGN, XINDEX);
CREATE INDEX FXI_CD_PRP_XINDEX ON FX_CONTENT_DATA(TPROP, XINDEX);
CREATE INDEX FXI_CD_FBLOB ON FX_CONTENT_DATA(FBLOB);

-- needed for reference checks when removing a content
CREATE INDEX FXI_CD_FREF ON FX_CONTENT_DATA(FREF);

-- Combined indexes for the search
CREATE INDEX FXI_CD_ASS_FDATE1     ON FX_CONTENT_DATA(ASSIGN,FDATE1);
CREATE INDEX FXI_CD_PRP_FDATE1     ON FX_CONTENT_DATA(TPROP,FDATE1);
CREATE INDEX FXI_CD_ASS_FDATE2     ON FX_CONTENT_DATA(ASSIGN,FDATE2);
CREATE INDEX FXI_CD_PRP_FDATE2     ON FX_CONTENT_DATA(TPROP,FDATE2);
CREATE INDEX FXI_CD_ASS_FINT       ON FX_CONTENT_DATA(ASSIGN,FINT);
CREATE INDEX FXI_CD_PRP_FINT       ON FX_CONTENT_DATA(TPROP,FINT);
CREATE INDEX FXI_CD_ASS_FBIGINT    ON FX_CONTENT_DATA(ASSIGN,FBIGINT);
CREATE INDEX FXI_CD_PRP_FBIGINT    ON FX_CONTENT_DATA(TPROP,FBIGINT);
CREATE INDEX FXI_CD_ASS_FTEXT1024  ON FX_CONTENT_DATA(ASSIGN,FTEXT1024);
CREATE INDEX FXI_CD_PRP_FTEXT1024  ON FX_CONTENT_DATA(TPROP,FTEXT1024);
CREATE INDEX FXI_CD_ASS_UFTEXT1024 ON FX_CONTENT_DATA(ASSIGN,UFTEXT1024);
CREATE INDEX FXI_CD_PRP_UFTEXT1024 ON FX_CONTENT_DATA(TPROP,UFTEXT1024);
CREATE INDEX FXI_CD_ASS_FDOUBLE    ON FX_CONTENT_DATA(ASSIGN,FDOUBLE);
CREATE INDEX FXI_CD_PRP_FDOUBLE    ON FX_CONTENT_DATA(TPROP,FDOUBLE);
CREATE INDEX FXI_CD_ASS_FFLOAT     ON FX_CONTENT_DATA(ASSIGN,FFLOAT);
CREATE INDEX FXI_CD_PRP_FFLOAT     ON FX_CONTENT_DATA(TPROP,FFLOAT);
CREATE INDEX FXI_CD_ASS_FBOOL      ON FX_CONTENT_DATA(ASSIGN,FBOOL);
CREATE INDEX FXI_CD_PRP_FBOOL      ON FX_CONTENT_DATA(TPROP,FBOOL);

CREATE TABLE FX_CONTENT_DATA_FT (
  ID BIGINT NOT NULL,
  VER INTEGER NOT NULL,
  LANG INTEGER NOT NULL,
  ASSIGN BIGINT NOT NULL,
  XMULT VARCHAR(256) NOT NULL,
  VALUE TSVECTOR,
  PRIMARY KEY (ID,VER,LANG,ASSIGN,XMULT),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (ID,VER) REFERENCES FX_CONTENT(ID,VER)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_CONTENT_DATA_FT IS 'Fulltext content data';
COMMENT ON COLUMN FX_CONTENT_DATA_FT.XMULT IS 'Multiplicities for each element like 1,1,2,5,etc.';

CREATE INDEX FXI_CONTENT_DATA_FT_ID ON FX_CONTENT_DATA_FT(ID);
CREATE INDEX FXI_CONTENT_DATA_FT_VER ON FX_CONTENT_DATA_FT(VER);
CREATE INDEX FXI_CONTENT_DATA_FT_LANG ON FX_CONTENT_DATA_FT(LANG);
CREATE INDEX FXI_CONTENT_DATA_FT_XMULT ON FX_CONTENT_DATA_FT(XMULT);
-- http://www.postgresql.org/docs/8.3/static/textsearch-indexes.html
CREATE INDEX FXI_CONTENT_DATA_FT_VALUE ON FX_CONTENT_DATA_FT USING gist(VALUE);

-- -------------------------
-- Locks
-- -------------------------
CREATE TABLE FXS_LOCK (
  LOCK_ID BIGINT,
  LOCK_VER INTEGER,
  LOCK_RESOURCE VARCHAR(256),
  USER_ID BIGINT NOT NULL,
  LOCKTYPE INTEGER NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  EXPIRES_AT BIGINT NOT NULL,
  FOREIGN KEY (USER_ID) REFERENCES FXS_ACCOUNTS(ID)
		ON DELETE CASCADE ON UPDATE RESTRICT,
  FOREIGN KEY (LOCK_ID,LOCK_VER) REFERENCES FX_CONTENT(ID,VER)
        ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT UK_LOCK_PK UNIQUE (LOCK_ID,LOCK_VER),
  CONSTRAINT UK_LOCK_RES UNIQUE (LOCK_RESOURCE)
);
COMMENT ON TABLE FXS_LOCK IS 'Locks';
CREATE INDEX FXI_LOCK_USER_ID ON FXS_LOCK(USER_ID);
CREATE INDEX FXI_LOCK_ID ON FXS_LOCK(LOCK_ID);
CREATE INDEX FXI_LOCK_ID_VER ON FXS_LOCK(LOCK_ID, LOCK_VER);
CREATE INDEX FXI_LOCK_RESOURCE ON FXS_LOCK(LOCK_RESOURCE);
CREATE INDEX FXI_LOCK_EXPIRES ON FXS_LOCK(EXPIRES_AT);

-- -------------------------
-- SQL Search
-- -------------------------
-- TODO DL: there seems no equivalent to memory tables in postgres, might have to use a maintenance routine to wipe this table
-- In postgreSQL there is TEMPORARY or TEMP -- see : http://www.postgresql.org/docs/8.2/static/sql-createtable.html
CREATE TABLE FXS_SEARCHCACHE_MEMORY (
  SEARCH_ID BIGINT NOT NULL,
  ID BIGINT NOT NULL,
  VER INTEGER,
  TDEF BIGINT NOT NULL,
  CREATED_BY BIGINT NOT NULL,
  PRIMARY KEY(SEARCH_ID,ID,VER)
);
COMMENT ON TABLE FXS_SEARCHCACHE_MEMORY IS 'memory search result holder';

CREATE INDEX FXI_SEARCHCACHE_MEM_ID ON FXS_SEARCHCACHE_MEMORY(SEARCH_ID, TDEF);

CREATE TABLE FXS_SEARCHCACHE_PERM (
  SEARCH_ID BIGINT NOT NULL,
  ID  BIGINT NOT NULL,
  VER  INTEGER,
  TDEF BIGINT NOT NULL,
  CREATED_BY BIGINT NOT NULL,
  PRIMARY KEY(SEARCH_ID,ID,VER)
);
COMMENT ON TABLE FXS_SEARCHCACHE_PERM IS 'nontransactional (performance) search result holder';

-- -------------------------
-- Briefcase
-- -------------------------
CREATE TABLE FXS_BRIEFCASE (
  ID BIGINT NOT NULL,
  ICON_ID BIGINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  DESCRIPTION TEXT NOT NULL,
  SOURCE_QUERY TEXT ,
  ACL BIGINT,
  MANDATOR BIGINT NOT NULL,
  CREATED_BY BIGINT NOT NULL,
  CREATED_AT BIGINT NOT NULL,
  MODIFIED_BY BIGINT NOT NULL,
  MODIFIED_AT BIGINT NOT NULL,
  PRIMARY KEY(ID),
  FOREIGN KEY (ACL) REFERENCES FXS_ACL(ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_BRIEFCASE IS 'briefcase';

CREATE TABLE FXS_BRIEFCASE_DATA (
  BRIEFCASE_ID BIGINT NOT NULL,
  ID INTEGER NOT NULL,
  POS INTEGER NOT NULL,
  AMOUNT BIGINT NOT NULL,
  METADATA VARCHAR(4096) NULL,
  PRIMARY KEY(BRIEFCASE_ID,ID),
  FOREIGN KEY (BRIEFCASE_ID) REFERENCES FXS_BRIEFCASE(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
--  FOREIGN KEY (ID) REFERENCES FX_CONTENT(ID) ON DELETE CASCADE ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_BRIEFCASE_DATA IS 'briefcase content';

CREATE TABLE FXS_BRIEFCASE_DATA_ITEM (
  BRIEFCASE_ID BIGINT NOT NULL,
  ID INTEGER NOT NULL,
  POS INTEGER NOT NULL,
  INTFLAG1 INTEGER NULL,
  INTFLAG2 INTEGER NULL,
  INTFLAG3 INTEGER NULL,
  LONGFLAG1 BIGINT NULL,
  LONGFLAG2 BIGINT NULL,
  METADATA VARCHAR(1024) NULL,
  PRIMARY KEY(BRIEFCASE_ID,ID,POS),
  FOREIGN KEY (BRIEFCASE_ID) REFERENCES FXS_BRIEFCASE(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_BRIEFCASE_DATA_ITEM IS 'briefcase item meta data';

-- -------------------------
-- Scripts table
-- -------------------------
CREATE TABLE FXS_SCRIPTS (
    ID BIGINT NOT NULL,
	SNAME VARCHAR(255) NOT NULL,
	SDESC TEXT,
	SDATA TEXT,
	STYPE INTEGER,
	ACTIVE BOOLEAN NOT NULL,
    IS_CACHED BOOLEAN NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT UK_SCRIPT_NAME UNIQUE(SNAME)
);
COMMENT ON TABLE FXS_SCRIPTS IS 'Scripts';

CREATE INDEX FXI_SCRIPTS_ID ON FXS_SCRIPTS(ID);
CREATE INDEX FXI_SCRIPTS_NAME ON FXS_SCRIPTS(SNAME);
CREATE INDEX FXI_SCRIPTS_TYPE ON FXS_SCRIPTS(STYPE);

-- -------------------------
-- Script schedules table
-- -------------------------
CREATE TABLE FXS_SCRIPT_SCHEDULES (
    ID BIGINT NOT NULL,
	SCRIPT BIGINT NOT NULL,
    SNAME VARCHAR(255),
    ACTIVE BOOLEAN NOT NULL,
	STARTTIME TIMESTAMP(3) NOT NULL,
    ENDTIME TIMESTAMP(3),
    REPEATINTERVAL BIGINT NOT NULL,
    REPEATTIMES INTEGER NOT NULL,
    CRONSTRING VARCHAR(255),
	PRIMARY KEY (ID),
    FOREIGN KEY (SCRIPT) REFERENCES FXS_SCRIPTS(ID)
  	    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SCRIPT_SCHEDULES IS 'Script Schedules';

CREATE INDEX FXS_SCRIPT_SCHEDULES_ID ON FXS_SCRIPT_SCHEDULES(ID);

-- ------------------------------------------
-- Scriptmapping table for assignments
-- ------------------------------------------
CREATE TABLE FXS_SCRIPT_ASS_MAPPING (
    ASSIGNMENT BIGINT NOT NULL,
    SCRIPT BIGINT NOT NULL,
    DERIVED_USAGE BOOLEAN NOT NULL,
	ACTIVE BOOLEAN NOT NULL,
	STYPE INTEGER NOT NULL,
	PRIMARY KEY (ASSIGNMENT,SCRIPT,STYPE),
	FOREIGN KEY (ASSIGNMENT) REFERENCES FXS_ASSIGNMENTS(ID)
  	    ON DELETE CASCADE ON UPDATE RESTRICT,
  	FOREIGN KEY (SCRIPT) REFERENCES FXS_SCRIPTS(ID)
  	    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SCRIPT_ASS_MAPPING IS 'Scriptmapping table for assignments';
COMMENT ON COLUMN FXS_SCRIPT_ASS_MAPPING.DERIVED_USAGE IS 'Use in derived assignments as well?';

CREATE INDEX FXI_SCRIPTMAP_ASS_ASSID ON FXS_SCRIPT_ASS_MAPPING(ASSIGNMENT);
CREATE INDEX FXI_SCRIPTMAP_ASS_SCRIPT ON FXS_SCRIPT_ASS_MAPPING(SCRIPT);
CREATE INDEX FXI_SCRIPTMAP_ASS_ACTIVE ON FXS_SCRIPT_ASS_MAPPING(ACTIVE);
CREATE INDEX FXI_SCRIPTMAP_ASS_STYPE ON FXS_SCRIPT_ASS_MAPPING(STYPE);

-- ------------------------------------
-- Scriptmapping table for types
-- ------------------------------------
CREATE TABLE FXS_SCRIPT_TYPE_MAPPING (
    TYPEDEF BIGINT NOT NULL,
    SCRIPT BIGINT NOT NULL,
    DERIVED_USAGE BOOLEAN NOT NULL,
	ACTIVE BOOLEAN NOT NULL,
	STYPE INTEGER NOT NULL,
	PRIMARY KEY (TYPEDEF,SCRIPT,STYPE),
	FOREIGN KEY (TYPEDEF) REFERENCES FXS_TYPEDEF(ID)
  	    ON DELETE CASCADE ON UPDATE RESTRICT,
  	FOREIGN KEY (SCRIPT) REFERENCES FXS_SCRIPTS(ID)
  	    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_SCRIPT_TYPE_MAPPING IS 'Scriptmapping table for types';
COMMENT ON COLUMN FXS_SCRIPT_TYPE_MAPPING.DERIVED_USAGE IS 'Use in derived types as well?';

CREATE INDEX FXI_SCRIPTMAP_TYPE_TYPEDEF ON FXS_SCRIPT_TYPE_MAPPING(TYPEDEF);
CREATE INDEX FXI_SCRIPTMAP_TYPE_SCRIPT  ON FXS_SCRIPT_TYPE_MAPPING(SCRIPT);
CREATE INDEX FXI_SCRIPTMAP_TYPE_ACTIVE  ON FXS_SCRIPT_TYPE_MAPPING(ACTIVE);

-- -------------------------
-- User configuration table
-- -------------------------
CREATE TABLE FXS_USERCONFIGURATION (
	USER_ID BIGINT NOT NULL,
	CPATH VARCHAR(255) NOT NULL,
	CKEY VARCHAR(255) NOT NULL,
	CVALUE TEXT,
    CLASSNAME VARCHAR(255) NULL,
	PRIMARY KEY (USER_ID, CPATH, CKEY),
	FOREIGN KEY (USER_ID) REFERENCES FXS_ACCOUNTS(ID)
		ON DELETE CASCADE ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_USERCONFIGURATION IS 'Per-user configuration table';

-- -------------------------
-- Division configuration table
-- -------------------------
CREATE TABLE FXS_DIVISIONCONFIGURATION (
	CPATH VARCHAR(255) NOT NULL,
	CKEY VARCHAR(255) NOT NULL,
	CVALUE TEXT,
    CLASSNAME VARCHAR(255) NULL,
	PRIMARY KEY (CPATH, CKEY)
);
COMMENT ON TABLE FXS_DIVISIONCONFIGURATION IS 'Global division configuration table';

-- -------------------------
-- Mandator configuration table
-- -------------------------
CREATE TABLE FXS_MANDATORCONFIGURATION (
    MANDATOR_NAME VARCHAR(255) NOT NULL,
	CPATH VARCHAR(255) NOT NULL,
	CKEY VARCHAR(255) NOT NULL,
	CVALUE TEXT,
    CLASSNAME VARCHAR(255) NULL,
	PRIMARY KEY (MANDATOR_NAME, CPATH, CKEY),
    FOREIGN KEY(MANDATOR_NAME) REFERENCES FXS_MANDATOR(NAME)
        ON DELETE CASCADE ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_MANDATORCONFIGURATION IS 'Mandator configuration table';

-- -------------------------
-- Application configuration table
-- -------------------------
CREATE TABLE FXS_APPLICATIONCONFIGURATION (
    APPLICATION_ID VARCHAR(255) NOT NULL,
	CPATH VARCHAR(255) NOT NULL,
	CKEY VARCHAR(255) NOT NULL,
	CVALUE TEXT,
    CLASSNAME VARCHAR(255) NULL,
	PRIMARY KEY (APPLICATION_ID, CPATH, CKEY)
);
COMMENT ON TABLE FXS_APPLICATIONCONFIGURATION IS 'Application configuration table';

-- -------------------------
-- Node configuration table
-- -------------------------
CREATE TABLE FXS_NODECONFIGURATION (
    NODE_ID VARCHAR(255) NOT NULL,
	CPATH VARCHAR(255) NOT NULL,
	CKEY VARCHAR(255) NOT NULL,
	CVALUE TEXT,
    CLASSNAME VARCHAR(255) NULL,
	PRIMARY KEY (NODE_ID, CPATH, CKEY)
);
COMMENT ON TABLE FXS_NODECONFIGURATION IS 'Node configuration table';

-- -------------------------
-- Edit Tree
-- -------------------------
CREATE TABLE FXS_TREE  (
 ID BIGINT NOT NULL,
 NAME VARCHAR(1024) NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 DIRTY BOOLEAN NOT NULL,
 PARENT BIGINT,
 DEPTH BIGINT,
 CHILDCOUNT BIGINT NOT NULL,
 REF BIGINT,
 TEMPLATE VARCHAR(2000),
 LFT DECIMAL NOT NULL,
 RGT DECIMAL NOT NULL,
 PRIMARY KEY(ID),
 FOREIGN KEY (parent) REFERENCES FXS_TREE(id) DEFERRABLE
-- ,
-- FOREIGN KEY (REF) REFERENCES FX_CONTENT(ID)
--  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TREE IS 'Hierarchical Treestore (Edit)';

CREATE INDEX FXI_TREE_EDIT_LFT ON FXS_TREE(LFT);
CREATE INDEX FXI_TREE_EDIT_RGT ON FXS_TREE(RGT);
CREATE INDEX FXI_TREE_EDIT_REF ON FXS_TREE(REF);
-- PostgreSQL doesn't seem to use the foreign key index for parent, in contrast to MySQL
CREATE INDEX FXI_TREE_EDIT_PARENT ON FXS_TREE(PARENT);

-- -------------------------
-- Live Tree
-- -------------------------
CREATE TABLE FXS_TREE_LIVE  (
 ID BIGINT NOT NULL,
 NAME VARCHAR(1024) NOT NULL,
 MODIFIED_AT BIGINT NOT NULL,
 DIRTY BOOLEAN NOT NULL,
 PARENT BIGINT,
 DEPTH BIGINT,
 CHILDCOUNT BIGINT NOT NULL,
 REF BIGINT,
 TEMPLATE VARCHAR(2000),
 LFT DECIMAL NOT NULL,
 RGT DECIMAL NOT NULL,
 PRIMARY KEY(ID),
 FOREIGN KEY (parent) REFERENCES FXS_TREE_LIVE(id) DEFERRABLE
-- ,
-- FOREIGN KEY (REF) REFERENCES FX_CONTENT(ID)
--  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FXS_TREE_LIVE IS 'Hierarchical Treestore (Live)';

CREATE INDEX FXI_TREE_LIVE_LFT ON FXS_TREE_LIVE(LFT);
CREATE INDEX FXI_TREE_LIVE_RGT ON FXS_TREE_LIVE(RGT);
CREATE INDEX FXI_TREE_LIVE_REF ON FXS_TREE_LIVE(REF);
-- PostgreSQL doesn't seem to use the foreign key index for parent, in contrast to MySQL
CREATE INDEX FXI_TREE_LIVE_PARENT ON FXS_TREE_LIVE(PARENT);

-- -------------------------
-- DIVISION RESOURCES
-- -------------------------
CREATE TABLE FX_RES (
  RKEY VARCHAR(250) NOT NULL,
  LANG INTEGER NOT NULL,
  RVAL TEXT NOT NULL,
  PRIMARY KEY(RKEY, LANG),
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_RES IS 'Resources';
CREATE INDEX FXI_RES_KEY ON FX_RES(RKEY);

-- -------------------------
-- PHRASES
-- -------------------------
CREATE TABLE FX_PHRASE (
  ID BIGINT NOT NULL,
  MANDATOR BIGINT NOT NULL,
  CAT INTEGER NOT NULL DEFAULT 0,
  PKEY VARCHAR(250) NOT NULL,
  HID BOOLEAN DEFAULT FALSE,
  PRIMARY KEY(ID, MANDATOR),
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
    	ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT UNIQUE_PKEY UNIQUE(ID,MANDATOR,PKEY)
);
COMMENT ON TABLE FX_PHRASE IS 'Phrases';
CREATE INDEX FXI_PHRASE_KEY ON FX_PHRASE(MANDATOR, PKEY);
CREATE INDEX FXI_PHRASE_HID ON FX_PHRASE(HID);
CREATE INDEX FXI_PHRASE_CAT ON FX_PHRASE(CAT);

-- -------------------------
-- PHRASE VALUES
-- -------------------------
CREATE TABLE FX_PHRASE_VAL (
  ID BIGINT NOT NULL,
  MANDATOR BIGINT NOT NULL,
  LANG INTEGER NOT NULL,
  PVAL TEXT NOT NULL,
  SVAL TEXT NOT NULL,
  TAG VARCHAR(250),
  PRIMARY KEY(ID,MANDATOR,LANG),
  FOREIGN KEY (ID,MANDATOR) REFERENCES FX_PHRASE(ID,MANDATOR)
    	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (LANG) REFERENCES FXS_LANG(LANG_CODE)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
    	ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_PHRASE_VAL IS 'Phrase values';
CREATE INDEX FXI_PHRASE_SVAL ON FX_PHRASE_VAL(SVAL);

-- -------------------------
-- PHRASE TREE
-- -------------------------
CREATE TABLE FX_PHRASE_TREE (
  ID BIGINT NOT NULL,
  MANDATOR BIGINT NOT NULL,
  CAT INTEGER NOT NULL DEFAULT 0,
  PARENTID BIGINT,
  PARENTMANDATOR BIGINT,
  PHRASEID BIGINT NOT NULL,
  PMANDATOR BIGINT NOT NULL,
  POS INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY(ID, MANDATOR),
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PARENTMANDATOR) REFERENCES FXS_MANDATOR(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PHRASEID, PMANDATOR) REFERENCES FX_PHRASE(ID, MANDATOR)
      ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PMANDATOR) REFERENCES FXS_MANDATOR(ID)
      ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_PHRASE_TREE IS 'Phrase Tree';

-- -------------------------
-- PHRASE MAPPING
-- -------------------------
CREATE TABLE FX_PHRASE_MAP (
  MANDATOR BIGINT NOT NULL,
  NODEID BIGINT NOT NULL,
  NODEMANDATOR BIGINT NOT NULL,
  PHRASEID BIGINT NOT NULL,
  PMANDATOR BIGINT NOT NULL,
  POS INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY(MANDATOR, NODEID, NODEMANDATOR, PHRASEID, PMANDATOR),
  FOREIGN KEY (MANDATOR) REFERENCES FXS_MANDATOR(ID)
    	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (NODEMANDATOR) REFERENCES FXS_MANDATOR(ID)
  	ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PMANDATOR) REFERENCES FXS_MANDATOR(ID)
    ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (PHRASEID,PMANDATOR) REFERENCES FX_PHRASE(ID,MANDATOR)
    ON DELETE RESTRICT ON UPDATE RESTRICT
);
COMMENT ON TABLE FX_PHRASE_MAP IS 'Phrase Mapping';
CREATE INDEX FXI_PHRASE_MAP_KEY ON FX_PHRASE_MAP(PHRASEID, PMANDATOR);
CREATE INDEX FXI_PHRASE_MAP_POS ON FX_PHRASE_MAP(NODEMANDATOR, POS);
