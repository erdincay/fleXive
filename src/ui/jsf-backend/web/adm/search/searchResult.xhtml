<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:t="http://myfaces.apache.org/tomahawk"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:adm="http://www.flexive.com/jsf/admin"
      xmlns:fx="http://www.flexive.com/jsf/core"
      xmlns:weblet="http://weblets.dev.java.net/tags_jsp2">
<body>

<ui:composition template="/adm/contentTemplate.xhtml">
    <ui:define name="head">
        <script type="text/javascript" src="#{fxSystemBean.contextPath}/pub/js/#{adm:versionedUrl('selection.js')}"> </script>
        <script type="text/javascript" src="#{fxSystemBean.contextPath}/adm/js/#{adm:versionedUrl('searchResult.js')}"> </script>
        <script type="text/javascript" src="#{fx:webletUrl('com.flexive.faces.weblets','/js/lytebox.js')}"></script>

        <script type="text/javascript">
        <!--
            function getBriefcaseId() {
                return #{empty fxSearchResultBean.briefcase ? -1 : fxSearchResultBean.briefcase.id};
            }

            function getViewType() {
                return "#{fxSearchResultBean.viewType}";
            }

            function getEncodedViewType() {
                return "#{fx:encodeEnum(fxSearchResultBean.viewType)}";
            }

            function getEncodedLocation() {
                return "#{fx:encodeEnum(fxSearchResultBean.location)}";
            }

            var MESSAGES = {
                "SearchResult.dialog.confirm.deleteSelection": "#{fxMessageBean['SearchResult.dialog.confirm.deleteSelection']}",
                "SearchResult.dialog.confirm.deleteRow": "#{fxMessageBean['SearchResult.dialog.confirm.deleteRow']}",
                "SearchResult.button.action.edit": "#{fxMessageBean['SearchResult.button.action.edit']}",
                "SearchResult.button.action.open": "#{fxMessageBean['SearchResult.button.action.open']}",
                "SearchResult.button.action.delete": "#{fxMessageBean['SearchResult.button.action.delete']}",
                "SearchResult.button.action.deleteFromBriefcase": "#{fxMessageBean['SearchResult.button.action.deleteFromBriefcase']}",
                "SearchResult.button.action.more": "#{fxMessageBean['SearchResult.button.action.more']}",
                "SearchResult.status.selected": "#{fxMessageBean['SearchResult.status.selected']}",
                "SearchResult.status.column.reordered": "#{fxMessageBean['SearchResult.status.column.reordered']}"
            }
        //-->
        </script>
    </ui:define>

    <ui:define name="body">
        <c:if test="#{empty fxSearchResultBean.parseRequestParameters}"> </c:if>
        <a4j:form id="frm">
            <h:inputHidden value="#{fxSearchResultBean.viewType}"/>

            <adm:resultTabs activeTab="results"/>

            <c:if test="#{fxSearchResultBean.queryBuilder != null}">
                <!-- Eager fetching of result: #{fxSearchResultBean.result} -->
                <h:inputHidden id="fetchRows" value="#{fxSearchResultBean.fetchRows}"/>
                <h:inputHidden id="versionFilter" value="#{fxSearchResultBean.versionFilter}"/>
                <h:inputHidden id="sortColumnKey" value="#{fxSearchResultBean.sortColumnKey}"/>
                <h:inputHidden id="sortDirection" value="#{fxSearchResultBean.sortDirection}"/>
                <h:inputHidden id="paginatorPage" value="#{fxSearchResultBean.paginatorPage}"/>
                <h:inputHidden id="clearCache" value="#{fxSearchResultBean.clearCache}"/>
                <h:inputHidden id="contentEditorId" value="#{contentEditorBean.id}"/>
                <h:inputHidden id="contentEditorVersion" value="#{contentEditorBean.version}"/>

                <h:selectOneListbox id="typeId" value="#{fxSearchResultBean.typeId}" size="1">
                    <f:selectItems value="#{fxSearchResultBean.contentTypeItems}"/>
                    <a4j:support event="onchange"
                                 actionListener="#{fxSearchResultBean.resetTableView}"
                                 onsubmit="setBusyCursor();"
                                 oncomplete="setDefaultCursor();"
                                 reRender="refreshResults"
                                 eventsQueue="updateResults"
                            />
                </h:selectOneListbox>
                <h:selectOneListbox id="version" value="#{fxSearchResultBean.versionFilter}" size="1">
                    <f:selectItems value="#{fxSearchResultBean.versionItems}"/>
                    <a4j:support event="onchange" actionListener="#{fxSearchResultBean.resetTableView}"
                                 onsubmit="setBusyCursor();"
                                 oncomplete="setDefaultCursor();"
                                 reRender="refreshResults"
                                 eventsQueue="updateResults"
                            />
                </h:selectOneListbox>

                <a4j:outputPanel id="refreshResults">
                    <fx:resultTableUpdater var="resultTable" value="#{fxSearchResultBean.result}"/>
                </a4j:outputPanel>


                <div id="resultTableContainer">
                    <fx:resultTable var="resultTable" value="#{fxSearchResultBean.result}" actionColumnHandler="_actionColumnHandler"/>
                </div>

                <fx:menu name="resultsMenu" beforeShow="onShowContextMenu" clickHandler="onContextMenu" trigger="'resultTableContainer'">
                    <fx:menuItemGroup>
                        <fx:menuItem id="show" labelKey="SearchResult.menu.show" icon="open"/>
                        <fx:menuItem id="showScreenview" labelKey="SearchResult.menu.showScreenview" icon="open"/>
                        <fx:menuItem id="edit" labelKey="SearchResult.menu.edit" icon="edit"/>
                    </fx:menuItemGroup>

                    <fx:menuItemGroup>
                        <fx:menuItem id="copy" labelKey="SearchResult.menu.copy" icon="copy"/>
                        <c:if test="#{fxSearchResultBean.briefcaseId != -1}">
                            <fx:menuItem id="deleteBriefcase" labelKey="SearchResult.menu.deleteBriefcase" icon="removeBriefcaseItems"/>
                        </c:if>
                        <fx:menuItem id="delete" labelKey="SearchResult.menu.delete" icon="remove"/>
                    </fx:menuItemGroup>

                    <fx:menuItemGroup>
                        <c:if test="#{fxSearchResultBean.viewType == 'LIST'}">
                            <fx:menuItem id="selectAll" labelKey="SearchResult.menu.selectAll"/>
                        </c:if>
                        <fx:menuItem id="selectAllOnPage" labelKey="SearchResult.menu.selectAllOnPage"/>
                    </fx:menuItemGroup>

                </fx:menu>

                <div style="display:none">
                    <h:commandLink id="showButton" action="#{contentEditorBean.load}" onclick="parent.lockScreen()">
                        <f:setPropertyActionListener value="#{true}" target="#{contentEditorBean.readOnly}"/>
                    </h:commandLink>
                    <h:commandLink id="editButton" action="#{contentEditorBean.load}" onclick="parent.lockScreen()">
                        <f:setPropertyActionListener value="#{false}" target="#{contentEditorBean.readOnly}"/>
                    </h:commandLink>
                </div>
            </c:if>

            <br/>
            <adm:commandButton id="thumbsButton" labelKey="SearchResult.button.view.thumbs"
                               bean="#{fxSearchResultBean}" action="thumbView"
                               icon="view_thumbs#{fxSearchResultBean.viewType == 'THUMBNAILS' ? '_active' : ''}" location="toolbar" lockscreen="false"/>
            <adm:commandButton id="listButton" labelKey="SearchResult.button.view.list"
                               bean="#{fxSearchResultBean}" action="listView"
                               icon="view_list#{fxSearchResultBean.viewType == 'LIST' ? '_active' : ''}" location="toolbar"  lockscreen="false"/>
            <adm:commandButton id="refreshButton" labelKey="SearchResult.button.view.refresh"
                               bean="#{fxSearchResultBean}" action="refresh"
                               icon="reload" location="toolbar"  lockscreen="true" separator="after"/>
            <adm:commandButton id="preferencesButton" labelKey="ResultPreferences.button.open"
                               bean="#{resultPreferencesBean}" action="show"
                               icon="configure" location="both">
                <f:setPropertyActionListener value="#{fxSearchResultBean.typeId}" target="#{resultPreferencesBean.type}"/>
                <f:setPropertyActionListener value="#{fxSearchResultBean.viewType}" target="#{resultPreferencesBean.viewType}"/>
            </adm:commandButton>

            <a4j:outputPanel id="emptyPanel">
            </a4j:outputPanel>
            <a4j:commandButton id="invalidateCacheButton" reRender="emptyPanel" style="display: none">
                <f:setPropertyActionListener value="true" target="#{fxSearchResultBean.clearCache}"/>
            </a4j:commandButton>

            <adm:toolbarPluginButtons/>

        </a4j:form>

        <script type="text/javascript">
        <!--
            if (parent.reloadBriefcases) {
                parent.reloadBriefcases();
            }
            
            flexive.yui.onYahooLoaded(function() {
                if (resultTable == null) {
                    return; // no result available
                }
                // store sort information in form variables
                resultTable.subscribe("columnSortEvent", function(args) {
                    document.getElementById("frm:sortColumnKey").value = args.column.key;
                    document.getElementById("frm:sortDirection").value = args.dir;
                });
                // store new column order in result preferences
                resultTable.subscribe("columnReorderEvent", function(args) {
                    if (args.column.getKey() == "__actions") {
                        return; // reordered the actions column, do nothing
                    }
                    // skip actions column
                    var index = args.column.getKeyIndex();
                    for (var i = 0; i < index; i++) {
                        if (resultTable.getColumnSet().getColumn(i).getKey() == "__actions") {
                            // skip actions column for the result preferences index
                            index -= 1;
                            break;
                        }
                    }
                    flexive.util.getJsonRpc().YahooResultProvider.reorderResultColumn(
                            function(result, exception) {
                                if (exception != null) {
                                    alertDialog(exception.message);
                                    return;
                                }
                                parent.showStatusMessage(
                                        MESSAGES["SearchResult.status.column.reordered"]
                                                .replace("{0}", args.column.label)
                                                .replace("{1}", (index + 1))
                                );
                                invalidateSessionCache();
                            },
                            getSelectedOptionValue(getTypeIdSelect()),
                            getEncodedViewType(),
                            getEncodedLocation(),
                            args.column.getKey(),
                            index
                    );
                });
                // subscribe to paginator changes
                var paginator = resultTable.get("paginator");
                paginator.subscribe("pageChange", function(event) {
                    document.getElementById("frm:paginatorPage").value = event.newValue;
                    window.scrollTo(0, 0);
                });
                paginator.subscribe("rowsPerPageChange", function(event) {
                    document.getElementById("frm:fetchRows").value = event.newValue;
                    window.scrollTo(0, 0);
                });

                // fetch old sort information, apply it if the column still exists
                var sortColumnKey = "#{fxSearchResultBean.sortColumnKey}";
                if (sortColumnKey != "null" && sortColumnKey.length > 0) {
                    var col = resultTable.getColumn(sortColumnKey);
                    if (col != null) {
                        resultTable.sortColumn(col, "#{fxSearchResultBean.sortDirection}");
                    } else {
                        // reset sort information
                        document.getElementById("frm:sortColumnKey").value = "";
                    }
                }

                // fetch old page/rows per page settings
                var page = #{fxSearchResultBean.paginatorPage};
                var rowsPerPage = #{fxSearchResultBean.fetchRows};
                if (rowsPerPage > 0) {
                    paginator.setRowsPerPage(rowsPerPage, false);
                }
                if (page > 0) {
                    paginator.setPage(page, false);
                }
            });
        //-->
        </script>
    </ui:define>

</ui:composition>

</body>
</html>
