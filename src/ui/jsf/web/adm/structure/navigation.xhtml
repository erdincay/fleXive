<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:fn="http://java.sun.com/jsp/jstl/functions"
      xmlns:t="http://myfaces.apache.org/tomahawk"
      xmlns:adm="http://www.flexive.com/jsf/admin"
      xmlns:fx="http://www.flexive.com/jsf/core">

<ui:composition template="/adm/templates/navigation.xhtml">

    <ui:define name="content">

		<script type="text/javascript">
		<!--
            //var contentPage=null;     tracks which page is shown in the content frame..no longer used

            var copyNode=null;
            //copyMode->copy was selected in context menu
            var copyMode=false;
            //cutMode->cut was selected in context menu
            var cutMode=false;

                //actions defined in StructureTreeControllerBean
            function doTreeAction(action, id, value) {
                if (action =="RENAME_ASSIGNMENT") {
                    setTitle(id,value, false);
                }
                if (action =="RENAME_TYPE") {
                    setTitle(id,value, true);
                }
                if (action =="RENAME_SELECT_TYPE") {
                    setTitle(id,value, true);
                    selectNode(id, true);
                }
                if (action =="RENAME_SELECT_ASSIGNMENT") {
                    setTitle(id,value, false);
                    selectNode(id, false);
                }
                if (action=="RELOAD_SELECT_TYPE") {
                    reloadAndKeepExpanded();
                    selectNode(id, true);
                }
                if (action=="RELOAD_SELECT_ASSIGNMENT") {
                    reloadAndKeepExpanded();
                    selectNode(id, false);
                }
                if (action=="RELOAD_EXPAND_TYPE") {
                    reloadStructureTree();
                    expandToNodeWithId(id, true);
                }
                if (action=="RELOAD_EXPAND_ASSIGNMENT") {
                    reloadStructureTree();
                    expandToNodeWithId(id, false);
                }
            }

            // quickfix for reloading the content frame context menu after deletion or
            // creation of a type
            function reloadContentTreeNavFrame() {
                var ctnf = parent.getContentNavFrame();
                if (ctnf != null && ctnf.document !=null && ctnf.document.location != null)
                    ctnf.document.location.reload();
            }

            /* expands the tree and selects the node with ID id
                returns the node object
                isType controls if the node is an assignment or type
                true for type, false for assignment
             */
             function selectNode(id, isType) {
                var node = expandToNodeWithId(id, isType);
                getFxSelector().deselectAll();
                getFxSelector().select(node);
                return node;
            }

            /* expands the tree, selects node and performs click operation
             */
            function openNode(id, isType) {
                structureTreeClickHandler(selectNode(id,isType));
            }

            /*
                isType controls if the node is an assignment or type
                true for type, false for assignment
            */
            function setTitle(id, title, isType) {
                var node= expandToNodeWithId(id, isType);
                if (node.title != title)
                    node.setTitle(title);
            }

            function reloadStructureTree() {
                var newChildren = eval("(" + getJsonRpc().StructureTreeWriter.renderStructureTree(-1) + ")");
                dojo.widget.byId('structureTree').setChildren(newChildren);
                //contentPage=null;
            }
                
            function getFxSelector() {
                return dojo.widget.byId('structureTree').fxSelector;
            }

            function getFxController() {
                return dojo.widget.byId('structureTree').fxController;
            }

            /*expands all parents up to the node with ID id
            the node objects are lazily initialized, altough they are searchable via the propertyId,
            the actual node object is initialized when the parent node is expanded, so it is necessarry to
            obtain the possibly uninitialized children anew after the parent was expanded
            isType controls if the node is an assignment or type
            true for type, false for assignment
            return the initialized node object with the ID id
            */
            function expandToNodeWithId(id, isType) {
                var nodePath =getNodePath(id, isType);
                var childNodeToExpand=dojo.widget.byId('structureTree');
                for (var i=0;i<nodePath.length-1;i++) {
                    var childIndex=nodePath[i][1];
                    childNodeToExpand=childNodeToExpand.children[childIndex];
                    getFxController().expandToNode(childNodeToExpand,true);
                }
                return childNodeToExpand.children[nodePath[nodePath.length-1][1]];
             }

            function arraycopy(source) {
                dest = new Array(source.length);
                for (var i=0;i<source.length;i++) {
                    dest[i]=source[i];
                }
                return dest;
            }

           /*Returns a 2dim array of nodes which are currently expanded, first array entry is id,
            *second is node doc type.
            *
            */
            function getExpandedNodes() {
                return _buildExpandedArray(dojo.widget.byId('structureTree').children, new Array());
            }

            function _buildExpandedArray(childArray, expandedArray) {
                var harray=arraycopy(expandedArray);
                for (var i=0;i<childArray.length;i++) {
                    var node = childArray[i];
                    if (node.isExpanded) {
                       harray.push(new Array(getNodeId(node), node.nodeDocType));
                       harray = _buildExpandedArray(node.children, harray)
                    }
                }
                return harray;
            }

            /* saves expanded state of the tree, reloads the tree and
             * restores the expanded state. !!not to be used after
             * nodes were deleted!!
             */
            function reloadAndKeepExpanded() {
                var ea = getExpandedNodes();
                reloadStructureTree();
                for (var i=0;i<ea.length;i++) {
                    var node = expandToNodeWithId(ea[i][0], isType(ea[i][1]));
                    node.expand();
                }
            }

            /*returns the nodepath as an 2-dim array of nodes and indices, starting from root's
             children upto the node with id ID. The node objects are stored in a 2-dim array,
             where [0] represents the actual node and [1] represents it's index in the parent nodes
             isType controls if the node is an assignment or type
             true for type, false for assignment
             */
            function getNodePath(id, isType) {
                var children = dojo.widget.byId('structureTree').children;
                return searchNode(children,new Array() ,id, isType);
            }

            /*
             * recursively searches for a node with the given id
             * isType controls if the node is an assignment or type
             * true for type, false for assignment
             */
            function searchNode(searcharray, historyarray, id, isType) {
                var foundnode =null;
                for (var i=0;i<searcharray.length && foundnode==null;i++) {
                    var node = searcharray[i];
                    if (node.children) {
                        if (node.children.length >0) {
                           harray = arraycopy(historyarray);
                           harray.push(new Array(node,i));
                           foundnode=searchNode(node.children, harray, id, isType);
                        }
                    }
                    if(isType && node["typeId"]== id || !isType && node["assignmentId"]==id) {
                        foundnode=node;
                        historyarray.push(new Array(node,i));
                        return historyarray;
                    }
                }
                return foundnode;
            }

            function structureTreeClickHandler(node) {
                doContentAction(node, "openInstance");
            }

            //should be invoked by the click handler when normally clicking on tree nodes
            function doContentAction(node, defaultAction) {
                var propertyId = node["assignmentId"] != null ? node["assignmentId"] : node["typeId"];
                if (propertyId != null && propertyId != -1 && parent.frames["contentFrame"].addQueryNode) {
                    // add to search query
                    if (node.nodeDocType=="AssignmentSystemInternal" || node.nodeDocType=="Assignment") {
                        if (getJsonRpc().StructureTreeEditor.isSearchable(propertyId))
                            parent.frames["contentFrame"].addQueryNode(propertyId, node.nodeDocType);
                        else
                            alert("#{fxMessageBean['StructureTree.message.property.notSearchable']}");
                    }
                    else
                        parent.frames["contentFrame"].addQueryNode(propertyId, node.nodeDocType);
                    //alert("sturctureTreeClickHandler, addProperty branch");
                }
                else doContentActionFromContextMenu(node, defaultAction);
            }

            //should be invoked from the nodes in the context menu
            function doContentActionFromContextMenu(node, defaultAction) {
                if ("Assignment" == node.nodeDocType || "AssignmentSystemInternal" == node.nodeDocType) {
                    invokeContentAction("adm/structure/propertyAssignmentEditor.jsf", defaultAction, {id: node["assignmentId"]});
                }
                else if ("Type" == node.nodeDocType || "TypeRelation" == node.nodeDocType) {
                    invokeContentAction("adm/structure/typeEditor.jsf", defaultAction, {id: node["typeId"]});
                }
                else if ("Group" == node.nodeDocType) {
                    invokeContentAction("adm/structure/groupAssignmentEditor.jsf", defaultAction, {id: node["assignmentId"]});
                }
            }

            function showNode(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                doContentActionFromContextMenu(menu.getTreeNode(), "openInstance");
            }

            function editNode(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                doContentActionFromContextMenu(menu.getTreeNode(), "editInstance");
            }

            // create a new property as child of the current node
            function createProperty(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = getNodeId(menu.getTreeNode());

                invokeContentAction("adm/structure/propertyEditor.jsf", "createProperty", {id: parentId, nodeType: menu.getTreeNode().nodeDocType});
                //contentPage=null;
            }

             // create a new group as child of the current node
            function createGroup(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = getNodeId(menu.getTreeNode());

                invokeContentAction("adm/structure/groupEditor.jsf", "createGroup", {id: parentId, nodeType: menu.getTreeNode().nodeDocType});
                //contentPage=null;
            }

            // create a new type
            function createType(menuItem) {
                invokeContentAction("adm/structure/typeEditor.jsf", "createType", {});
                //contentPage=null;
            }

            function createTypeRelation(menuItem) {
                invokeContentAction("adm/structure/typeEditor.jsf", "createTypeRelation", {});
                //contentPage=null;
            }

        /* no longer used
            function assignGroup(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = menu.getTreeNode().assignmentId;

                invokeContentAction("adm/structure/groupAssignmentEditor.jsf", "assignGroup", {id: parentId, nodeType: menu.getTreeNode().nodeDocType});
                contentPage=null;
            }

            function assignProperty(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = menu.getTreeNode().assignmentId;

                invokeContentAction("adm/structure/propertyAssignmentEditor.jsf", "assignProperty", {id: parentId, nodeType: menu.getTreeNode().nodeDocType});
                contentPage=null;
            }
          */

            function deleteAssignment(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var id = menu.getTreeNode().assignmentId;
                _deleteAssignment(id);
            }

            function _deleteAssignment(id) {
                var doDelete = confirm("#{fxMessageBean['StructureTree.message.delete.assignment']}");
                if (doDelete) {
                    try {
                        getJsonRpc().StructureTreeEditor.deleteAssignment(id);
                        if (copyNode!=null && copyNode.assignmentId ==id && (copyNode.nodeDocType=="Group" || copyNode.nodeDocType=="Assignment"))
                            copyNode=null;
                        reloadStructureTree();
                        loadContentPage("adm/content.jsf");
                    }
                    catch (e) {
                        alert(e.message);
                        reloadStructureTree();
                        loadContentPage("adm/content.jsf");
                    }
                }
            }

            function deleteType(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var id = menu.getTreeNode().typeId;
                _deleteType(id);
            }

            function _deleteType(id) {
                var doDelete = confirm("#{fxMessageBean['StructureTree.message.delete.type']}");
                if (doDelete) {
                    try {
                        getJsonRpc().StructureTreeEditor.deleteType(id);
                        reloadStructureTree();
                        reloadContentTreeNavFrame();
                        loadContentPage("adm/content.jsf");
                    }
                    catch (e) {
                        alert(e.message);
                        reloadStructureTree();
                        loadContentPage("adm/content.jsf");
                    }
                }
            }

            function copyAssignment(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                copyNode = menu.getTreeNode();
                copyMode=true;
                cutMode=false;
            }

            function cutAssignment(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                copyNode = menu.getTreeNode();
                copyMode=false;
                cutMode=true;
            }

            function promptAlias() {
                var valid = false;
                var alias="dummy";
                while (!valid && alias!=null && alias!="") {
                    alias =prompt("#{fxMessageBean['StructureTree.message.enterAlias']}");
                    valid = getJsonRpc().StructureTreeEditor.validateAlias(alias);
                    if (!valid)
                        alert("#{fxMessageBean['StructureTree.message.err.invalidAlias']}");
                }
                return alias;
            }

            function pasteBelow(menuItem, alias) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var destId = getNodeId(menu.getTreeNode());
                var destDocType=menu.getTreeNode().nodeDocType;
                try {
                    if (copyMode) {
                        var newAssignmentId = getJsonRpc().StructureTreeEditor.pasteAssignmentRelative(getNodeId(copyNode), copyNode.nodeDocType , destId, destDocType ,alias, 1);
                        reloadAndKeepExpanded();
                        expandToNodeWithId(newAssignmentId, false);
                    }
                    else {
                        getJsonRpc().StructureTreeEditor.moveAssignmentRelative(getNodeId(copyNode), copyNode.nodeDocType, destId, 1);
                        reloadAndKeepExpanded();
                        expandToNodeWithId(getNodeId(copyNode), false);
                    }
                }
                catch (e) {
                        alert(e.message);
                }
            }

            function pasteBelowAs(menuItem) {
                var alias = promptAlias();
                if (alias!=null && alias!="") {
                    pasteBelow(null, alias);
                }
            }

            function pasteAbove(menuItem, alias) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var destId = getNodeId(menu.getTreeNode());
                var destDocType=menu.getTreeNode().nodeDocType;
                try {
                    if (copyMode) {
                        var newAssignmentId = getJsonRpc().StructureTreeEditor.pasteAssignmentRelative(getNodeId(copyNode), copyNode.nodeDocType , destId, destDocType, alias, 0);
                        reloadAndKeepExpanded();
                        expandToNodeWithId(newAssignmentId, false);
                    }
                    else {
                        getJsonRpc().StructureTreeEditor.moveAssignmentRelative(getNodeId(copyNode), copyNode.nodeDocType, destId, 0);
                        reloadAndKeepExpanded();
                        expandToNodeWithId(getNodeId(copyNode), false);
                    }
                }
                catch (e) {
                        alert(e.message);
                }
            }

            function pasteAboveAs(menuItem) {
                var alias = promptAlias();
                if (alias!=null && alias!="") {
                    pasteAbove(null,alias);
                }
            }

            function pasteInto(menuItem, alias) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = getNodeId(menu.getTreeNode());
                var parentType= menu.getTreeNode().nodeDocType;
                try {
                    var newAssignmentId = getJsonRpc().StructureTreeEditor.pasteAssignmentInto(getNodeId(copyNode), copyNode.nodeDocType , parentId, parentType, alias);
                    reloadAndKeepExpanded();
                    expandToNodeWithId(newAssignmentId, false);
                }
                catch (e) {
                        alert(e.message);
                }
            }

            function pasteIntoAs(menuItem) {
                var alias = promptAlias();
                if (alias!=null && alias!="") {
                    pasteInto(null, alias);
                }
            }

            function createContent(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var parentId = menu.getTreeNode().typeId;

                invokeContentAction("adm/content/contentEditor.jsf", "newInstance", {typeId: parentId});
                //contentPage=null;
            }

            function getNodeId(node) {
                return node.assignmentId != null
                        ? node.assignmentId
                        : node.typeId;
            }

            function searchContents(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var nodeId = getNodeId(menu.getTreeNode());
                var docType = menu.getTreeNode().nodeDocType;

                if (parent.frames["contentFrame"].isQueryEditor) {
                    // add node to query
                    parent.frames["contentFrame"].addQueryNode(nodeId, docType);
                } else {
                    // open query editor
                    if (isType(docType)) {
                        invokeContentAction("adm/search/query.jsf", "typeSearch", {typeId: nodeId});
                    } else {
                        invokeContentAction("adm/search/query.jsf", "assignmentSearch", {assignmentId: nodeId});
                    }
                }
                // submit query
                //invokeContentAction("adm/search/searchResult.jsf", "nodeSearch", {nodeId: nodeId});

                //contentPage=null;
            }

            function searchContentsByProperty(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var nodeId = menu.getTreeNode().propertyId;
                if (parent.frames["contentFrame"].isQueryEditor) {
                    parent.frames["contentFrame"].addPropertyQueryNode(nodeId);
                } else {
                    invokeContentAction("adm/search/query.jsf", "propertySearch", {propertyId: nodeId});
                }
            }

            function createTestData(menuItem) {
                var menu = dojo.widget.byId("structureTreeMenu");
                var nodeId = getNodeId(menu.getTreeNode());
                if (menu.getTreeNode().nodeDocType == "Type")
                    invokeContentAction("adm/content/createTestData.jsf", "setTypeId", {typeId: nodeId});
            }

            function showTreeMenu() {
                var menu = dojo.widget.byId("structureTreeMenu");
                if (menu.getTreeNode() == null) {
                    return;
                }
                var node = menu.getTreeNode();
                if (!node.nodeDocType)
                    return;
                var lackRole = #{not fxSystemBean.isInRole['StructureManagement']};
                var notGlobalSupervisor = #{not fxSystemBean.isInRole['GlobalSupervisor']};
                var mayOpen = !lackRole || #{fxSystemBean.isInRole['ScriptManagement']};
                setActionDisabled(menu.getTreeNode(), "editNode", !mayOpen || (node.nodeDocType =="AssignmentSystemInternal" && notGlobalSupervisor));
                setActionDisabled(menu.getTreeNode(), "createContent", node.nodeDocType!="Type");
                setActionDisabled(menu.getTreeNode(), "createProperty", !(node.nodeDocType=="Group" || isType(node.nodeDocType)) || lackRole);
                setActionDisabled(menu.getTreeNode(), "createGroup", !(node.nodeDocType=="Group" || isType(node.nodeDocType)) || lackRole);
                setActionDisabled(menu.getTreeNode(), "deleteAssignment", (node.nodeDocType!="Group" && node.nodeDocType!="Assignment") || lackRole || (node.nodeDocType =="AssignmentSystemInternal" && notGlobalSupervisor));
                setActionDisabled(menu.getTreeNode(), "deleteType", !isType(node.nodeDocType) || lackRole);
                setActionDisabled(menu.getTreeNode(), "copyAssignment", lackRole || node.nodeDocType!="Group" && node.nodeDocType!="Assignment");
                setActionDisabled(menu.getTreeNode(), "searchContents", !isType(node.nodeDocType) && !isAssignment(node.nodeDocType));
                setActionDisabled(menu.getTreeNode(), "searchPropertyContents", !isAssignment(node.nodeDocType));
                setActionDisabled(menu.getTreeNode(), "cutAssignment", lackRole || node.nodeDocType!="Assignment" && node.nodeDocType!="Group");
                setActionDisabled(menu.getTreeNode(), "pasteBelow", lackRole || copyNode==null || cutMode || (copyMode && (node.nodeDocType!="Assignment" && node.nodeDocType!="Group") ||
                                getJsonRpc().StructureTreeEditor.isSameLevel(copyNode.assignmentId, node.assignmentId)));
                setActionDisabled(menu.getTreeNode(), "pasteBelowAfterCut", lackRole || copyNode==null || copyMode || (node.nodeDocType!="Assignment" && node.nodeDocType!="Group") ||
                                (cutMode && !getJsonRpc().StructureTreeEditor.isSameLevel(copyNode.assignmentId, node.assignmentId)));
                setActionDisabled(menu.getTreeNode(), "pasteAbove", lackRole || copyNode==null || cutMode || (copyMode && (node.nodeDocType!="Assignment" && node.nodeDocType!="Group") ||
                                getJsonRpc().StructureTreeEditor.isSameLevel(copyNode.assignmentId, node.assignmentId)));
                setActionDisabled(menu.getTreeNode(), "pasteAboveAfterCut", lackRole || copyNode==null || copyMode || (node.nodeDocType!="Assignment" && node.nodeDocType!="Group") ||
                                (cutMode && !getJsonRpc().StructureTreeEditor.isSameLevel(copyNode.assignmentId, node.assignmentId)));
                setActionDisabled(menu.getTreeNode(), "pasteInto", lackRole || copyNode==null || cutMode || (!isType(node.nodeDocType) && node.nodeDocType!="Group") ||
                                getJsonRpc().StructureTreeEditor.isChild(copyNode.assignmentId, node.assignmentId, node.nodeDocType));
                setActionDisabled(menu.getTreeNode(), "pasteBelowAs", lackRole || copyNode==null || cutMode ||(node.nodeDocType!="Assignment" && node.nodeDocType!="Group"));
                setActionDisabled(menu.getTreeNode(), "pasteAboveAs", lackRole || copyNode==null || cutMode ||(node.nodeDocType!="Assignment" && node.nodeDocType!="Group"));
                setActionDisabled(menu.getTreeNode(), "pasteIntoAs", lackRole || copyNode==null || cutMode || (!isType(node.nodeDocType) && node.nodeDocType!="Group"));
                setActionDisabled(menu.getTreeNode(), "pasteSubMenu", lackRole || copyNode==null || cutMode);
                setActionDisabled(menu.getTreeNode(), "createTestData", lackRole || node.nodeDocType!="Type");
                menu.show_();
            }

            function isType(docType) {
                if (docType=="Type" || docType=="TypeRelation")
                    return true;
                return false;
            }

            function isAssignment(docType) {
                return docType == "Assignment" || docType == "AssignmentSystemInternal";
            }

            function enableSearchMode() {
                setBackgroundImage("adm/images/tree/background_search.png");
            }

            function disableSearchMode() {
                removeBackgroundImage();
            }
                
            dojo.addOnLoad(function() {
                if (getContentFrame().isQueryEditor) {
                    enableSearchMode();
                }
            });
        //-->
		</script>
        
        <adm:tree name="structureTree" targetId="structureTreeContainer"  extensionPoint="/tree/adm/structure"
                  clickHandler="structureTreeClickHandler" docIcons="true" expandFirstNode="false">

            <adm:treeContextMenu showHandler="showTreeMenu">
                <adm:treeContextMenuItem icon="open" treeActions="showNode" labelKey="StructureTree.menu.open" clickHandler="showNode"/>
                <adm:treeContextMenuItem icon="edit" treeActions="editNode" labelKey="StructureTree.menu.edit" clickHandler="editNode"/>
                <adm:treeContextMenuItem icon="property" treeActions="createProperty" labelKey="StructureTree.menu.createProperty" clickHandler="createProperty"/>
                <adm:treeContextMenuItem icon="group" treeActions="createGroup" labelKey="StructureTree.menu.createGroup" clickHandler="createGroup" />
                <adm:treeContextMenuItem icon="search" treeActions="searchContents" labelKey="StructureTree.menu.searchContents" clickHandler="searchContents"/>
                <adm:treeContextMenuItem icon="search" treeActions="searchPropertyContents" labelKey="StructureTree.menu.searchContents.property" clickHandler="searchContentsByProperty"/>
                <fx:menuSeparator/>
                <adm:treeContextMenuItem icon="new" treeActions="createContent" labelKey="ContentTree.menu.create" clickHandler="createContent"/>
                <adm:treeContextMenuItem icon="createTestData" treeActions="createTestData" labelKey="StructureTree.menu.createTestData" clickHandler="createTestData" />
                <fx:menuSeparator/>
               <adm:treeContextMenuItem treeActions="copyAssignment" icon="copy" labelKey="StructureTree.menu.copyAssignment" clickHandler="copyAssignment"/>
               <adm:treeContextMenuItem treeActions="pasteInto" icon="paste" labelKey="StructureTree.menu.paste.into" clickHandler="pasteInto"/>
               <adm:treeContextMenuItem treeActions="pasteAboveAfterCut" icon="paste" labelKey="StructureTree.menu.paste.above" clickHandler="pasteAbove"/>
               <adm:treeContextMenuItem treeActions="pasteBelowAfterCut" icon="paste" labelKey="StructureTree.menu.paste.below" clickHandler="pasteBelow"/>
               <adm:treeContextMenuItem treeActions="pasteSubMenu" icon="paste" labelKey="StructureTree.menu.paste.submenu">
                   <adm:treeContextMenuItem treeActions="pasteAbove" icon="paste" labelKey="StructureTree.menu.paste.above" clickHandler="pasteAbove"/>
                   <adm:treeContextMenuItem treeActions="pasteBelow" icon="paste" labelKey="StructureTree.menu.paste.below" clickHandler="pasteBelow"/>
                   <adm:treeContextMenuItem treeActions="pasteInto" icon="paste" labelKey="StructureTree.menu.paste.into" clickHandler="pasteInto"/>
                   <fx:menuSeparator/>
                   <adm:treeContextMenuItem treeActions="pasteAboveAs" icon="paste" labelKey="StructureTree.menu.paste.aboveAs" clickHandler="pasteAboveAs"/>
                   <adm:treeContextMenuItem treeActions="pasteBelowAs" icon="paste" labelKey="StructureTree.menu.paste.belowAs" clickHandler="pasteBelowAs"/>
                   <adm:treeContextMenuItem treeActions="pasteIntoAs" icon="paste" labelKey="StructureTree.menu.paste.intoAs" clickHandler="pasteIntoAs"/>
               </adm:treeContextMenuItem>
               <adm:treeContextMenuItem icon="cut" treeActions="cutAssignment" labelKey="StructureTree.menu.cut.assignment" clickHandler="cutAssignment"/>
               <adm:treeContextMenuItem icon="delete" treeActions="deleteAssignment" labelKey="StructureTree.menu.delete.assignment" clickHandler="deleteAssignment"/>
               <adm:treeContextMenuItem icon="delete" treeActions="deleteType" labelKey="StructureTree.menu.delete.type" clickHandler="deleteType"/>
            </adm:treeContextMenu>

            <adm:jsonRpcCall method="StructureTreeWriter.renderStructureTree" args="-1"/>
    	</adm:tree>
    	
        <div id="structureTreeContainer">
        </div>
    </ui:define>

    <ui:define name="mainMenu">
        <div class="menu">
            <fx:menu name="mainMenu">

                <fx:menuItem rendered="#{fxSystemBean.isInRole['StructureManagement']}" labelKey="StructureTree.menu.createType" icon="windowNew" clickHandler="function(menuItem) { createType(menuItem); }"/>

                <fx:menuItem labelKey="StructureTree.menu.createTypeRelation" icon="fxTypeRelation" clickHandler="function(menuItem) { createTypeRelation(menuItem); }"/>
                
                <ui:include src="/adm/templates/navigation.menu.tabs.xhtml"/>
            </fx:menu>
        </div>
    </ui:define>

    <ui:define name="reloadButton">
        <a href="javascript:reloadStructureTree()"><t:graphicImage url="/adm/images/layout/reload.png" alt="reload" style="position:absolute;right:15px;margin-top:2px;border:0;"/></a>
    </ui:define>

</ui:composition>


</html>
        