/***************************************************************
 *  This file is part of the [fleXive](R) framework.
 *
 *  Copyright (c) 1999-2014
 *  UCS - unique computing solutions gmbh (http://www.ucs.at)
 *  All rights reserved
 *
 *  The [fleXive](R) project is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser General Public
 *  License version 2.1 or higher as published by the Free Software Foundation.
 *
 *  The GNU Lesser General Public License can be found at
 *  http://www.gnu.org/licenses/lgpl.html.
 *  A copy is found in the textfile LGPL.txt and important notices to the
 *  license from the author are found in LICENSE.txt distributed with
 *  these libraries.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  For further information about UCS - unique computing solutions gmbh,
 *  please see the company website: http://www.ucs.at
 *
 *  For further information about [fleXive](R), please see the
 *  project website: http://www.flexive.org
 *
 *
 *  This copyright notice MUST APPEAR in all copies of the file!
 ***************************************************************/
package com.flexive.faces.listener;

import org.apache.commons.lang.StringUtils;

import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlOutputLabel;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;
import java.util.Iterator;

/**
 * Post-processor for JSF error messages generated by inputs nested in a
 * &lt;fx:formRow&gt; component.
 *
 * @author Daniel Lichtenberger (daniel.lichtenberger@flexive.com), UCS - unique computing solutions gmbh (http://www.ucs.at)
 * @version $Rev$
 */
public class FormRowMessageListener implements PhaseListener {
    private static final long serialVersionUID = -2608502593020610438L;

    @Override
    public PhaseId getPhaseId() {
        return PhaseId.RENDER_RESPONSE;
    }

    @Override
    public void beforePhase(PhaseEvent event) {
        final FacesContext context = FacesContext.getCurrentInstance();
        final Iterator<String> idsWithMessages = context.getClientIdsWithMessages();
        while (idsWithMessages.hasNext()) {
            final String id = idsWithMessages.next();
            // find the label component rendered by fx:formRow
            final UIComponent labelComponent = context.getViewRoot().findComponent(id + "Label");
            if (labelComponent != null && labelComponent instanceof HtmlOutputLabel) {
                final Iterator<FacesMessage> messagesItr = context.getMessages(id);
                while (messagesItr.hasNext()) {
                    final FacesMessage message = messagesItr.next();
                    // replace the component ID with the component label
                    message.setSummary(StringUtils.replace(message.getSummary(), id,
                            String.valueOf(((HtmlOutputLabel) labelComponent).getValue())));
                }
            }
        }
    }

    @Override
    public void afterPhase(PhaseEvent event) {
        // do nothing
    }

}
