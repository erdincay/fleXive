<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="flexive" default="all" basedir="." xmlns:artifact="urn:maven-artifact-ant" xmlns:antlr="urn:antlr-ant">

	<!-- ========================== properties ========================== -->

	<property name="product" value="flexive3"/>

	<property file="build.properties"/>
	<property file="flexive.properties"/>

    <property name="flexive.basedir" value="${basedir}"/>
    <import file="build.shared-properties.xml"/>
    <import file="build.global-properties.xml"/>

	<property name="resources.ui.jsf.dir" value="${flexive.base.ui.jsf.dir}/resources"/>
	<property name="resources.ui.shared.dir" value="${flexive.base.ui.shared.dir}/resources"/>
	<property name="build.framework.classes.dir" value="${flexive.base.build.dir}/framework/classes"/>
	<property name="build.ui.classes.dir" value="${flexive.base.build.dir}/ui/classes"/>
    <property name="build.ui.shared.classes.dir" value="${flexive.base.build.dir}/ui/sharedclasses"/>
    <property name="build.ui.components.dir" value="${flexive.base.build.dir}/ui-components"/>
    <property name="build.ui.jar.dir" value="${flexive.base.build.dir}/ui/jar"/>
	<property name="build.ui.meta.dir" value="${flexive.base.build.dir}/ui/jar/WEB-INF"/>
    <property name="build.ui.components.meta.dir" value="${flexive.base.build.dir}/ui/jar/components/WEB-INF"/>
    <property name="shared.meta.dir" value="${flexive.build.framework.jar.dir}/shared.meta"/>
    <property name="database.src.dir" value="${flexive.resources.framework.dir}/sql/"/>
    <property name="database.classpathref" value="classpath.build.framework"/>

    <property name="web.ui.dojo.baseName" value="dojo-flexive"/>
    <property name="web.ui.yui.version" value="2.7.0"/>
    <property name="flexive.dist" value="flexive-${flexive.version}"/>

	<property name="invalid.path" value="${flexive.base.build.dir}/temp"/>

    <property name="merge.ui.jsf.dir" value="${flexive.base.ui.jsf.dir}/resources/merge"/>

	<property name="sqlparser.jar" value="flexive-sqlParser.jar"/>
	<property name="extractor.jar" value="flexive-extractor.jar"/>
	<property name="extractor-documents.jar" value="flexive-extractor-documents.jar"/>
    <property name="flatstorage.jar" value="flexive-flatstorage.jar"/>

    <!-- check if sqlParser has been run -->
	<available file="${flexive.lib.dir}/${sqlparser.jar}" property="missing.parsers"/>

	<!-- javac options -->
	<property name="compiler.deprecation" value="on"/>
	<property name="compiler.optimize" value="on"/>
	<property name="compiler.debug" value="on"/>
	<property name="compiler.source" value="1.5"/>
	<property name="compiler.target" value="1.5"/>
    <property name="compiler.fork" value="false"/>


	<!-- ========================== paths =============================== -->

	<!-- classpath needed to compile the core framework -->
	<path id="classpath.build.framework">
        <fileset dir="${flexive.lib.dir}/jsf" includes="*.jar"/>
		<fileset dir="${flexive.lib.dir}" includes="*.jar" excludes="qdox.jar"/>
		<fileset dir="${flexive.lib.dir}/text_extraction" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/richfaces" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/xstream" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/groovy" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/mail" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/antlr" includes="*.jar"/>
        <fileset dir="${flexive.lib.dir}/openejb-3.1/lib" includes="*.jar"/>
    </path>

    <path id="classpath.build.plugin">
        <path path="${build.framework.classes.dir}"/>
        <path path="${build.ui.shared.classes.dir}"/>
        <path path="${build.ui.components.dir}/jsf-core/classes"/>
        <path refid="classpath.build.framework"/>
        <!-- Include TestNG for test runner plugin -->
        <fileset dir="${flexive.lib.dir}/testNG" includes="*.jar"/>
    </path>

    <fileset id="jar.ejb.classes" dir="${build.framework.classes.dir}">
		<include name="com/flexive/core/**"/>
		<include name="com/flexive/ejb/**"/>
		<include name="*.properties"/>
        <include name="**/*.flexive"/>
        <include name="**/*.sql"/>
    </fileset>
    <fileset id="jar.ejb.resources" dir="${flexive.resources.framework.dir}">
		<include name="embeddedJBossCacheConfig.xml"/>
        <include name="fxresources/**"/>
    </fileset>

	<!-- ========================== tasks / macros ====================== -->
    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="classpath.build.framework"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="classpath.build.framework"/>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
               uri="urn:maven-artifact-ant"
               classpathref="classpath.build.framework" />
    <typedef resource="org/apache/tools/ant/antlr/antlib.xml"
             uri="urn:antlr-ant" classpathref="classpath.build.framework"/>

    <!-- ========================== imports ============================= -->
	<import file="build.tests.xml"/>
    <import file="build.javadoc.xml"/>
    <import file="build.macros.xml"/>
    <import file="${flexive.base.framework.dir}/resources/sql/H2/StoredProcedures/build.xml"/>

    <!-- ========================== targets ============================= -->

    <target name="init" unless="init.done">
        <groovy src="buildTasks.groovy"/>
        <groovy>
            if (!properties['database.vendor']) {
                println "Missing database.vendor property in build.properties!"
                println "You might have an outdated build.properties file. Please copy build.properties.sample to build.properties!"
                ant.fail()
            }
            //setup database properties based on the selected database vendor
            properties['database.host'] = properties['database.'+properties['database.vendor']+'.host']
            properties['database.port'] = properties['database.'+properties['database.vendor']+'.port']
            properties['database.username'] = properties['database.'+properties['database.vendor']+'.username']
            properties['database.password'] = properties['database.'+properties['database.vendor']+'.password']
            properties['database.schema.root'] = properties['database.'+properties['database.vendor']+'.schema.root']
            properties['database.schema.config'] = properties['database.'+properties['database.vendor']+'.schema.config']
            properties['database.driver'] = properties['database.'+properties['database.vendor']+'.driver']
            properties['database.url.base'] = properties['database.'+properties['database.vendor']+'.url.base']
            properties['database.url.parameters'] = properties['database.'+properties['database.vendor']+'.url.parameters']
        </groovy>
        <!-- Ensure init is called only once because the groovy task cannot be redefined -->
        <property name="init.done" value="true"/>
    </target>

    <target name="clean" description="Clean everything but parsers">
		<delete dir="${flexive.base.build.dir}"/>
		<delete dir="${base.reports.dir}"/>
		<delete dir="${flexive.dist.dir}"/>
	</target>

	<target name="clean.all" depends="clean.parsers" description="Clean everything">
		<delete dir="${flexive.base.build.dir}"/>
		<delete dir="${base.reports.dir}"/>
	</target>

    <target name="redeploy.web.jboss" depends="init" description="Redeploy web files to JBoss">
        <groovy>
             File jbossDir = null
             new File(properties['deploy.ear.path']+"/../tmp/deploy").eachFileMatch(~/.*flexive.ear-contents.*/) { dir ->
                if( jbossDir == null )
                    jbossDir = dir
             }
             if( jbossDir == null ) {
                ant.fail(message:"No JBoss webdeployment found!")
             }
             println "Redeploying web files to [$jbossDir] ..."
             properties['dir.deploy.jboss'] = jbossDir
        </groovy>
        <copy todir="${dir.deploy.jboss}/flexive-exp.war/adm" verbose="true" >
            <fileset dir="${basedir}/src/ui/jsf-backend/web/adm"/>
        </copy>
        <copy todir="${dir.deploy.jboss}/flexive-exp.war/pub" verbose="true" >
            <fileset dir="${basedir}/src/ui/jsf-backend/web/pub"/>
        </copy>
        <copy todir="${dir.deploy.jboss}/flexive-exp.war/WEB-INF" verbose="true" >
            <fileset dir="${basedir}/src/ui/jsf-backend/resources/WEB-INF"/>
        </copy>
    </target>

    <target name="prepare" description="Prepare build directory structures" depends="init">
        <groovy>
            def file = properties.basedir+File.separatorChar+"build.properties"
            if( !new File(file).exists() ) {
                ant.fail(message:"Please create a customized ${file} file from build.properties.sample.")
            }
            rawVersion = org.apache.tools.ant.Main.class.getPackage().getImplementationVersion()
            if( rawVersion != null ) {
                antVersion = rawVersion.split("\\.")
                int major = Integer.valueOf(antVersion[0])
                int minor = Integer.valueOf(antVersion[1])
                if( major == 1 &amp;&amp; minor >= 7 ) {
                   //version 1.7+ is ok
                } else if( major > 1 ) {
                    //v2+ should be ok as well
                } else {
                    ant.fail(message:"Ant version 1.7 or higher is required! You are using version ${org.apache.tools.ant.Main.class.getPackage().getImplementationVersion()}!")
                }
            }
        </groovy>
		<mkdir dir="${build.framework.classes.dir}"/>
		<mkdir dir="${build.ui.classes.dir}"/>
        <mkdir dir="${build.ui.shared.classes.dir}"/>
        <mkdir dir="${flexive.build.framework.jar.dir}"/>
		<mkdir dir="${build.ui.jar.dir}"/>
		<mkdir dir="${invalid.path}"/>
        <javac-call srcdir="${flexive.src.framework.dir}"
                    destdir="${build.framework.classes.dir}"
                    includes="com/flexive/tools/**/*.java">
            <classpath refid="classpath.build.framework"/>
        </javac-call>
        <jar jarfile="${flexive.build.framework.jar.dir}/flexive-ant.jar">
            <fileset dir="${build.framework.classes.dir}">
                <include name="com/flexive/tools/ant/**/*"/>
            </fileset>
        </jar>
        <jar jarfile="${flexive.build.framework.jar.dir}/openUrl.jar">
            <fileset dir="${build.framework.classes.dir}">
                <include name="com/flexive/tools/OpenUrl*"/>
            </fileset>
            <manifest>
                <attribute name="Class-Path" value="extlib/h2.jar"/>
                <attribute name="Main-Class" value="com.flexive.tools.OpenUrl"/>
            </manifest>
        </jar>
        <taskdef name="applicationDescriptorBuilder"
                 classname="com.flexive.tools.ant.ApplicationDescriptorBuilderTask"
                 classpath="${flexive.build.framework.jar.dir}/flexive-ant.jar"/>
        <taskdef name="scriptIndexBuilder"
                 classname="com.flexive.tools.ant.ScriptIndexBuilderTask"
                 classpath="${flexive.build.framework.jar.dir}/flexive-ant.jar"/>
        <taskdef name="makeMessages"
                 classname="com.flexive.tools.ant.MakeMessagesTask"
                 classpath="${flexive.build.framework.jar.dir}/flexive-ant.jar"/>
    </target>


	<target name="all" description="Clean and rebuild everything" depends="jar.all,jar.ear">
	</target>

	<!-- safety fallback that generates the parsers if they are missing -->
	<target name="check.parsers" unless="missing.parsers" description="Check if SQL and HTML parsers have been built yet">
		<echo message="Compiling and packaging SQL/HTML parser..."/>
		<antcall target="gen.parsers"/>
	</target>

	<target name="clean.parsers" depends="init">
		<delete dir="${build.framework.classes.dir}/com/flexive/sqlParser"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/ParseException.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/SimpleCharStream.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/SQL.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/SQLConstants.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/SQLTokenManager.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/sqlParser/Token.java"/>

		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/HtmlExtractorParser.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/HtmlExtractorParserConstants.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/HtmlExtractorParserTokenManager.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/ParseException.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/SimpleCharStream.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/Token.java"/>
		<delete file="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/TokenMgrError.java"/>

		<safeDelete file="${flexive.lib.dir}/${sqlparser.jar}"/>
		<safeDelete file="${flexive.lib.dir}/${extractor.jar}"/>
		<safeDelete file="${flexive.lib.dir}/${extractor-documents.jar}"/>
	</target>

	<target name="gen.parsers" depends="clean.parsers, prepare" description="Generate SQL and HTML parsers">
		<javacc
                target="${flexive.src.framework.dir}/com/flexive/sqlParser/Parser.jj"
                javacchome="${flexive.lib.dir}"
                outputdirectory="${flexive.src.framework.dir}/com/flexive/sqlParser"
        />
		<javacc
                target="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/htmlParser.jj"
                javacchome="${flexive.lib.dir}"
                outputdirectory="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor"
        />
		<javac-call srcdir="${flexive.src.framework.dir}" includes="com/flexive/shared/**,com/flexive/sqlParser/**,com/flexive/extractor/**" destdir="${build.framework.classes.dir}">
			<classpath refid="classpath.build.framework"/>
		</javac-call>
		<jar jarfile="${flexive.lib.dir}/${sqlparser.jar}">
			<fileset dir="${build.framework.classes.dir}">
				<include name="com/flexive/sqlParser/**"/>
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="com.flexive.sqlParser.consoleTest"/>
			</manifest>
		</jar>
		<jar jarfile="${flexive.lib.dir}/${extractor.jar}">
			<manifest>
				<attribute name="Main-Class" value="com.flexive.extractor.htmlExtractor.consoleTest"/>
			</manifest>
            <fileset dir="${build.framework.classes.dir}">
				<include name="com/flexive/extractor/**"/>
			</fileset>
        </jar>
        <jar jarfile="${flexive.lib.dir}/${extractor-documents.jar}">
            <fileset  dir="${flexive.resources.framework.dir}/extractor-documents-resources" includes="**/*"/>
        </jar>
	</target>


    <target name="htmlParserStandalone" depends="clean.parsers, prepare">
		<javacc
                target="${flexive.src.framework.dir}/com/flexive/extractor/htmlExtractor/htmlParser.jj"
                javacchome="${flexive.lib.dir}"
                outputdirectory="flexive.src.framework.dirwork.dir}/com/flexive/extractor/htmlExtractor"
        />
		<javac-call
                srcdir="${flexive.src.framework.dir}"
                includes="**/htmlExtractor/**"
                destdir="${build.framework.classes.dir}">
			<classpath refid="classpath.build.framework"/>
        </javac-call>
		<jar jarfile="${flexive.lib.dir}/${extractor.jar}">
			<fileset dir="${build.framework.classes.dir}">
				<include name="com/flexive/extractor/htmlExtractor/**"/>
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="com.flexive.extractor.htmlExtractor.consoleTest"/>
			</manifest>
		</jar>
	</target>

    <target name="compile.framework"
            depends="prepare, check.parsers, compile.framework.parsers, compile.framework.main, compile.framework.jdk6"
            description="Compile the complete core framework"/>

    <target name="compile.framework.main">
        <javac-call
                srcdir="${flexive.src.framework.dir}"
                destdir="${build.framework.classes.dir}"
                excludes="**/sqlParser/**,**/extractor/**">
            <classpath refid="classpath.build.framework"/>
        </javac-call>
    </target>

    <target name="compile.framework.jdk6" if="isJDK6">
        <echo message="Compiling Java 6+ sources ..."/>
        <javac-call
                srcdir="${flexive.src.jdk6.framework.dir}"
                destdir="${build.framework.classes.dir}">
			<classpath refid="classpath.build.framework"/>
		</javac-call>
    </target>

    <target name="compile.framework.parsers" description="Compiles the parsers embedded in the core framework">
        <antlr:antlr3 target="${flexive.src.framework.cmisparser.dir}/CmisSql.g">
            <classpath refid="classpath.build.framework"/>
        </antlr:antlr3>
    </target>

    <target name="jar.framework" depends="jar.framework.shared, jar.ejb" description="Package the complete core framework">
	</target>

	<target name="jar.framework.shared.prepare">
		<uptodate property="jar.framework.shared.skip" targetfile="${flexive.build.framework.jar.dir}/flexive-shared.jar">
			<srcfiles dir="${shared.meta.dir}" includes="**/*"/>
			<srcfiles dir="${basedir}" includes="flexive.properties"/>
			<srcfiles dir="${build.framework.classes.dir}" includes="com/flexive/shared/**"/>
		</uptodate>
	</target>

	<target name="jar.framework.shared" depends="compile.framework,jar.framework.shared.prepare" unless="jar.framework.shared.skip" description="Package the shared part of the framework">
		<tstamp>
			<format property="build.time" pattern="yyyy/MM/dd HH:mm" unit="hour"/>
		</tstamp>
        <svnVersion property="build.number"/>

        <delete dir="${shared.meta.dir}"/>
		<mkdir dir="${shared.meta.dir}"/>

		<copy file="${basedir}/flexive.properties" tofile="${shared.meta.dir}/flexive.properties" overwrite="true"/>
        <replaceBuildProperties file="${shared.meta.dir}/flexive.properties" buildNumber="${build.number}" buildTime="${build.time}"/>
        <makeMessages srcDir="${flexive.resources.framework.dir}/messages" dest="${shared.meta.dir}/FxExceptionMessages" srcPrefix="Ex"/>
        <makeMessages srcDir="${flexive.resources.framework.dir}/messages" dest="${shared.meta.dir}/FxSharedMessages" srcPrefix="FxSharedMessages"/>
        <makeMessages srcDir="${flexive.resources.framework.dir}/messages" dest="${shared.meta.dir}/Enum" srcPrefix="Enum"/>
        <makeMessages srcDir="${flexive.resources.framework.dir}/messages" dest="${shared.meta.dir}/History" srcPrefix="History"/>

		<emma enabled="${emma.enabled}">
			<instr instrpath="${build.framework.classes.dir}"
                   mode="overwrite"
                   merge="false"
                   metadatafile="${coverage.dir}/coverage.em">
				<filter value="+com.flexive.shared.*"/>
			</instr>
		</emma>
		<jar jarfile="${flexive.build.framework.jar.dir}/flexive-shared.jar" keepcompression="true">
			<fileset dir="${build.framework.classes.dir}">
				<include name="com/flexive/shared/**"/>
			</fileset>
			<zipfileset dir="${shared.meta.dir}" includes="FxExceptionMessages*.properties, FxSharedMessages*.properties, Enum*.properties, History*.properties, flexive.properties"/>
        </jar>
	</target>

	<target name="compile.ui.shared" depends="jar.framework.shared" description="Compile the shared UI classes">
		<javac-call
                srcdir="${flexive.src.ui.shared.dir}"
                destdir="${build.ui.shared.classes.dir}"
                >
			<classpath refid="classpath.build.framework"/>
			<classpath>
				<path path="${build.framework.classes.dir}"/>
			</classpath>
		</javac-call>
        <makeMessages srcDir="${resources.ui.jsf.dir}/messages" dest="${build.ui.meta.dir}/ApplicationMessages"/>
	</target>

    <target name="compile.ui" depends="compile.ui.shared,jar.jsf.components" description="Compiles the flexive backend UI">
        <property name="merge.ui.dir" value="${build.ui.jar.dir}/merge"/>
		<delete dir="${merge.ui.dir}"/>

        <echo message="Compiling JSF"/>
        <javac-call
                srcdir="${flexive.src.ui.jsf.dir}"
                destdir="${build.ui.classes.dir}"
                >
            <classpath>
                <path path="${build.framework.classes.dir}"/>
                <path path="${build.ui.shared.classes.dir}"/>
                <fileset dir="${build.ui.jar.dir}" includes="*.jar"/>
            </classpath>
            <classpath refid="classpath.build.framework"/>
        </javac-call>
    </target>

	<target name="jar.ui" depends="compile.ui,jar.jsf.components">
		<jar jarfile="${build.ui.jar.dir}/flexive-backend.jar">
			<fileset dir="${build.ui.classes.dir}">
                <include name="com/flexive/war/**/*"/>
                <include name="org/apache/myfaces/webapp/filter/**/*"/>
                <exclude name="com/flexive/war/webdav/**"/>
			</fileset>
            <fileset dir="${build.ui.meta.dir}">
                <include name="ApplicationMessages*.properties"/>
            </fileset>
        </jar>
        <jar jarfile="${build.ui.jar.dir}/flexive-web-shared.jar">
			<fileset dir="${build.ui.shared.classes.dir}">
			</fileset>
		</jar>
        <emma enabled="${emma.enabled}">
			<instr
				instrpath="${build.ui.jar.dir}/flexive-backend.jar"
				mode="overwrite"
				merge="true"
				metadatafile="${coverage.dir}/coverage.em">
				<filter value="+com.flexive.war.*" />
			</instr>
		</emma>
        <emma enabled="${emma.enabled}">
			<instr
				instrpath="${build.ui.jar.dir}/flexive-web-shared.jar"
				mode="overwrite"
				merge="true"
				metadatafile="${coverage.dir}/coverage.em">
				<filter value="+com.flexive.war.*" />
			</instr>
		</emma>
		<!-- assemble the flexive-webdav jar -->
		<jar jarfile="${build.ui.jar.dir}/flexive-webdav.jar">
			<fileset dir="${build.ui.shared.classes.dir}">
				<include name="com/flexive/war/webdav/**"/>
			</fileset>
		</jar>
		<war warfile="${flexive.base.build.dir}/ui/flexive.war" webxml="${resources.ui.jsf.dir}/web.xml" keepcompression="yes">
			<!-- jsp,html,.. files -->
			<fileset dir="${flexive.web.ui.shared.dir}">
				<include name="**/*"/>
			</fileset>
            <fileset dir="${flexive.web.ui.jsf.dir}">
                <include name="**/*"/>
            </fileset>

			<!-- JSF resources -->
			<zipfileset dir="${resources.ui.jsf.dir}/WEB-INF" prefix="WEB-INF">
	            <include name="faces-config.xml"/>
	            <include name="flexive-admin.taglib.xml"/>
                <include name="flexive_jsf.tld"/>
	            <include name="templates/**/*"/>
            </zipfileset>
            <!-- richfaces skins -->
			<zipfileset dir="${resources.ui.jsf.dir}/WEB-INF" prefix="WEB-INF/classes">
	            <include name="flexive.skin.properties"/>
            </zipfileset>

            <!-- include dojo from ZIP file, install in /pub/js/dojo -->
            <zipfileset src="${flexive.base.ui.shared.dir}/resources/lib/dojo/${web.ui.dojo.baseName}Navigation.zip" prefix="pub/js/dojoNavigation">
                <include name="*"/>
                <include name="src/**/*"/>
            </zipfileset>

            <!-- include EditArea from ZIP file, install in /adm/js/edit_area  -->
            <zipfileset src="${resources.ui.jsf.dir}/lib/edit_area.zip" prefix="adm/js/"
                        includes="**/*">
            </zipfileset>
        </war>
	</target>

	<target name="jar.ejb.prepare">
		<uptodate targetfile="${flexive.build.framework.jar.dir}/flexive-ejb.jar" property="jar.ejb.skip">
			<srcfiles refid="jar.ejb.classes"/>
			<srcfiles refid="jar.ejb.resources"/>
        </uptodate>
	</target>

	<target name="jar.ejb" depends="compile.framework, jar.ejb.prepare" unless="jar.ejb.skip">
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/scripts/runonce/scriptindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/fxresources/scripts/runonce"/>
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/scripts/startup/scriptindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/fxresources/scripts/startup"/>
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/scripts/library/scriptindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/fxresources/scripts/library"/>
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/binaries/thumbs/resourceindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/fxresources/binaries/thumbs"/>
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/sql/MySQL/resourceindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/sql/MySQL/patch"
                            copyFiles="true"/>
        <scriptIndexBuilder indexFile="${build.framework.classes.dir}/fxresources/sql/H2/resourceindex.flexive"
                            scriptDir="${flexive.resources.framework.dir}/sql/H2/patch"
                            copyFiles="true"/>
        <jar jarfile="${flexive.build.framework.jar.dir}/flexive-ejb.jar">
			<fileset refid="jar.ejb.classes"/>
			<fileset refid="jar.ejb.resources"/>
        </jar>
		<emma enabled="${emma.enabled}">
			<instr
				instrpath="${flexive.build.framework.jar.dir}/flexive-ejb.jar"
				mode="overwrite"
				merge="true"
				metadatafile="${coverage.dir}/coverage.em">
				<filter excludes="*Test*" />
				<filter value="+com.flexive.core.*, +com.flexive.ejb.beans.*" />
			</instr>
		</emma>
	</target>

    <target name="jar.tests" depends="tests.compile.all">
        <jar file="${flexive.build.framework.jar.dir}/flexive-tests.jar">
            <fileset dir="${tests.classes.dir}" includes="com/flexive/tests/**/*"/>
        </jar>
    </target>

    <!--<target name="jar.all" depends="jar.framework, jar.ui, jar.tests"/>-->
    <target name="jar.all" depends="jar.framework, jar.ui, h2.jar"/>

    <target name="jar.ear" depends="prepare" description="Assemble flexive.ear">
        <mkdir dir="${flexive.drop.dir}"/>
        <applicationDescriptorBuilder dropDir="${flexive.drop.dir}" destFile="${flexive.base.build.dir}/application.xml" srcFile="${resources.ui.shared.dir}/application.xml"/>
        <jar jarfile="${flexive.build.framework.jar.dir}/flexive-drop-resources.jar">
            <fileset file="${flexive.drop.dir}/drops.archives"/>
        </jar>
        <property name="build.ear.libs.dir" value="${flexive.base.build.dir}/lib"/>
        <delete dir="${build.ear.libs.dir}"/>
        <copy todir="${build.ear.libs.dir}">
            <fileset dir="${flexive.build.framework.jar.dir}" includes="*.jar" excludes="${sqlparser.jar},${htmlparser.jar},*-ejb.jar"/>
            <fileset dir="${flexive.drop.dir}" includes="*.jar" excludes="*-ejb.jar,*.war,*.par"/>

            <!-- Shared libraries -->
            <fileset dir="${flexive.lib.dir}" includes="${sqlparser.jar},${extractor.jar},${extractor-documents.jar},${flatstorage.jar},cglib*.jar,fxStream.jar,commons-io-1.1.jar,sanselan.jar,quartz*.jar,PDFRenderer.jar,commons-*.jar,jbosscache-core.jar,jgroups.jar,jboss-common-core-42-compat.jar,urlrewrite-*.jar,google-collect*.jar,jsr173_1.0_api.jar,jtidy.jar"/>
            <fileset dir="${flexive.lib.dir}/groovy" includes="*.jar"/>
            <fileset dir="${build.ui.jar.dir}" includes="*.jar" excludes="flexive-plugin-jsf-testrunner.jar"/>
            <fileset dir="${flexive.lib.dir}/antlr" includes="antlr-runtime-*.jar"/>

            <fileset dir="${build.ui.jar.dir}">
                <!-- only include the testrunner plugin if target test.package.ear was invoked -->
                <include name="flexive-plugin-jsf-testrunner.jar" if="package.testNG"/>
            </fileset>
            <fileset dir="${flexive.lib.dir}/xstream" includes="*.jar"/>
            <fileset dir="${flexive.lib.dir}/mail" includes="*.jar"/>
            <fileset dir="${flexive.lib.dir}/text_extraction"  includes="*.jar"/>
            <fileset dir="${flexive.lib.dir}/testNG">
                <!-- include testNG only if target test.package.ear was invoked -->
                <include name="testng*jar" if="package.testNG"/>
            </fileset>

            <fileset dir="${flexive.lib.dir}/jsf" includes="*.jar" excludes="jsf-api.jar, jsf-impl.jar,el-*.jar"/>
            <fileset refid="flexive.lib.ui.ajax4jsf"/>
        </copy>
        <!-- Create manifest classpath -->
        <manifestclasspath property="ear.classpath" jarfile="${flexive.base.build.dir}/flexive.ear">
            <classpath>
                <fileset dir="${build.ear.libs.dir}" includes="**/*"/>
            </classpath>
        </manifestclasspath>
        <jar jarfile="${flexive.base.build.dir}/flexive.ear" keepcompression="true">
            <manifest >
                <attribute name="Class-Path" value="${ear.classpath}"/>
            </manifest>
			<metainf dir="${flexive.base.build.dir}">
				<include name="application.xml"/>
			</metainf>
            <metainf dir="${flexive.base.framework.dir}/resources/jboss">
                <include name="jboss-app.xml"/>
            </metainf>
            <metainf dir="${flexive.base.framework.dir}/resources/glassfish">
                <include name="sun-application.xml"/>
            </metainf>
            <metainf dir="${resources.ui.shared.dir}">
                <include name="geronimo-application.xml"/>
                <include name="weblogic-application.xml"/>
            </metainf>
            <fileset dir="${flexive.build.framework.jar.dir}" includes="*-ejb.jar,*.par"/>
            <fileset dir="${flexive.base.build.dir}/ui" includes="*.war"/>
            <fileset dir="${flexive.drop.dir}" includes="*.war,*-ejb.jar,*.par"/>

            <zipfileset prefix="lib" dir="${build.ear.libs.dir}" includes="**/*"/>
        </jar>
	</target>

    <target name="build-deploy" depends="jar.all,jar.ear,deploy" description="Build the application and deploy flexive to an application server"/>

	<target name="deploy" depends="jar.ear" description="Build a current EAR and deploy flexive to an application server">
		<echo message="Deploying ${flexive.edition} ${flexive.version} ..."/>
		<echo message="Warning: if you did run tests previously, call target 'clean' first or the applicationserver will fail due to EMMA dependencies!"/>
		<copy file="${flexive.base.build.dir}/flexive.ear" toDir="${deploy.ear.path}" overwrite="true" failonerror="true"/>
	</target>

    <target name="db.noupdate" description="Skip db updates">
        <property name="db.noupdate" value="1"/>
        <echo message="Skipping database update!"/>
    </target>

    <target name="db.update" description="Update database" depends="init" unless="db.noupdate">
        <echo taskname="flexive">[fleXive] is using ${database.vendor} database settings... (this can be changed in build.properties)</echo>
        <input taskname="flexive" addproperty="schema.name" defaultvalue="flexive"
               message="Please enter the database schema you want to create or reset:"/>
        <division-setup database="${schema.name}"/>
        <globalconfig-setup />
    </target>

    <target name="db.update.test" description="Update test database" depends="init" unless="db.noupdate">
        <echo taskname="flexive">[fleXive] is using ${database.vendor} database settings... (this can be changed in build.properties)</echo>
        <division-setup database="flexiveTest"/>
    </target>

    <target name="db.flatstorage.create" depends="init">
        <input taskname="flexive" addproperty="flatstorage.url" defaultValue="${database.url.base}flexive"
                message="Connection URL:"/>
        <input taskname="flexive" addproperty="flatstorage.schema" defaultValue="FLEXIVE"
               message="Database schema:"/>
        <input taskname="flexive" addproperty="flatstorage.tableName" defaultValue="FX_CONTENT_DATA_FLAT"
               message="Table name:"/>
        <input taskname="flexive" addproperty="flatstorage.nstring" defaultValue="20"
               message="STRING columns:"/>
        <input taskname="flexive" addproperty="flatstorage.ntext" defaultValue="10"
               message="TEXT columns:"/>
        <input taskname="flexive" addproperty="flatstorage.nbigint" defaultValue="10"
               message="BIGINT columns:"/>
        <input taskname="flexive" addproperty="flatstorage.ndouble" defaultValue="10"
               message="DOUBLE columns:"/>
        <input taskname="flexive" addproperty="flatstorage.nselect" defaultValue="10"
               message="SELECT/BOOLEAN columns:"/>
        <createFlatStorage jar="${flexive.lib.dir}/flexive-flatstorage.jar"
                           lib="${flexive.build.framework.jar.dir}"
                           extlib="lib"
                           connectionurl="${flatstorage.url}"
                           schema="${flatstorage.schema}"
                           tablename="${flatstorage.tableName}"
                           user="${database.username}"
                           password="${database.password}"
                           nstring="${flatstorage.nstring}"
                           ntext="${flatstorage.ntext}"
                           nbigint="${flatstorage.nbigint}"
                           ndouble="${flatstorage.ndouble}"
                           nselect="${flatstorage.nselect}"
                />
    </target>

    <target name="examples">
        <ant antfile="${basedir}/src/examples/helloworld/build.xml" inheritAll="false"/>
        <ant antfile="${basedir}/src/examples/products/build.xml" inheritAll="false"/>
        <ant antfile="${basedir}/src/examples/tutorial01-documentstore/build.xml" inheritAll="false"/>
        <ant antfile="${basedir}/src/examples/announcement-submission/build.xml" inheritAll="false"/>
    </target>

    <target name="dist.prepare">
        <delete dir="${flexive.dist.dir}"/>
        <mkdir dir="${flexive.dist.dir}"/>
        <mkdir dir="${flexive.dist.apps.dir}"/>
        <mkdir dir="${flexive.dist.apps.disabled.dir}"/>
        <echo file="${flexive.dist.apps.disabled.dir}/README.txt">Use this directory for flexive applications that should not be included in flexive.ear.</echo>
    </target>

    <target name="dist" depends="jar.all,dist.prepare,tests.package.dist,dist.srcOnly,h2.jar,dist.assemble,examples,dist.package" description="Build a distribution of all jars, wars and ears">
    </target>

    <target name="dist.assemble">
        <svnVersion property="dist.build.number"/>
        <groovy>
            properties['dist.bin.file'] = properties['flexive.dist'].replaceAll("@@build.number@@", properties['dist.build.number'])+"-bin.zip"
            properties['dist.bin-all.file'] = properties['flexive.dist'].replaceAll("@@build.number@@", properties['dist.build.number'])+"-bin-all.zip"
        </groovy>
        <!-- Create flexive distribution -->
        <copy file="${flexive.lib.dir}/${sqlparser.jar}" tofile="${flexive.dist.lib.dir}/${sqlparser.jar}"/>
		<copy file="${flexive.lib.dir}/${extractor.jar}" tofile="${flexive.dist.lib.dir}/${extractor.jar}"/>
        <copy file="${flexive.lib.dir}/${flatstorage.jar}" tofile="${flexive.dist.lib.dir}/${flatstorage.jar}"/>
		<copy file="${flexive.lib.dir}/${extractor-documents.jar}" tofile="${flexive.dist.lib.dir}/${extractor-documents.jar}"/>
		<copy file="${flexive.build.framework.jar.dir}/flexive-ant.jar" tofile="${flexive.dist.lib.dir}/flexive-ant.jar"/>
        <copy file="${flexive.build.framework.jar.dir}/flexive-shared.jar" tofile="${flexive.dist.lib.dir}/flexive-shared.jar"/>
        <copy todir="${flexive.dist.lib.dir}">
            <fileset dir="${build.ui.jar.dir}" includes="*.jar" excludes="flexive-backend.jar,flexive-plugin-*.jar"/>
        </copy>
        <copy file="${flexive.build.framework.jar.dir}/flexive-ejb.jar" tofile="${flexive.dist.lib.dir}/flexive-ejb.jar"/>
        <copy file="${flexive.lib.dir}/flexive-flatstorage.jar" tofile="${flexive.dist.lib.dir}/flexive-flatstorage.jar"/>

        <!-- Copy backend administration to applications folder -->
        <copy file="${flexive.base.build.dir}/ui/flexive.war" todir="${flexive.dist.apps.dir}/flexive-backend"/>
        <copy file="${build.ui.jar.dir}/flexive-backend.jar" todir="${flexive.dist.apps.dir}/flexive-backend"/>
        <!-- Include standard plugin setup -->
        <copy todir="${flexive.dist.apps.dir}">
            <fileset dir="${build.ui.jar.dir}" includes="flexive-plugin-*.jar" excludes="flexive-plugin-jsf-testrunner.jar"/>
        </copy>
        <copy todir="${flexive.dist.apps.disabled.dir}">
            <fileset dir="${build.ui.jar.dir}" includes="flexive-plugin-jsf-testrunner.jar"/>
        </copy>

        <!-- Copy build environment to root dist folder -->
        <copy todir="${flexive.dist.dir}">
            <fileset dir="${basedir}/disttools" includes="**/*"/>
            <fileset file="${basedir}/build.macros.xml"/>
            <fileset file="${basedir}/build.global-properties.xml"/>
        </copy>

        <!-- Copy template projects to templates/ -->
        <copy todir="${flexive.dist.templates.dir}/template-component">
            <fileset dir="${flexive.base.ui.dir}/template-component" includes="**/*" excludes=".svn,.SVN"/>
        </copy>
        <copy todir="${flexive.dist.templates.dir}/template-project">
            <fileset dir="${flexive.basedir}/src/template-project" includes="**/*" excludes=".svn,.SVN"/>
        </copy>

        <!-- Copy third-party libraries to extlib/ -->
        <copy todir="${flexive.dist.extlib.dir}" >
            <path refid="flexive.shared-libs.path"/>
            <mapper type="flatten"/>
        </copy>
        <delete dir="${flexive.dist.extlib.dir}" includes="jsf-facelets-src.jar"/>

        <!-- Copy openURL helper application (com.flexive.tools.OpenUrl) -->
        <copy todir="${flexive.dist.dir}" file="${flexive.build.framework.jar.dir}/openUrl.jar"/>

        <!-- Copy global deployment descriptors -->
        <copy todir="${flexive.dist.meta.dir}">
            <fileset file="${flexive.base.framework.dir}/resources/jboss/jboss-app.xml"/>
            <fileset file="${flexive.base.framework.dir}/resources/glassfish/sun-application.xml"/>
        </copy>
        <!--<copy file="${flexive.base.build.dir}/flexive.ear" tofile="${flexive.dist.dir}/flexive.ear" overwrite="true"/>-->

        <!-- Copy database setup scripts -->
        <copy todir="${flexive.dist.sql.dir}">
            <fileset dir="${database.src.dir}" includes="**/*"/>
        </copy>

        <!-- Create a sample database.properties file -->
        <echo file="${flexive.dist.dir}/database.properties">
# This is the database configuration file used by the flexive setup tasks.
#
# Enter the settings for your database server connection to be used for development.
# Please use the database.vendor property at the bottom of this file to select
# the database vendor to use.

# MySQL database settings

# The server host or IP
database.MySQL.host=localhost
# The server port
database.MySQL.port=3306
# The user name and password to be used for creating flexive database structures
database.MySQL.username=root
database.MySQL.password=a
# The root schema where the flexive schemas can be dropped and created
database.MySQL.schema.root=mysql
database.MySQL.schema.config=mysql
# JDBC Driver
database.MySQL.driver=com.mysql.jdbc.Driver
# JDBC base URL, will be appended by the database name and the url parameters
database.MySQL.url.base=jdbc:mysql://$${database.MySQL.host}:$${database.MySQL.port}/
# Optional URL parameters to append to the JDBC connect string
database.MySQL.url.parameters=?useUnicode=true&amp;characterEncoding=UTF-8

# H2 database settings

# The server host or IP
database.H2.host=localhost
# The server port
database.H2.port=9092
# The user name and password to be used for creating flexive database structures
database.H2.username=sa
database.H2.password=
database.H2.schema.root=flexive
database.H2.schema.config=flexiveConfiguration
database.H2.driver=org.h2.Driver
database.H2.url.base=jdbc:h2:tcp://$${database.H2.host}:$${database.H2.port}/~/
database.H2.url.parameters=;SCHEMA=@DATABASE@;MVCC=TRUE


#select the database vendor to use
#database.vendor=H2
database.vendor=MySQL
        </echo>

        <!-- Copy the raw sources created by dist.srcOnly -->
        <copy todir="${flexive.dist.dir}">
            <fileset file="${flexive.base.build.dir}/flexive-srcOnly.zip"/>
        </copy>
    </target>

    <target name="jar.maven.sources" description="Creates the source JAR files">
        <mkdir dir="${flexive.build.repo.dir}"/>

        <maven-build-sources artifactId="flexive-ejb"
                             label="[fleXive] EJB classes"
                             srcdir="${flexive.src.framework.dir}"
                             prefix="com/flexive/ejb" packagenames="com.flexive.ejb.*,com.flexive.core.*,com.flexive.shared.*">
            <fileset dir="${flexive.src.framework.dir}">
                <include name="com/flexive/core/**/*.java"/>
                <include name="com/flexive/ejb/**/*.java"/>
            </fileset>
        </maven-build-sources>

        <maven-build-sources artifactId="flexive-shared"
                             label="[fleXive] shared classes"
                             srcdir="${flexive.src.framework.dir}"
                             prefix="com/flexive/shared/" packagenames="com.flexive.shared.*"/>

        <maven-build-sources artifactId="flexive-web-shared" label="[fleXive] shared web classes" srcdir="${flexive.src.ui.shared.dir}"/>
        <maven-build-sources artifactId="flexive-plugin-jsf-core" label="[fleXive] JSF components" srcdir="${flexive.src.ui.components.dir}"/>
        <maven-build-sources artifactId="flexive-plugin-globalconfig" label="[fleXive] global (division) configuration plugin" srcdir="${flexive.base.ui.dir}/jsf-globalconfig/src/java"/>
        <maven-build-sources artifactId="flexive-plugin-jsf-feedbackPlugin" label="[fleXive] backend feedback plugin" srcdir="${flexive.base.ui.dir}/jsf-feedbackPlugin/src/java"/>
        <maven-build-sources artifactId="flexive-backend" label="[fleXive] backend application" srcdir="${flexive.src.ui.jsf.dir}"/>

        <maven-build-sources artifactId="flexive-extractor" label="[fleXive] document extraction library" srcdir="${flexive.src.framework.dir}"
                             prefix="com/flexive/extractor/" packagenames="com.flexive.extractor.*"/>
        <maven-build-sources artifactId="flexive-sqlParser" label="[fleXive] FxSQL parser" srcdir="${flexive.src.framework.dir}"
                             prefix="com/flexive/sqlParser/" packagenames="com.flexive.sqlParser.*"/>
        <maven-build-sources artifactId="flexive-h2" label="[fleXive] H2 database support" srcdir="${flexive.resources.framework.dir}/sql/H2/StoredProcedures"/>

    </target>

    <macrodef name="maven-build-sources">
        <attribute name="artifactId" description="The artifact name"/>
        <attribute name="label" description="The artifact label (displayed in the JavaDoc documentation)"/>
        <attribute name="srcdir"/>
        <attribute name="prefix" default="" description="Path prefix to limit include filter"/>
        <attribute name="packagenames" default="*" description="Packages to include for JavaDoc (see jdoc-call macro)"/>
        <element name="args" implicit="true" optional="true"/>

        <sequential>
            <!-- Create source JAR -->
            <jar file="${flexive.build.repo.dir}/@{artifactId}-sources.jar">
                <fileset dir="@{srcdir}">
                    <include name="@{prefix}**/*.java"/>
                    <include name="@{prefix}**/*.groovy"/>
                    <include name="@{prefix}**/*.gy"/>
                    <include name="@{prefix}**/*.jj"/>
                </fileset>
                <args/>
            </jar>

            <!-- Create JavaDocs -->
            <jdoc-call srcdir="@{srcdir}"
                       destdir="${flexive.build.repo.dir}/javadoc/@{artifactId}"
                       name="@{artifactId}"
                       packagenames="@{packagenames}"
                       doctitle="@{label}"/>
            <jar file="${flexive.build.repo.dir}/@{artifactId}-javadoc.jar">
                <fileset dir="${flexive.build.repo.dir}/javadoc/@{artifactId}" includes="**/*"/>
            </jar>
        </sequential>
    </macrodef>

    <target name="maven.deploy" description="Publish to Maven repository set in maven.dist.repo" depends="jar.all,jar.maven.sources">
        <maven-deploy-with-sources path="${flexive.build.framework.jar.dir}" name="flexive-ejb"/>

        <maven-deploy-with-sources path="${flexive.build.framework.jar.dir}" name="flexive-shared"/>

        <maven-deploy-with-sources path="${build.ui.jar.dir}" name="flexive-web-shared"/>
        <maven-deploy-with-sources path="${build.ui.jar.dir}" name="flexive-plugin-jsf-core"/>
        <maven-deploy-with-sources path="${build.ui.jar.dir}" name="flexive-plugin-globalconfig"/>
        <maven-deploy-with-sources path="${build.ui.jar.dir}" name="flexive-plugin-jsf-feedbackPlugin"/>
        <maven-deploy-with-sources path="${build.ui.jar.dir}" name="flexive-backend"/>

        <maven-deploy-with-sources path="${flexive.lib.dir}" name="flexive-extractor"/>
        <maven-deploy file="${flexive.lib.dir}/${extractor-documents.jar}" pom="flexive-extractor-documents.pom"/>
        <maven-deploy-with-sources path="${flexive.lib.dir}" name="flexive-sqlParser"/>
        <maven-deploy file="${flexive.lib.dir}/fxStream.jar" pom="fxStream.pom"/>
        <maven-deploy file="${flexive.lib.dir}/flexive-flatstorage.jar" pom="flexive-flatstorage.pom"/>
        <maven-deploy-with-sources path="${flexive.lib.dir}" name="flexive-h2"/>

        <maven-deploy file="${flexive.base.build.dir}/ui/flexive.war" pom="flexive-backend-war.pom"/>

        <!-- Also package libraries that are not available on common public servers -->
        <maven-deploy file="${flexive.lib.dir}/sanselan.jar" pom="sanselan.pom"/>
        <maven-deploy file="${flexive.lib.dir}/jsf/jsf-facelets.jar" pom="jsf-facelets.pom">
            <attach file="${flexive.lib.dir}/jsf/jsf-facelets-src.jar" classifier="sources"/>
        </maven-deploy>
        <maven-deploy file="${flexive.lib.dir}/jboss-common-core-42-compat.jar" pom="jboss-common-core-42-compat.pom"/>
        <maven-deploy file="${flexive.lib.dir}/PDFRenderer.jar" pom="pdf-renderer.pom"/>


        <!-- ZIP SQL Schemas -->
        <jar file="${flexive.base.build.dir}/flexive-sql-schemas.jar">
            <zipfileset prefix="com/flexive/schemas" dir="${flexive.resources.framework.dir}/sql" includes="**/*"/>
        </jar>
        <maven-deploy file="${flexive.base.build.dir}/flexive-sql-schemas.jar" pom="flexive-sql-schemas.pom"/>


        <!-- Deploy archetypes -->
<!--
        <maven-deploy file="${flexive.resources.framework.dir}/maven/archetypes/flexive-ear-archetype/target/flexive-ear-archetype-3.1-SNAPSHOT.jar"
                      pomPath="${flexive.resources.framework.dir}/maven/archetypes/flexive-ear-archetype"
                      pom="pom.xml"/>
-->
    </target>

    <macrodef name="maven-deploy-with-sources">
        <attribute name="path" description="Path to the JAR file"/>
        <attribute name="name" description="Base file name without extension. Will be used for the JAR, POM, and sources JAR file."/>
        <sequential>
            <maven-deploy file="@{path}/@{name}.jar" pom="@{name}.pom">
                <attach file="${flexive.build.repo.dir}/@{name}-sources.jar" classifier="sources"/>
                <attach file="${flexive.build.repo.dir}/@{name}-javadoc.jar" classifier="javadoc"/>
            </maven-deploy>
        </sequential>
    </macrodef>

    <macrodef name="maven-deploy">
        <attribute name="file"/>
        <attribute name="pom"/>
        <attribute name="pomPath" default="${flexive.resources.framework.dir}/maven"/>
        <element name="args" optional="true" implicit="true"/>
        <sequential>
            <copy file="@{pomPath}/@{pom}" todir="${flexive.base.build.dir}" overwrite="true">
                <filterset>
                    <filter token="FLEXIVE_VERSION" value="${flexive.maven.version}"/>
                    <filter token="FLEXIVE_BRANCH" value="${flexive.maven.branch}"/>
                </filterset>
            </copy>
            <!--artifact:install-provider groupid="org.apache.maven.wagon" artifactid="wagon-ssh" version="1.0-beta-1"/-->
            <artifact:deploy file="@{file}" uniqueversion="false">
                <remoterepository url="${maven.dist.repo}">
                    <snapshots updatePolicy="always"/>
                    <authentication username="${maven.dist.user}" password="${maven.dist.password}"
                                    privateKey="${maven.dist.privatekey}"/>
                </remoterepository>
                <pom file="${flexive.base.build.dir}/@{pom}"/>

                <args/>
            </artifact:deploy>
        </sequential>
    </macrodef>

    <target name="dist.package">
        <!-- Create flexive distribution w/ backend and examples ZIP file -->
        <zip destfile="${flexive.base.build.dir}/${dist.bin-all.file}">
            <fileset dir="${basedir}" includes="flexive-dist/**"/>
            <zipfileset prefix="flexive-dist" dir="${basedir}/legal" includes="LICENSE.txt,LGPL.txt,GPL.txt"/>

            <!-- Package examples in the applications folder -->
            <zipfileset prefix="flexive-dist/applications/disabled/helloworld" dir="${flexive.drop.dir}" includes="helloworld*"/>
            <zipfileset prefix="flexive-dist/applications/disabled/tutorial01-documentstore" dir="${flexive.drop.dir}" includes="tutorial01-documentstore*"/>
            <zipfileset prefix="flexive-dist/applications/disabled/products" dir="${flexive.drop.dir}" includes="products*"/>
            <zipfileset prefix="flexive-dist/applications/disabled/announcement-submission" dir="${flexive.drop.dir}" includes="announcement-submission*"/>
        </zip>
        <copy file="${flexive.base.build.dir}/${dist.bin-all.file}" toFile="${flexive.base.build.dir}/flexive-dist.zip"/>
        <!-- Create flexive distribution w/o backend and GPL'd files -->
        <zip destfile="${flexive.base.build.dir}/${dist.bin.file}">
            <fileset dir="${basedir}" includes="flexive-dist/**" excludes="**/flexive-backend/, **/extlib/mysql-connector*"/>
            <zipfileset prefix="flexive-dist" dir="${basedir}/legal" includes="LICENSE.txt,LGPL.txt"/>
        </zip>
    </target>

    <target name="dist.srcOnly" depends="prepare" description="Create a ZIP file with all sources of the current flexive installation (excluding build files and libraries)">
        <svnVersion property="dist.build.number"/>
        <groovy>
            properties['dist.srcOnly.file'] = properties['flexive.dist'].replaceAll("@@build.number@@", properties['dist.build.number'])+"-srcOnly.zip"
        </groovy>
        <zip destfile="${flexive.base.build.dir}/${dist.srcOnly.file}">
            <fileset dir="${flexive.src.framework.dir}" includes="**/*"/>
            <fileset dir="${flexive.src.ui.components.dir}" includes="**/*"/>
            <fileset dir="${flexive.src.ui.jsf.dir}" includes="**/*"/>
            <fileset dir="${flexive.src.ui.shared.dir}" includes="**/*"/>
            <fileset dir="${basedir}/legal" includes="LICENSE.txt,GPL.txt"/>
        </zip>
	    <copy file="${flexive.base.build.dir}/${dist.srcOnly.file}" toFile="${flexive.base.build.dir}/flexive-srcOnly.zip"/>
    </target>

    <target name="dist.src" depends="prepare" description="Create a ZIP file with the complete source tree and all libraries and buildfiles needed for building flexive">
        <svnVersion property="dist.build.number"/>
        <groovy>
            properties['dist.src.file'] = properties['flexive.dist'].replaceAll("@@build.number@@", properties['dist.build.number'])+"-src.zip"
        </groovy>

        <zip destfile="${flexive.base.build.dir}/${dist.src.file}">
            <zipfileset prefix="flexive-src"
                    dir="${basedir}" includes="disttools/**/*, legal/**/*, lib/**/*, src/**/*, *.xml, *.sample, flexive.properties, *.groovy"
                    excludes="build.properties, *.iws, *.ipr"/>
            <zipfileset prefix="flexive-src" dir="legal" includes="GPL*.txt, LICENSE.txt"/>
        </zip>

        <copy file="${flexive.base.build.dir}/${dist.src.file}" toFile="${flexive.base.build.dir}/flexive-src.zip"/>
    </target>

    <target name="jar.webdavOnly">
        <javac-call
                srcdir="${flexive.src.ui.shared.dir}/com/flexive/war/webdav"
                destdir="${build.framework.classes.dir}">
            <classpath refid="classpath.build.framework"/>
		</javac-call>
        <mkdir dir="${build.ui.jar.dir}"/>
        <jar jarfile="${build.ui.jar.dir}/flexive-webdav.jar">
            <fileset dir="${build.ui.shared.classes.dir}">
				<include name="com/flexive/war/webdav/**"/>
			</fileset>
        </jar>
        <delete dir="${build.framework.classes.dir}/com/flexive/war/webdav"/>
    </target>

    <!-- ============================= Plugin targets ================================ -->

    <target name="jar.jsf.components" depends="compile.ui.shared">
        <buildPlugin name="jsf-core" srcdir="${flexive.base.ui.components.dir}">
            <plugin-jar-elements>
                <!-- explode YUI and TinyMCE editor files in into jsf core plugins JAR under com/flexive/faces/weblets/js -->

                <zipfileset src="${flexive.base.ui.shared.dir}/resources/lib/tiny_mce.zip" prefix="com/flexive/faces/weblets/js" includes="**/*">
                    <!-- Exclude source javascript files -->
                    <exclude name="**/*_src.js"/>
                </zipfileset>

                <!-- Include the rest of YUI (skins, images, ...) -->
                <zipfileset src="${flexive.base.ui.shared.dir}/resources/lib/yui-${web.ui.yui.version}.zip" prefix="com/flexive/faces/weblets/js/yui">
                    <include name="**/*"/>
                    <!-- Exclude debug JS files -->
                    <exclude name="**/*-debug.js"/>
                </zipfileset>
            </plugin-jar-elements>
        </buildPlugin>
        
        <buildPlugin name="jsf-testrunner" srcdir="${flexive.base.ui.dir}/jsf-testrunner"/>
        <buildPlugin name="globalconfig" srcdir="${flexive.base.ui.dir}/jsf-globalconfig"/>
        <buildPlugin name="jsf-feedbackPlugin" srcdir="${flexive.base.ui.dir}/jsf-feedbackPlugin"/>
        <emma enabled="${emma.enabled}">
			<instr
				instrpath="${build.ui.jar.dir}/flexive-jsf-core.jar"
				mode="overwrite"
				merge="true"
				metadatafile="${coverage.dir}/coverage.em">
				<filter value="+com.flexive.*" />
			</instr>
		</emma>
    </target>

    <macrodef name="buildPlugin">
        <attribute name="name"/>
        <attribute name="srcdir"/>
        <element name="plugin-jar-elements" optional="true"/>
        <sequential>
            <compilePlugin srcdir="@{srcdir}" builddir="${build.ui.components.dir}/@{name}"
                           classpathref="classpath.build.plugin"/>
            <buildPluginJar name="@{name}" srcdir="@{srcdir}" builddir="${build.ui.components.dir}/@{name}"
                            jarfile="${build.ui.jar.dir}/flexive-plugin-@{name}.jar">
                <jar-elements>
                    <plugin-jar-elements/>
                </jar-elements>
            </buildPluginJar>
        </sequential>
    </macrodef>

</project>
