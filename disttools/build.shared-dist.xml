<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="flexive-shared-dist" basedir=".">

    <target name="db.prepare" description="Prepare database specific properties">
        <groovy>
            void setParam(String name) {
                try {
                    properties['database.'+name] = properties['database.'+properties['database.vendor']+'.'+name]
                } catch(Exception e) {
                    if(!properties['database.vendor'])
                        println "Please specify a database vendor in build.properties! Missing entry: [database.vendor]!"
                    else
                        println "Failed to set parameter [database.$name]: Missing entry [database.${properties['database.vendor']}.$name] in build.properties?"
                    ant.fail("Could not configure database settings!")
                }
            }
            //setup database properties based on the selected database vendor
            setParam('host')
            setParam('port')
            setParam('username')
            setParam('password')
            setParam('database.division')
            setParam('database.config')
            setParam('database.test')
            setParam('schema.division')
            setParam('schema.config')
            setParam('schema.test')
            setParam('url.base')
            setParam('url.parameters')
        </groovy>
    </target>

    <!-- Database setup tasks -->
    <target name="db.create"
            description="(Re-)Initialize a new flexive database with the given name. The database connection properties are retrieved from database.properties."
            depends="db.prepare">
        <echo taskname="flexive">Warning: this tool does not check if a schema of the given name
already exists. When you enter an existing database schema name,
you will lose all data stored in the schema.

If you reset the database of a running flexive application,
you must shutdown flexive before the update and then restart flexive.

[fleXive] is using ${database.vendor} database settings... (this can be changed in database.properties)            
        </echo>
        <input taskname="flexive" addproperty="database.dropdb" defaultvalue="false"
               message="Do you want to drop the database if it exists [true|false]:"/>
        <input taskname="flexive" addproperty="schema.division" defaultvalue="flexive"
               message="Please enter the database schema you want to create or reset:"/>
        <java fork="true" classname="com.flexive.tools.db.DBSetup" failonerror="true">
            <classpath>
                <fileset dir="${dist.lib.dir}" includes="*.jar"/>
                <fileset dir="${dist.extlib.dir}" includes="*.jar"/>
            </classpath>
            <arg value="${database.vendor}"/>
            <arg value="${database.database.division}"/>
            <arg value="${database.schema.division}"/>
            <arg value="division"/>
            <arg value="true"/>
            <arg value="true"/>
            <arg value="${database.dropdb}"/>
            <arg value="${database.username}"/>
            <arg value="${database.password}"/>
            <arg value="${database.url.base}"/>
            <arg value="${database.url.parameters}"/>
        </java>

    </target>

    <target name="db.config.create"
            description="(Re-)Initialize the global division configuration database. The database connection properties are retrieved from database.properties."
            depends="db.prepare">
        <input taskname="flexive" addproperty="database.dropdb" defaultvalue="false"
               message="Do you want to drop the database if it exists [true|false]:"/>
        <java fork="true" classname="com.flexive.tools.db.DBSetup" failonerror="true">
            <classpath>
                <fileset dir="${dist.lib.dir}" includes="*.jar"/>
                <fileset dir="${dist.extlib.dir}" includes="*.jar"/>
            </classpath>
            <arg value="${database.vendor}"/>
            <arg value="${database.database.config}"/>
            <arg value="${database.schema.config}"/>
            <arg value="config"/>
            <arg value="true"/>
            <arg value="true"/>
            <arg value="${database.dropdb}"/>
            <arg value="${database.username}"/>
            <arg value="${database.password}"/>
            <arg value="${database.url.base}"/>
            <arg value="${database.url.parameters}"/>
        </java>
    </target>

    <target name="deploy.jetty"
            description="Deploy an EAR file to Jetty">
        <input taskname="flexive" addproperty="deploy.jetty.dir"
               message="Jetty directory:"/>
        <input taskname="flexive" addproperty="deploy.ear.file"
               message="EAR file:"/>
        <deployToJetty earfile="${deploy.ear.file}" jettydir="${deploy.jetty.dir}"/>
    </target>

    <target name="run.jetty" description="Execute Jetty in ${deploy.jetty.dir}">
        <input taskname="flexive" addproperty="deploy.jetty.dir"
               message="Jetty directory:"/>
        <runJetty jettydir="${deploy.jetty.dir}"/>
    </target>

    <target name="jetty" description="Deploy to Jetty and start a new instance"
            depends="deploy.jetty,run.jetty"/>

    <macrodef name="collectApplications" description="Copies all flexive applications to a single directory.">
        <attribute name="todir" description="The target directory."/>
        <sequential>
            <copy todir="@{todir}">
                <fileset dir="${applications.dir}" includes="**/*.war" excludes="disabled/**"/>
                <fileset dir="${applications.dir}" includes="**/*.jar" excludes="disabled/**"/>
                <mapper type="flatten"/>
            </copy>
        </sequential>
    </macrodef>
</project>
