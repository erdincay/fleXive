<?xml version="1.0" encoding="UTF-8"?>
<project>

    <macrodef name="javac-call" description="Invokes the Java compiler for flexive sources. The classpath can be set with nested classpath elements.">
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<attribute name="excludes" default="NONE"/>
		<attribute name="includes" default="**/*.java"/>
		<element name="args" optional="true" implicit="true"/>
		<sequential>
			<mkdir dir="@{destdir}"/>
			<javac  srcdir="@{srcdir}"
                    destdir="@{destdir}"
                    debug="${compiler.debug}"
                    deprecation="${compiler.deprecation}"
                    optimize="${compiler.optimize}"
                    includes="@{includes}"
                    excludes="@{excludes}"
                    source="${compiler.source}"
                    target="${compiler.target}"
                    fork="${compiler.fork}">
				<args/>
			</javac>
		</sequential>
	</macrodef>


    <!-- ==================== Some common macros ==================== -->
    <macrodef name="replaceBuildProperties" description="Replaces build properties of the current build (subversion number, build user, timestamp) in a text file.">
        <attribute name="file" description="The text file to be processed."/>
        <attribute name="buildnumber" description="The build number to be inserted"/>
        <attribute name="buildtime" description="The build time to be inserted"/>
        <sequential>
            <replace file="@{file}">
                <replacefilter token="@@@build.number@@@" value="@{buildnumber}"/>
                <replacefilter token="@@@build.user@@@" value="${user.name}"/>
                <replacefilter token="@@@build.date@@@" value="@{buildtime}"/>
            </replace>
        </sequential>
    </macrodef>

    <macrodef name="buildScriptIndex">
        <attribute name="dir" description="The scripts base directory. Should include subfolders runonce, startup and library."/>
        <sequential>
            <scriptIndexBuilder indexFile="@{dir}/runonce/scriptindex.flexive" scriptDir="@{dir}/runonce"/>
            <scriptIndexBuilder indexFile="@{dir}/library/scriptindex.flexive" scriptDir="@{dir}/library"/>
            <scriptIndexBuilder indexFile="@{dir}/startup/scriptindex.flexive" scriptDir="@{dir}/startup"/>
        </sequential>
    </macrodef>

    <!-- ==================== Database maintenance macros ==================== -->
    <macrodef name="sql-call"
              description="Executes nested SQL statements. The database host, user and password are configured with the properties database.host, database.port, database.username, database.password">
        <attribute name="database"/>
        <attribute name="url"/>
        <attribute name="includes" default="N/A"/>
        <attribute name="excludes" default=""/>
        <attribute name="delimiter" default=";"/>
        <element name="args" optional="true" implicit="true"/>
        <sequential >
            <sql driver="${database.driver}" url="@{url}"
                userid="${database.username}" password="${database.password}" delimiter="@{delimiter}">
                <classpath refid="${database.classpathref}"/>
                <args/>
                <sort>
                    <fileset dir="${database.src.dir}${database.vendor}" includes="@{includes}" excludes="@{excludes}"/>
                </sort>
            </sql>
        </sequential>
    </macrodef>

    <macrodef name="division-setup" description="Creates all database structures for the given database name">
        <attribute name="database" description="The database name"/>
        <sequential >
            <groovy>
                <arg value="@{database}"/>
                if( "H2".equals(properties['database.vendor']) ) {
                    //special case for H2: the URL needs to contain the schema which is the database name
                    //to be created
                    properties['database.url.create'] = properties['database.url.base'] + args[0]    
                } else
                    properties['database.url.create'] = properties['database.url.base']
            </groovy>
            <!-- call with no url parameters to allow schema creation -->
            <sql-call database="${database.schema.root}" url="${database.url.create}">
                <transaction >
                    DROP SCHEMA IF EXISTS @{database};
                    CREATE SCHEMA @{database};
                </transaction>
            </sql-call>
            <!-- Replace URL parameters @DATABASE@ with @{Database}-->
            <groovy>
                <arg value="@{database}"/>
                properties['db.url.full'] = properties['database.url.base']+args[0]+properties['database.url.parameters']
                properties['db.url.full'] = properties['db.url.full'].replace("@DATABASE@", args[0])
            </groovy>
            <sql-call database="${database.schema.root}" includes="*.sql" excludes="SP*.sql"
                    url="${db.url.full}"/>
            <!-- Stored procedures setup -->
            <sql-call database="@{database}" delimiter="|" includes="SP*.sql"
                    url="${db.url.full}"/>
            <sql-call database="@{database}" delimiter="|" includes="tree/*.sql"
                    url="${db.url.full}"/>

            <echo taskname="flexive">Successfully initialized a flexive division at ${database.url.base}@{database}</echo>
        </sequential>
    </macrodef>

    <macrodef name="globalconfig-setup" description="The global configuration setup.">
        <sequential >
            <groovy>
                <arg value="@{database}"/>
                if( "H2".equals(properties['database.vendor']) ) {
                    //special case for H2: the URL needs to contain the schema which is the database name
                    //to be created
                    properties['database.url.create'] = properties['database.url.base'] + 'flexiveConfiguration'
                } else
                    properties['database.url.create'] = properties['database.url.base']
            </groovy>
            <!-- Create global configuration -->
            <sql-call database="${database.schema.config}"  url="${database.url.create}">
                <transaction >
                    DROP SCHEMA IF EXISTS flexiveConfiguration;
                    CREATE SCHEMA flexiveConfiguration;
                </transaction>
            </sql-call>
            <sql-call database="flexiveConfiguration" includes="config/*.sql"  url="${database.url.base}flexiveConfiguration"/>
            <echo taskname="flexive">Successfully initialized a the flexive configuration database at ${database.url.base}flexiveConfiguration</echo>
        </sequential>
    </macrodef>

    <!-- ==================== UI plugin/component macros ==================== -->

    <macrodef name="buildPluginJar" description="Package a plugin JAR file">
        <attribute name="name"/>
        <attribute name="srcdir"/>
        <attribute name="builddir"/>
        <attribute name="jarfile"/>
        <element name="jar-elements" optional="true"/>
        <sequential>
            <makeMessages srcdir="@{srcdir}/resources/messages" dest="@{builddir}/PluginMessages"/>
            <buildScriptIndex dir="@{srcdir}/resources/scripts"/>
            <jar jarfile="@{jarfile}">
                <fileset dir="@{srcdir}/resources" includes="META-INF/**/*,templates/**/*"/>
                <fileset dir="@{builddir}" includes="*.properties"/>
                <fileset dir="@{builddir}/classes"/>
                <fileset dir="@{srcdir}/resources/weblets" includes="**/*"/>
                <fileset dir="@{srcdir}/web" includes="**/*"/>

                <zipfileset dir="@{srcdir}/resources/scripts" prefix="@{name}Resources/scripts" includes="**/*"/>
                <jar-elements/>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="compilePlugin" description="Compile the plugin sources">
        <attribute name="srcdir"/>
        <attribute name="builddir"/>
        <attribute name="classpathref"/>
        <sequential>
            <mkdir dir="@{builddir}/classes"/>
            <javac-call
                srcdir="@{srcdir}/src/java"
                destdir="@{builddir}/classes">
                <classpath refid="@{classpathref}"/>
            </javac-call>
        </sequential>
    </macrodef>

    <!-- ========================= Deployment ========================== -->
    <macrodef name="deployToJetty" description="Deploy an EAR file to a Jetty installation">
        <attribute name="earfile"/>
        <attribute name="jettydir"/>
        <sequential >
            <!-- Clear EJB deployment directory -->
            <delete  dir="@{jettydir}/lib/ext/flexive"/>
            
            <!-- Unzip EJBs and libraries to lib/ext -->
            <unzip dest="@{jettydir}/lib/ext/flexive" overwrite="true" src="@{earfile}">
                <patternset>
                    <include name="lib/**"/>
                    <include name="*-ejb.jar"/>
                    <include name="lib/*-ejb.jar"/>
                </patternset>
            </unzip>

            <!-- Install WAR applications to webapps -->
            <unzip dest="@{jettydir}/webapps" overwrite="true" src="@{earfile}">
                <patternset>
                    <include name="*.war"/>
                </patternset>
            </unzip>

            <!-- Install JSF runtime -->
            <copy todir="@{jettydir}/lib/ext/flexive-environment">
                <fileset dir="${dist.basedir}/extlib" includes="jsf-api.jar,jsf-impl.jar,el-api.jar,el-ri.jar"/>
            </copy>
            
        </sequential>
    </macrodef>

    <macrodef name="runJetty" description="Launch Jetty with OpenEJB">
        <attribute name="jettydir"/>
        <sequential >
            <java dir="@{jettydir}" fork="true" jar="@{jettydir}/start.jar">
                <!-- Don't force -server because default Java installations may not have the server VM -->
                <!--<jvmarg value="-server"/>-->
                <jvmarg value="-Xmx128m"/>
                <jvmarg value="-Dopenejb.configuration=openejb.conf.xml"/>
            </java>
        </sequential>
    </macrodef>

</project>